\documentclass{article}
\usepackage{authblk}
\usepackage{float}
\usepackage{multirow}
\usepackage[utf8]{inputenc}
\begin{document}
\title{}
\author{}
\maketitle



<<setup, include=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
library(reproducer) # R package incl. software engineering data sets
library(ggplot2) # R package to create high-quality graphics
library(jsonlite)
 
alpha = 0.05
 
json_data = fromJSON("data.json")

json_data$objectOrder[json_data$object == 'steps31'] = 1
json_data$objectOrder[json_data$object == 'steps40'] = 2
json_data$objectOrder[json_data$object == 'steps53'] = 3
json_data$objectOrder[json_data$object == 'steps68'] = 4
json_data$objectOrder[json_data$object == 'steps89'] = 5
json_data$objectOrder[json_data$object == 'steps116'] = 6
json_data$objectOrder[json_data$object == 'steps151'] = 7
json_data$objectOrder[json_data$object == 'steps197'] = 8
json_data$objectOrder[json_data$object == 'steps256'] = 9
json_data$objectOrder[json_data$object == 'steps332'] = 10
json_data$objectOrder[json_data$object == 'steps432'] = 11
json_data$objectOrder[json_data$object == 'steps562'] = 12
json_data$objectOrder[json_data$object == 'steps731'] = 13
json_data$objectOrder[json_data$object == 'steps951'] = 14
json_data$objectOrder[json_data$object == 'steps1236'] = 15
json_data$objectOrder[json_data$object == 'steps1607'] = 16
json_data$objectOrder[json_data$object == 'steps2089'] = 17
json_data$objectOrder[json_data$object == 'steps2716'] = 18
json_data$objectOrder[json_data$object == 'steps3531'] = 19
json_data$objectOrder[json_data$object == 'steps4590'] = 20
json_data$objectOrder[json_data$object == 'steps5967'] = 21
json_data$objectOrder[json_data$object == 'steps7757'] = 22
json_data$objectOrder[json_data$object == 'steps10085'] = 23
json_data$objectOrder[json_data$object == 'steps13110'] = 24
json_data$objectOrder[json_data$object == 'steps17043'] = 25
json_data$objectOrder[json_data$object == 'steps22157'] = 26
json_data$objectOrder[json_data$object == 'steps28804'] = 27
json_data$objectOrder[json_data$object == 'steps37445'] = 28
json_data$objectOrder[json_data$object == 'steps48679'] = 29
json_data$objectOrder[json_data$object == 'steps63282'] = 30
json_data$objectOrder[json_data$object == 'steps82267'] = 31
json_data$objectOrder[json_data$object == 'steps106948'] = 32
json_data$objectOrder[json_data$object == 'steps139032'] = 33
json_data$objectOrder[json_data$object == 'steps180742'] = 34

json_data$treatmentDescription[json_data$treatment == 'Basic'] = 'Basic'
json_data$treatmentDescription[json_data$treatment == 'Decomp'] = 'Decomp'
json_data$treatmentDescription[json_data$treatment == 'Hylaa'] = 'Hylaa'
json_data$treatmentDescription[json_data$treatment == 'NoInput'] = 'No Input'
json_data$treatmentDescription[json_data$treatment == 'Warm'] = 'Warm'
json_data$objectLabel[json_data$object == 'steps31'] = '31'
json_data$objectLabel[json_data$object == 'steps40'] = '40'
json_data$objectLabel[json_data$object == 'steps53'] = '53'
json_data$objectLabel[json_data$object == 'steps68'] = '68'
json_data$objectLabel[json_data$object == 'steps89'] = '89'
json_data$objectLabel[json_data$object == 'steps116'] = '116'
json_data$objectLabel[json_data$object == 'steps151'] = '151'
json_data$objectLabel[json_data$object == 'steps197'] = '197'
json_data$objectLabel[json_data$object == 'steps256'] = '256'
json_data$objectLabel[json_data$object == 'steps332'] = '332'
json_data$objectLabel[json_data$object == 'steps432'] = '432'
json_data$objectLabel[json_data$object == 'steps562'] = '562'
json_data$objectLabel[json_data$object == 'steps731'] = '731'
json_data$objectLabel[json_data$object == 'steps951'] = '951'
json_data$objectLabel[json_data$object == 'steps1236'] = '1236'
json_data$objectLabel[json_data$object == 'steps1607'] = '1607'
json_data$objectLabel[json_data$object == 'steps2089'] = '2089'
json_data$objectLabel[json_data$object == 'steps2716'] = '2716'
json_data$objectLabel[json_data$object == 'steps3531'] = '3531'
json_data$objectLabel[json_data$object == 'steps4590'] = '4590'
json_data$objectLabel[json_data$object == 'steps5967'] = '5967'
json_data$objectLabel[json_data$object == 'steps7757'] = '7757'
json_data$objectLabel[json_data$object == 'steps10085'] = '10085'
json_data$objectLabel[json_data$object == 'steps13110'] = '13110'
json_data$objectLabel[json_data$object == 'steps17043'] = '17043'
json_data$objectLabel[json_data$object == 'steps22157'] = '22157'
json_data$objectLabel[json_data$object == 'steps28804'] = '28804'
json_data$objectLabel[json_data$object == 'steps37445'] = '37445'
json_data$objectLabel[json_data$object == 'steps48679'] = '48679'
json_data$objectLabel[json_data$object == 'steps63282'] = '63282'
json_data$objectLabel[json_data$object == 'steps82267'] = '82267'
json_data$objectLabel[json_data$object == 'steps106948'] = '106948'
json_data$objectLabel[json_data$object == 'steps139032'] = '139032'
json_data$objectLabel[json_data$object == 'steps180742'] = '180742'

expectedRuns = 10
json_data$time[json_data$executionStatus!='FINISHED']=NA
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps31' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps31']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps40' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps40']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps53' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps53']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps68' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps68']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps89' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps89']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps116' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps116']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps151' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps151']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps197' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps197']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps256' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps256']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps332' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps332']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps432' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps432']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps562' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps562']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps731' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps731']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps951' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps951']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps1236' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps1236']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps1607' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps1607']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps2089' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps2089']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps2716' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps2716']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps3531' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps3531']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps4590' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps4590']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps5967' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps5967']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps7757' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps7757']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps10085' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps10085']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps13110' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps13110']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps17043' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps17043']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps22157' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps22157']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps28804' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps28804']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps37445' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps37445']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps48679' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps48679']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps63282' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps63282']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps82267' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps82267']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps106948' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps106948']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps139032' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps139032']=NA
}
if (length(json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps180742' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Basic' & json_data$object == 'steps180742']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps31' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps31']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps40' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps40']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps53' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps53']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps68' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps68']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps89' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps89']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps116' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps116']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps151' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps151']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps197' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps197']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps256' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps256']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps332' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps332']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps432' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps432']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps562' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps562']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps731' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps731']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps951' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps951']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps1236' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps1236']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps1607' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps1607']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps2089' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps2089']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps2716' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps2716']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps3531' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps3531']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps4590' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps4590']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps5967' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps5967']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps7757' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps7757']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps10085' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps10085']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps13110' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps13110']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps17043' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps17043']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps22157' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps22157']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps28804' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps28804']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps37445' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps37445']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps48679' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps48679']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps63282' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps63282']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps82267' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps82267']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps106948' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps106948']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps139032' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps139032']=NA
}
if (length(json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps180742' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Decomp' & json_data$object == 'steps180742']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps31' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps31']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps40' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps40']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps53' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps53']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps68' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps68']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps89' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps89']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps116' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps116']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps151' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps151']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps197' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps197']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps256' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps256']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps332' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps332']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps432' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps432']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps562' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps562']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps731' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps731']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps951' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps951']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps1236' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps1236']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps1607' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps1607']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps2089' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps2089']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps2716' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps2716']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps3531' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps3531']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps4590' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps4590']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps5967' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps5967']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps7757' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps7757']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps10085' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps10085']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps13110' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps13110']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps17043' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps17043']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps22157' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps22157']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps28804' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps28804']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps37445' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps37445']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps48679' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps48679']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps63282' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps63282']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps82267' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps82267']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps106948' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps106948']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps139032' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps139032']=NA
}
if (length(json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps180742' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Hylaa' & json_data$object == 'steps180742']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps31' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps31']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps40' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps40']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps53' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps53']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps68' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps68']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps89' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps89']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps116' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps116']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps151' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps151']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps197' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps197']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps256' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps256']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps332' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps332']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps432' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps432']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps562' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps562']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps731' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps731']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps951' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps951']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps1236' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps1236']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps1607' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps1607']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps2089' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps2089']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps2716' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps2716']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps3531' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps3531']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps4590' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps4590']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps5967' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps5967']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps7757' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps7757']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps10085' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps10085']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps13110' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps13110']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps17043' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps17043']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps22157' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps22157']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps28804' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps28804']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps37445' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps37445']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps48679' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps48679']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps63282' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps63282']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps82267' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps82267']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps106948' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps106948']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps139032' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps139032']=NA
}
if (length(json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps180742' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'NoInput' & json_data$object == 'steps180742']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps31' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps31']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps40' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps40']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps53' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps53']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps68' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps68']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps89' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps89']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps116' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps116']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps151' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps151']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps197' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps197']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps256' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps256']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps332' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps332']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps432' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps432']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps562' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps562']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps731' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps731']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps951' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps951']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps1236' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps1236']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps1607' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps1607']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps2089' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps2089']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps2716' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps2716']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps3531' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps3531']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps4590' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps4590']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps5967' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps5967']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps7757' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps7757']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps10085' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps10085']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps13110' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps13110']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps17043' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps17043']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps22157' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps22157']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps28804' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps28804']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps37445' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps37445']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps48679' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps48679']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps63282' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps63282']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps82267' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps82267']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps106948' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps106948']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps139032' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps139032']=NA
}
if (length(json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps180742' & !is.na(json_data$time)])!=expectedRuns){
	json_data$time[json_data$treatment == 'Warm' & json_data$object == 'steps180742']=NA
}

json_data$treatment = as.factor(json_data$treatment)
json_data$treatmentDescription = as.factor(json_data$treatmentDescription)
json_data$object = as.factor(json_data$object)		
json_data$objectLabel = as.numeric(json_data$objectLabel)
data_summary <- function(data, varname, groupnames){
  require(plyr)
  summary_func <- function(x, col){
    c(mean = mean(x[[col]], na.rm=TRUE),
      sd = sd(x[[col]], na.rm=TRUE))
  }
  data_sum<-ddply(data, groupnames, .fun=summary_func,
                  varname)
  data_sum <- rename(data_sum, c("mean" = varname))
 return(data_sum)
}
breaks_continuous <- function(data, steps){
  diff<-max(data)-min(data) 
  step_size<-diff/steps
  step<-min(data)
  breaks<-c(step)
  for (i in 1:steps){
    step<-step+step_size
    breaks<-c(breaks,step)
  }
  return(breaks)
}  
breaks_log <- function(data, steps){
  diff<-max(data)/min(data) 
  base<-diff^(1/steps)
  exp<-log(min(data),base)
  breaks<-c(round(base^exp))
  for (i in 1:steps){
    exp<-exp+1
    breaks<-c(breaks,round(base^exp))
  }
  return(breaks)
}  
@
\section{Description}



\section{Overview}


<<overview_time, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF<-data_summary(subset(json_data,(object=='steps31'|object=='steps40'|object=='steps53'|object=='steps68'|object=='steps89'|object=='steps116'|object=='steps151'|object=='steps197'|object=='steps256'|object=='steps332'|object=='steps432'|object=='steps562'|object=='steps731'|object=='steps951'|object=='steps1236'|object=='steps1607'|object=='steps2089'|object=='steps2716'|object=='steps3531'|object=='steps4590'|object=='steps5967'|object=='steps7757'|object=='steps10085'|object=='steps13110'|object=='steps17043'|object=='steps22157'|object=='steps28804'|object=='steps37445'|object=='steps48679'|object=='steps63282'|object=='steps82267'|object=='steps106948'|object=='steps139032'|object=='steps180742') & !is.na(time)), varname="time", groupnames=c("treatmentDescription", "objectLabel", "objectOrder"))
		
		ggplot(DF, aes(x=objectLabel, y=time, group=treatmentDescription, color=treatmentDescription)) + 
		    geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1, linetype=3) +
		    geom_line() + geom_point()+
		   scale_color_brewer(palette="Paired") +
		   theme_bw() +
		  scale_x_log10(name = "Number of steps(log scale)", breaks_log(data=DF$objectLabel,steps=10))+
		  
		  scale_y_continuous(name = "Runtime (seconds)")+
		  ggtitle("Runtime Overview") + 
		  theme(legend.title = element_blank())	
@



\subsection{Objects Overview}
\subsubsection{Overview for 31 steps}
<<steps31, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps31')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps31_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 31 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps31_time
	



@	
\subsubsection{Overview for 40 steps}
<<steps40, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps40')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps40_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 40 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps40_time
	



@	
\subsubsection{Overview for 53 steps}
<<steps53, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps53')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps53_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 53 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps53_time
	



@	
\subsubsection{Overview for 68 steps}
<<steps68, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps68')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps68_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 68 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps68_time
	



@	
\subsubsection{Overview for 89 steps}
<<steps89, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps89')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps89_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 89 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps89_time
	



@	
\subsubsection{Overview for 116 steps}
<<steps116, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps116')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps116_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 116 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps116_time
	



@	
\subsubsection{Overview for 151 steps}
<<steps151, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps151')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps151_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 151 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps151_time
	



@	
\subsubsection{Overview for 197 steps}
<<steps197, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps197')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps197_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 197 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps197_time
	



@	
\subsubsection{Overview for 256 steps}
<<steps256, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps256')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps256_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 256 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps256_time
	



@	
\subsubsection{Overview for 332 steps}
<<steps332, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps332')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps332_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 332 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps332_time
	



@	
\subsubsection{Overview for 432 steps}
<<steps432, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps432')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps432_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 432 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps432_time
	



@	
\subsubsection{Overview for 562 steps}
<<steps562, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps562')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps562_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 562 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps562_time
	



@	
\subsubsection{Overview for 731 steps}
<<steps731, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps731')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps731_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 731 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps731_time
	



@	
\subsubsection{Overview for 951 steps}
<<steps951, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps951')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps951_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 951 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps951_time
	



@	
\subsubsection{Overview for 1236 steps}
<<steps1236, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps1236')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps1236_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 1236 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps1236_time
	



@	
\subsubsection{Overview for 1607 steps}
<<steps1607, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps1607')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps1607_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 1607 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps1607_time
	



@	
\subsubsection{Overview for 2089 steps}
<<steps2089, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps2089')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps2089_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 2089 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps2089_time
	



@	
\subsubsection{Overview for 2716 steps}
<<steps2716, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps2716')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps2716_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 2716 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps2716_time
	



@	
\subsubsection{Overview for 3531 steps}
<<steps3531, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps3531')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps3531_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 3531 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps3531_time
	



@	
\subsubsection{Overview for 4590 steps}
<<steps4590, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps4590')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps4590_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 4590 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps4590_time
	



@	
\subsubsection{Overview for 5967 steps}
<<steps5967, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps5967')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps5967_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 5967 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps5967_time
	



@	
\subsubsection{Overview for 7757 steps}
<<steps7757, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps7757')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps7757_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 7757 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps7757_time
	



@	
\subsubsection{Overview for 10085 steps}
<<steps10085, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps10085')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps10085_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 10085 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps10085_time
	



@	
\subsubsection{Overview for 13110 steps}
<<steps13110, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps13110')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps13110_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 13110 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps13110_time
	



@	
\subsubsection{Overview for 17043 steps}
<<steps17043, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps17043')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps17043_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 17043 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps17043_time
	



@	
\subsubsection{Overview for 22157 steps}
<<steps22157, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps22157')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps22157_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 22157 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps22157_time
	



@	
\subsubsection{Overview for 28804 steps}
<<steps28804, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps28804')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps28804_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 28804 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps28804_time
	



@	
\subsubsection{Overview for 37445 steps}
<<steps37445, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps37445')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps37445_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 37445 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps37445_time
	



@	
\subsubsection{Overview for 48679 steps}
<<steps48679, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps48679')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps48679_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 48679 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps48679_time
	



@	
\subsubsection{Overview for 63282 steps}
<<steps63282, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps63282')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps63282_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 63282 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps63282_time
	



@	
\subsubsection{Overview for 82267 steps}
<<steps82267, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps82267')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps82267_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 82267 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps82267_time
	



@	
\subsubsection{Overview for 106948 steps}
<<steps106948, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps106948')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps106948_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 106948 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps106948_time
	



@	
\subsubsection{Overview for 139032 steps}
<<steps139032, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps139032')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps139032_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 139032 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps139032_time
	



@	
\subsubsection{Overview for 180742 steps}
<<steps180742, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='Basic'|treatment=='Decomp'|treatment=='Hylaa'|treatment=='NoInput'|treatment=='Warm')& object=='steps180742')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])   
boxplot_steps180742_time = ggplot(DF, aes(x =treatmentDescription , y = time)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Optimization")+
	ggtitle("Runtime by Optimization for 180742 steps") + 
	ylab("Runtime (seconds)")   
	boxplot_steps180742_time
	



@	

\section{Research Hypotheses}

\subsection{RH1: Runtime time for Hylaa is equals than runtime time for Warm}

 <<RH1, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 
 result_RH1_objects=34
 result_RH1_less=0
 result_RH1_greater=0
 result_RH1_Hylaa=0
 result_RH1_Warm=0
 result_RH1_none=0
 result_RH1_inconclusive=0
 @
 
 <<overview_RH1, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 DF <- data_summary(subset(json_data, (object == 'steps31' |object == 'steps40' |object == 'steps53' |object == 'steps68' |object == 'steps89' |object == 'steps116' |object == 'steps151' |object == 'steps197' |object == 'steps256' |object == 'steps332' |object == 'steps432' |object == 'steps562' |object == 'steps731' |object == 'steps951' |object == 'steps1236' |object == 'steps1607' |object == 'steps2089' |object == 'steps2716' |object == 'steps3531' |object == 'steps4590' |object == 'steps5967' |object == 'steps7757' |object == 'steps10085' |object == 'steps13110' |object == 'steps17043' |object == 'steps22157' |object == 'steps28804' |object == 'steps37445' |object == 'steps48679' |object == 'steps63282' |object == 'steps82267' |object == 'steps106948' |object == 'steps139032' |object == 'steps180742' ) & (treatment == 'Hylaa' | treatment == 'Warm')), varname = "time", groupnames = c("treatmentDescription", "objectLabel", "objectOrder"))
 		
 		ggplot(DF, aes(x=objectLabel, y=time, group=treatmentDescription, color=treatmentDescription)) + 
 		    geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1, linetype=3) +
 		    geom_line() + geom_point()+
 		   scale_color_brewer(palette="Paired") +
 		   theme_bw() +
 		  scale_x_log10(name = "Number of steps(log scale)", breaks_log(data=DF$objectLabel,steps=10))+
 		  
 		  scale_y_continuous(name = "Runtime (seconds)")+
 		  ggtitle("Runtime Overview") + 
 		  theme(legend.title = element_blank())	
 @
 	

\subsubsection{RH1.1: Object 31 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps31, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps31 = subset(json_data, treatment == 'Hylaa' & object == 'steps31' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps31)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time)
 
 if(length(time_Hylaa_steps31) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps31'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps31')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time))
 
 	shap_Hylaa_steps31 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time)
 	print(shap_Hylaa_steps31)
 	if(shap_Hylaa_steps31$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps31$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps31$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps31, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps31 = subset(json_data, treatment == 'Warm' & object == 'steps31' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps31)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps31')$time)
 
 if(length(time_Warm_steps31) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps31'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps31')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps31')$time))
 
 	shap_Warm_steps31 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps31')$time)
 	print(shap_Warm_steps31)
 	if(shap_Warm_steps31$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps31$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps31$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps31, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps31')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps31 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 31 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps31
 if(length(time_Hylaa_steps31) == expectedRuns & length(time_Warm_steps31) == expectedRuns){
 	result_RH1_steps31_tTest = FALSE
 	result_RH1_steps31_wTest = FALSE
 	
 	if(shap_Hylaa_steps31$p.value > alpha&shap_Warm_steps31$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time, subset(json_data,treatment == 'Warm' & object == 'steps31')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time, subset(json_data, treatment == 'Warm' & object == 'steps31')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps31_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps31')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps31_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps31_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps31) == expectedRuns & length(time_Warm_steps31) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps31')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps31')$time))))
	 if (result_RH1_steps31_tTest | result_RH1_steps31_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps31')$time)){
	   	result_RH1_steps31 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps31 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps31 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps31 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps31 = 5
	 	result_RH1_steps31 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps31')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps31')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps31')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps31')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps31')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps31) != expectedRuns & length(time_Warm_steps31) != expectedRuns){
 	result_object_RH1_steps31 = 4
	result_RH1_steps31 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps31) == expectedRuns & length(time_Warm_steps31) != expectedRuns){
	result_object_RH1_steps31 = 2
	result_RH1_steps31 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps31) != expectedRuns & length(time_Warm_steps31) == expectedRuns){
	result_object_RH1_steps31 = 3
	result_RH1_steps31 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.2: Object 40 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps40, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps40 = subset(json_data, treatment == 'Hylaa' & object == 'steps40' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps40)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time)
 
 if(length(time_Hylaa_steps40) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps40'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps40')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time))
 
 	shap_Hylaa_steps40 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time)
 	print(shap_Hylaa_steps40)
 	if(shap_Hylaa_steps40$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps40$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps40$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps40, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps40 = subset(json_data, treatment == 'Warm' & object == 'steps40' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps40)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps40')$time)
 
 if(length(time_Warm_steps40) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps40'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps40')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps40')$time))
 
 	shap_Warm_steps40 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps40')$time)
 	print(shap_Warm_steps40)
 	if(shap_Warm_steps40$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps40$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps40$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps40, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps40')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps40 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 40 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps40
 if(length(time_Hylaa_steps40) == expectedRuns & length(time_Warm_steps40) == expectedRuns){
 	result_RH1_steps40_tTest = FALSE
 	result_RH1_steps40_wTest = FALSE
 	
 	if(shap_Hylaa_steps40$p.value > alpha&shap_Warm_steps40$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time, subset(json_data,treatment == 'Warm' & object == 'steps40')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time, subset(json_data, treatment == 'Warm' & object == 'steps40')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps40_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps40')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps40_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps40_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps40) == expectedRuns & length(time_Warm_steps40) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps40')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps40')$time))))
	 if (result_RH1_steps40_tTest | result_RH1_steps40_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps40')$time)){
	   	result_RH1_steps40 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps40 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps40 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps40 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps40 = 5
	 	result_RH1_steps40 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps40')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps40')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps40')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps40')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps40')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps40) != expectedRuns & length(time_Warm_steps40) != expectedRuns){
 	result_object_RH1_steps40 = 4
	result_RH1_steps40 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps40) == expectedRuns & length(time_Warm_steps40) != expectedRuns){
	result_object_RH1_steps40 = 2
	result_RH1_steps40 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps40) != expectedRuns & length(time_Warm_steps40) == expectedRuns){
	result_object_RH1_steps40 = 3
	result_RH1_steps40 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.3: Object 53 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps53, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps53 = subset(json_data, treatment == 'Hylaa' & object == 'steps53' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps53)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time)
 
 if(length(time_Hylaa_steps53) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps53'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps53')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time))
 
 	shap_Hylaa_steps53 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time)
 	print(shap_Hylaa_steps53)
 	if(shap_Hylaa_steps53$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps53$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps53$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps53, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps53 = subset(json_data, treatment == 'Warm' & object == 'steps53' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps53)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps53')$time)
 
 if(length(time_Warm_steps53) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps53'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps53')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps53')$time))
 
 	shap_Warm_steps53 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps53')$time)
 	print(shap_Warm_steps53)
 	if(shap_Warm_steps53$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps53$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps53$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps53, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps53')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps53 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 53 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps53
 if(length(time_Hylaa_steps53) == expectedRuns & length(time_Warm_steps53) == expectedRuns){
 	result_RH1_steps53_tTest = FALSE
 	result_RH1_steps53_wTest = FALSE
 	
 	if(shap_Hylaa_steps53$p.value > alpha&shap_Warm_steps53$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time, subset(json_data,treatment == 'Warm' & object == 'steps53')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time, subset(json_data, treatment == 'Warm' & object == 'steps53')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps53_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps53')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps53_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps53_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps53) == expectedRuns & length(time_Warm_steps53) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps53')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps53')$time))))
	 if (result_RH1_steps53_tTest | result_RH1_steps53_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps53')$time)){
	   	result_RH1_steps53 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps53 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps53 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps53 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps53 = 5
	 	result_RH1_steps53 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps53')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps53')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps53')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps53')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps53')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps53) != expectedRuns & length(time_Warm_steps53) != expectedRuns){
 	result_object_RH1_steps53 = 4
	result_RH1_steps53 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps53) == expectedRuns & length(time_Warm_steps53) != expectedRuns){
	result_object_RH1_steps53 = 2
	result_RH1_steps53 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps53) != expectedRuns & length(time_Warm_steps53) == expectedRuns){
	result_object_RH1_steps53 = 3
	result_RH1_steps53 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.4: Object 68 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps68, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps68 = subset(json_data, treatment == 'Hylaa' & object == 'steps68' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps68)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time)
 
 if(length(time_Hylaa_steps68) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps68'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps68')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time))
 
 	shap_Hylaa_steps68 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time)
 	print(shap_Hylaa_steps68)
 	if(shap_Hylaa_steps68$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps68$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps68$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps68, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps68 = subset(json_data, treatment == 'Warm' & object == 'steps68' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps68)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps68')$time)
 
 if(length(time_Warm_steps68) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps68'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps68')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps68')$time))
 
 	shap_Warm_steps68 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps68')$time)
 	print(shap_Warm_steps68)
 	if(shap_Warm_steps68$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps68$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps68$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps68, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps68')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps68 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 68 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps68
 if(length(time_Hylaa_steps68) == expectedRuns & length(time_Warm_steps68) == expectedRuns){
 	result_RH1_steps68_tTest = FALSE
 	result_RH1_steps68_wTest = FALSE
 	
 	if(shap_Hylaa_steps68$p.value > alpha&shap_Warm_steps68$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time, subset(json_data,treatment == 'Warm' & object == 'steps68')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time, subset(json_data, treatment == 'Warm' & object == 'steps68')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps68_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps68')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps68_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps68_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps68) == expectedRuns & length(time_Warm_steps68) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps68')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps68')$time))))
	 if (result_RH1_steps68_tTest | result_RH1_steps68_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps68')$time)){
	   	result_RH1_steps68 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps68 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps68 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps68 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps68 = 5
	 	result_RH1_steps68 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps68')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps68')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps68')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps68')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps68')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps68) != expectedRuns & length(time_Warm_steps68) != expectedRuns){
 	result_object_RH1_steps68 = 4
	result_RH1_steps68 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps68) == expectedRuns & length(time_Warm_steps68) != expectedRuns){
	result_object_RH1_steps68 = 2
	result_RH1_steps68 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps68) != expectedRuns & length(time_Warm_steps68) == expectedRuns){
	result_object_RH1_steps68 = 3
	result_RH1_steps68 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.5: Object 89 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps89, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps89 = subset(json_data, treatment == 'Hylaa' & object == 'steps89' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps89)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time)
 
 if(length(time_Hylaa_steps89) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps89'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps89')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time))
 
 	shap_Hylaa_steps89 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time)
 	print(shap_Hylaa_steps89)
 	if(shap_Hylaa_steps89$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps89$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps89$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps89, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps89 = subset(json_data, treatment == 'Warm' & object == 'steps89' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps89)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps89')$time)
 
 if(length(time_Warm_steps89) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps89'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps89')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps89')$time))
 
 	shap_Warm_steps89 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps89')$time)
 	print(shap_Warm_steps89)
 	if(shap_Warm_steps89$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps89$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps89$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps89, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps89')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps89 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 89 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps89
 if(length(time_Hylaa_steps89) == expectedRuns & length(time_Warm_steps89) == expectedRuns){
 	result_RH1_steps89_tTest = FALSE
 	result_RH1_steps89_wTest = FALSE
 	
 	if(shap_Hylaa_steps89$p.value > alpha&shap_Warm_steps89$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time, subset(json_data,treatment == 'Warm' & object == 'steps89')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time, subset(json_data, treatment == 'Warm' & object == 'steps89')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps89_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps89')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps89_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps89_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps89) == expectedRuns & length(time_Warm_steps89) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps89')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps89')$time))))
	 if (result_RH1_steps89_tTest | result_RH1_steps89_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps89')$time)){
	   	result_RH1_steps89 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps89 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps89 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps89 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps89 = 5
	 	result_RH1_steps89 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps89')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps89')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps89')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps89')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps89')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps89) != expectedRuns & length(time_Warm_steps89) != expectedRuns){
 	result_object_RH1_steps89 = 4
	result_RH1_steps89 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps89) == expectedRuns & length(time_Warm_steps89) != expectedRuns){
	result_object_RH1_steps89 = 2
	result_RH1_steps89 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps89) != expectedRuns & length(time_Warm_steps89) == expectedRuns){
	result_object_RH1_steps89 = 3
	result_RH1_steps89 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.6: Object 116 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps116, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps116 = subset(json_data, treatment == 'Hylaa' & object == 'steps116' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps116)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time)
 
 if(length(time_Hylaa_steps116) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps116'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps116')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time))
 
 	shap_Hylaa_steps116 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time)
 	print(shap_Hylaa_steps116)
 	if(shap_Hylaa_steps116$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps116$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps116$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps116, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps116 = subset(json_data, treatment == 'Warm' & object == 'steps116' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps116)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps116')$time)
 
 if(length(time_Warm_steps116) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps116'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps116')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps116')$time))
 
 	shap_Warm_steps116 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps116')$time)
 	print(shap_Warm_steps116)
 	if(shap_Warm_steps116$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps116$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps116$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps116, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps116')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps116 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 116 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps116
 if(length(time_Hylaa_steps116) == expectedRuns & length(time_Warm_steps116) == expectedRuns){
 	result_RH1_steps116_tTest = FALSE
 	result_RH1_steps116_wTest = FALSE
 	
 	if(shap_Hylaa_steps116$p.value > alpha&shap_Warm_steps116$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time, subset(json_data,treatment == 'Warm' & object == 'steps116')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time, subset(json_data, treatment == 'Warm' & object == 'steps116')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps116_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps116')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps116_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps116_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps116) == expectedRuns & length(time_Warm_steps116) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps116')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps116')$time))))
	 if (result_RH1_steps116_tTest | result_RH1_steps116_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps116')$time)){
	   	result_RH1_steps116 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps116 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps116 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps116 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps116 = 5
	 	result_RH1_steps116 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps116')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps116')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps116')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps116')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps116')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps116) != expectedRuns & length(time_Warm_steps116) != expectedRuns){
 	result_object_RH1_steps116 = 4
	result_RH1_steps116 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps116) == expectedRuns & length(time_Warm_steps116) != expectedRuns){
	result_object_RH1_steps116 = 2
	result_RH1_steps116 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps116) != expectedRuns & length(time_Warm_steps116) == expectedRuns){
	result_object_RH1_steps116 = 3
	result_RH1_steps116 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.7: Object 151 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps151, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps151 = subset(json_data, treatment == 'Hylaa' & object == 'steps151' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps151)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time)
 
 if(length(time_Hylaa_steps151) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps151'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps151')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time))
 
 	shap_Hylaa_steps151 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time)
 	print(shap_Hylaa_steps151)
 	if(shap_Hylaa_steps151$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps151$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps151$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps151, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps151 = subset(json_data, treatment == 'Warm' & object == 'steps151' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps151)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps151')$time)
 
 if(length(time_Warm_steps151) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps151'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps151')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps151')$time))
 
 	shap_Warm_steps151 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps151')$time)
 	print(shap_Warm_steps151)
 	if(shap_Warm_steps151$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps151$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps151$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps151, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps151')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps151 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 151 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps151
 if(length(time_Hylaa_steps151) == expectedRuns & length(time_Warm_steps151) == expectedRuns){
 	result_RH1_steps151_tTest = FALSE
 	result_RH1_steps151_wTest = FALSE
 	
 	if(shap_Hylaa_steps151$p.value > alpha&shap_Warm_steps151$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time, subset(json_data,treatment == 'Warm' & object == 'steps151')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time, subset(json_data, treatment == 'Warm' & object == 'steps151')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps151_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps151')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps151_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps151_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps151) == expectedRuns & length(time_Warm_steps151) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps151')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps151')$time))))
	 if (result_RH1_steps151_tTest | result_RH1_steps151_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps151')$time)){
	   	result_RH1_steps151 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps151 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps151 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps151 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps151 = 5
	 	result_RH1_steps151 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps151')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps151')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps151')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps151')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps151')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps151) != expectedRuns & length(time_Warm_steps151) != expectedRuns){
 	result_object_RH1_steps151 = 4
	result_RH1_steps151 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps151) == expectedRuns & length(time_Warm_steps151) != expectedRuns){
	result_object_RH1_steps151 = 2
	result_RH1_steps151 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps151) != expectedRuns & length(time_Warm_steps151) == expectedRuns){
	result_object_RH1_steps151 = 3
	result_RH1_steps151 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.8: Object 197 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps197, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps197 = subset(json_data, treatment == 'Hylaa' & object == 'steps197' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps197)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time)
 
 if(length(time_Hylaa_steps197) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps197'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps197')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time))
 
 	shap_Hylaa_steps197 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time)
 	print(shap_Hylaa_steps197)
 	if(shap_Hylaa_steps197$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps197$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps197$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps197, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps197 = subset(json_data, treatment == 'Warm' & object == 'steps197' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps197)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps197')$time)
 
 if(length(time_Warm_steps197) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps197'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps197')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps197')$time))
 
 	shap_Warm_steps197 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps197')$time)
 	print(shap_Warm_steps197)
 	if(shap_Warm_steps197$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps197$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps197$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps197, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps197')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps197 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 197 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps197
 if(length(time_Hylaa_steps197) == expectedRuns & length(time_Warm_steps197) == expectedRuns){
 	result_RH1_steps197_tTest = FALSE
 	result_RH1_steps197_wTest = FALSE
 	
 	if(shap_Hylaa_steps197$p.value > alpha&shap_Warm_steps197$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time, subset(json_data,treatment == 'Warm' & object == 'steps197')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time, subset(json_data, treatment == 'Warm' & object == 'steps197')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps197_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps197')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps197_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps197_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps197) == expectedRuns & length(time_Warm_steps197) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps197')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps197')$time))))
	 if (result_RH1_steps197_tTest | result_RH1_steps197_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps197')$time)){
	   	result_RH1_steps197 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps197 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps197 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps197 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps197 = 5
	 	result_RH1_steps197 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps197')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps197')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps197')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps197')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps197')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps197) != expectedRuns & length(time_Warm_steps197) != expectedRuns){
 	result_object_RH1_steps197 = 4
	result_RH1_steps197 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps197) == expectedRuns & length(time_Warm_steps197) != expectedRuns){
	result_object_RH1_steps197 = 2
	result_RH1_steps197 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps197) != expectedRuns & length(time_Warm_steps197) == expectedRuns){
	result_object_RH1_steps197 = 3
	result_RH1_steps197 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.9: Object 256 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps256, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps256 = subset(json_data, treatment == 'Hylaa' & object == 'steps256' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps256)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time)
 
 if(length(time_Hylaa_steps256) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps256'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps256')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time))
 
 	shap_Hylaa_steps256 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time)
 	print(shap_Hylaa_steps256)
 	if(shap_Hylaa_steps256$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps256$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps256$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps256, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps256 = subset(json_data, treatment == 'Warm' & object == 'steps256' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps256)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps256')$time)
 
 if(length(time_Warm_steps256) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps256'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps256')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps256')$time))
 
 	shap_Warm_steps256 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps256')$time)
 	print(shap_Warm_steps256)
 	if(shap_Warm_steps256$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps256$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps256$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps256, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps256')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps256 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 256 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps256
 if(length(time_Hylaa_steps256) == expectedRuns & length(time_Warm_steps256) == expectedRuns){
 	result_RH1_steps256_tTest = FALSE
 	result_RH1_steps256_wTest = FALSE
 	
 	if(shap_Hylaa_steps256$p.value > alpha&shap_Warm_steps256$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time, subset(json_data,treatment == 'Warm' & object == 'steps256')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time, subset(json_data, treatment == 'Warm' & object == 'steps256')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps256_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps256')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps256_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps256_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps256) == expectedRuns & length(time_Warm_steps256) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps256')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps256')$time))))
	 if (result_RH1_steps256_tTest | result_RH1_steps256_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps256')$time)){
	   	result_RH1_steps256 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps256 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps256 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps256 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps256 = 5
	 	result_RH1_steps256 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps256')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps256')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps256')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps256')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps256')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps256) != expectedRuns & length(time_Warm_steps256) != expectedRuns){
 	result_object_RH1_steps256 = 4
	result_RH1_steps256 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps256) == expectedRuns & length(time_Warm_steps256) != expectedRuns){
	result_object_RH1_steps256 = 2
	result_RH1_steps256 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps256) != expectedRuns & length(time_Warm_steps256) == expectedRuns){
	result_object_RH1_steps256 = 3
	result_RH1_steps256 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.10: Object 332 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps332, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps332 = subset(json_data, treatment == 'Hylaa' & object == 'steps332' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps332)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time)
 
 if(length(time_Hylaa_steps332) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps332'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps332')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time))
 
 	shap_Hylaa_steps332 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time)
 	print(shap_Hylaa_steps332)
 	if(shap_Hylaa_steps332$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps332$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps332$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps332, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps332 = subset(json_data, treatment == 'Warm' & object == 'steps332' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps332)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps332')$time)
 
 if(length(time_Warm_steps332) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps332'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps332')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps332')$time))
 
 	shap_Warm_steps332 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps332')$time)
 	print(shap_Warm_steps332)
 	if(shap_Warm_steps332$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps332$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps332$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps332, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps332')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps332 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 332 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps332
 if(length(time_Hylaa_steps332) == expectedRuns & length(time_Warm_steps332) == expectedRuns){
 	result_RH1_steps332_tTest = FALSE
 	result_RH1_steps332_wTest = FALSE
 	
 	if(shap_Hylaa_steps332$p.value > alpha&shap_Warm_steps332$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time, subset(json_data,treatment == 'Warm' & object == 'steps332')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time, subset(json_data, treatment == 'Warm' & object == 'steps332')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps332_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps332')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps332_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps332_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps332) == expectedRuns & length(time_Warm_steps332) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps332')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps332')$time))))
	 if (result_RH1_steps332_tTest | result_RH1_steps332_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps332')$time)){
	   	result_RH1_steps332 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps332 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps332 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps332 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps332 = 5
	 	result_RH1_steps332 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps332')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps332')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps332')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps332')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps332')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps332) != expectedRuns & length(time_Warm_steps332) != expectedRuns){
 	result_object_RH1_steps332 = 4
	result_RH1_steps332 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps332) == expectedRuns & length(time_Warm_steps332) != expectedRuns){
	result_object_RH1_steps332 = 2
	result_RH1_steps332 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps332) != expectedRuns & length(time_Warm_steps332) == expectedRuns){
	result_object_RH1_steps332 = 3
	result_RH1_steps332 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.11: Object 432 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps432, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps432 = subset(json_data, treatment == 'Hylaa' & object == 'steps432' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps432)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time)
 
 if(length(time_Hylaa_steps432) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps432'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps432')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time))
 
 	shap_Hylaa_steps432 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time)
 	print(shap_Hylaa_steps432)
 	if(shap_Hylaa_steps432$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps432$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps432$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps432, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps432 = subset(json_data, treatment == 'Warm' & object == 'steps432' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps432)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps432')$time)
 
 if(length(time_Warm_steps432) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps432'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps432')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps432')$time))
 
 	shap_Warm_steps432 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps432')$time)
 	print(shap_Warm_steps432)
 	if(shap_Warm_steps432$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps432$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps432$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps432, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps432')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps432 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 432 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps432
 if(length(time_Hylaa_steps432) == expectedRuns & length(time_Warm_steps432) == expectedRuns){
 	result_RH1_steps432_tTest = FALSE
 	result_RH1_steps432_wTest = FALSE
 	
 	if(shap_Hylaa_steps432$p.value > alpha&shap_Warm_steps432$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time, subset(json_data,treatment == 'Warm' & object == 'steps432')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time, subset(json_data, treatment == 'Warm' & object == 'steps432')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps432_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps432')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps432_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps432_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps432) == expectedRuns & length(time_Warm_steps432) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps432')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps432')$time))))
	 if (result_RH1_steps432_tTest | result_RH1_steps432_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps432')$time)){
	   	result_RH1_steps432 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps432 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps432 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps432 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps432 = 5
	 	result_RH1_steps432 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps432')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps432')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps432')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps432')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps432')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps432) != expectedRuns & length(time_Warm_steps432) != expectedRuns){
 	result_object_RH1_steps432 = 4
	result_RH1_steps432 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps432) == expectedRuns & length(time_Warm_steps432) != expectedRuns){
	result_object_RH1_steps432 = 2
	result_RH1_steps432 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps432) != expectedRuns & length(time_Warm_steps432) == expectedRuns){
	result_object_RH1_steps432 = 3
	result_RH1_steps432 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.12: Object 562 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps562, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps562 = subset(json_data, treatment == 'Hylaa' & object == 'steps562' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps562)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time)
 
 if(length(time_Hylaa_steps562) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps562'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps562')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time))
 
 	shap_Hylaa_steps562 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time)
 	print(shap_Hylaa_steps562)
 	if(shap_Hylaa_steps562$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps562$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps562$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps562, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps562 = subset(json_data, treatment == 'Warm' & object == 'steps562' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps562)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps562')$time)
 
 if(length(time_Warm_steps562) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps562'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps562')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps562')$time))
 
 	shap_Warm_steps562 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps562')$time)
 	print(shap_Warm_steps562)
 	if(shap_Warm_steps562$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps562$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps562$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps562, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps562')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps562 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 562 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps562
 if(length(time_Hylaa_steps562) == expectedRuns & length(time_Warm_steps562) == expectedRuns){
 	result_RH1_steps562_tTest = FALSE
 	result_RH1_steps562_wTest = FALSE
 	
 	if(shap_Hylaa_steps562$p.value > alpha&shap_Warm_steps562$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time, subset(json_data,treatment == 'Warm' & object == 'steps562')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time, subset(json_data, treatment == 'Warm' & object == 'steps562')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps562_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps562')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps562_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps562_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps562) == expectedRuns & length(time_Warm_steps562) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps562')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps562')$time))))
	 if (result_RH1_steps562_tTest | result_RH1_steps562_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps562')$time)){
	   	result_RH1_steps562 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps562 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps562 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps562 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps562 = 5
	 	result_RH1_steps562 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps562')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps562')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps562')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps562')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps562')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps562) != expectedRuns & length(time_Warm_steps562) != expectedRuns){
 	result_object_RH1_steps562 = 4
	result_RH1_steps562 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps562) == expectedRuns & length(time_Warm_steps562) != expectedRuns){
	result_object_RH1_steps562 = 2
	result_RH1_steps562 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps562) != expectedRuns & length(time_Warm_steps562) == expectedRuns){
	result_object_RH1_steps562 = 3
	result_RH1_steps562 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.13: Object 731 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps731, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps731 = subset(json_data, treatment == 'Hylaa' & object == 'steps731' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps731)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time)
 
 if(length(time_Hylaa_steps731) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps731'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps731')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time))
 
 	shap_Hylaa_steps731 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time)
 	print(shap_Hylaa_steps731)
 	if(shap_Hylaa_steps731$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps731$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps731$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps731, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps731 = subset(json_data, treatment == 'Warm' & object == 'steps731' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps731)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps731')$time)
 
 if(length(time_Warm_steps731) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps731'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps731')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps731')$time))
 
 	shap_Warm_steps731 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps731')$time)
 	print(shap_Warm_steps731)
 	if(shap_Warm_steps731$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps731$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps731$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps731, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps731')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps731 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 731 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps731
 if(length(time_Hylaa_steps731) == expectedRuns & length(time_Warm_steps731) == expectedRuns){
 	result_RH1_steps731_tTest = FALSE
 	result_RH1_steps731_wTest = FALSE
 	
 	if(shap_Hylaa_steps731$p.value > alpha&shap_Warm_steps731$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time, subset(json_data,treatment == 'Warm' & object == 'steps731')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time, subset(json_data, treatment == 'Warm' & object == 'steps731')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps731_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps731')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps731_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps731_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps731) == expectedRuns & length(time_Warm_steps731) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps731')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps731')$time))))
	 if (result_RH1_steps731_tTest | result_RH1_steps731_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps731')$time)){
	   	result_RH1_steps731 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps731 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps731 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps731 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps731 = 5
	 	result_RH1_steps731 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps731')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps731')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps731')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps731')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps731')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps731) != expectedRuns & length(time_Warm_steps731) != expectedRuns){
 	result_object_RH1_steps731 = 4
	result_RH1_steps731 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps731) == expectedRuns & length(time_Warm_steps731) != expectedRuns){
	result_object_RH1_steps731 = 2
	result_RH1_steps731 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps731) != expectedRuns & length(time_Warm_steps731) == expectedRuns){
	result_object_RH1_steps731 = 3
	result_RH1_steps731 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.14: Object 951 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps951, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps951 = subset(json_data, treatment == 'Hylaa' & object == 'steps951' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps951)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time)
 
 if(length(time_Hylaa_steps951) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps951'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps951')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time))
 
 	shap_Hylaa_steps951 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time)
 	print(shap_Hylaa_steps951)
 	if(shap_Hylaa_steps951$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps951$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps951$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps951, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps951 = subset(json_data, treatment == 'Warm' & object == 'steps951' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps951)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps951')$time)
 
 if(length(time_Warm_steps951) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps951'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps951')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps951')$time))
 
 	shap_Warm_steps951 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps951')$time)
 	print(shap_Warm_steps951)
 	if(shap_Warm_steps951$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps951$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps951$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps951, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps951')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps951 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 951 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps951
 if(length(time_Hylaa_steps951) == expectedRuns & length(time_Warm_steps951) == expectedRuns){
 	result_RH1_steps951_tTest = FALSE
 	result_RH1_steps951_wTest = FALSE
 	
 	if(shap_Hylaa_steps951$p.value > alpha&shap_Warm_steps951$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time, subset(json_data,treatment == 'Warm' & object == 'steps951')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time, subset(json_data, treatment == 'Warm' & object == 'steps951')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps951_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps951')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps951_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps951_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps951) == expectedRuns & length(time_Warm_steps951) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps951')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps951')$time))))
	 if (result_RH1_steps951_tTest | result_RH1_steps951_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps951')$time)){
	   	result_RH1_steps951 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps951 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps951 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps951 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps951 = 5
	 	result_RH1_steps951 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps951')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps951')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps951')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps951')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps951')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps951) != expectedRuns & length(time_Warm_steps951) != expectedRuns){
 	result_object_RH1_steps951 = 4
	result_RH1_steps951 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps951) == expectedRuns & length(time_Warm_steps951) != expectedRuns){
	result_object_RH1_steps951 = 2
	result_RH1_steps951 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps951) != expectedRuns & length(time_Warm_steps951) == expectedRuns){
	result_object_RH1_steps951 = 3
	result_RH1_steps951 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.15: Object 1236 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps1236, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps1236 = subset(json_data, treatment == 'Hylaa' & object == 'steps1236' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps1236)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time)
 
 if(length(time_Hylaa_steps1236) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps1236'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps1236')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time))
 
 	shap_Hylaa_steps1236 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time)
 	print(shap_Hylaa_steps1236)
 	if(shap_Hylaa_steps1236$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps1236$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps1236$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps1236, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps1236 = subset(json_data, treatment == 'Warm' & object == 'steps1236' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps1236)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps1236')$time)
 
 if(length(time_Warm_steps1236) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps1236'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps1236')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps1236')$time))
 
 	shap_Warm_steps1236 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps1236')$time)
 	print(shap_Warm_steps1236)
 	if(shap_Warm_steps1236$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps1236$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps1236$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps1236, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps1236')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps1236 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 1236 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps1236
 if(length(time_Hylaa_steps1236) == expectedRuns & length(time_Warm_steps1236) == expectedRuns){
 	result_RH1_steps1236_tTest = FALSE
 	result_RH1_steps1236_wTest = FALSE
 	
 	if(shap_Hylaa_steps1236$p.value > alpha&shap_Warm_steps1236$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time, subset(json_data,treatment == 'Warm' & object == 'steps1236')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time, subset(json_data, treatment == 'Warm' & object == 'steps1236')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps1236_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps1236')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps1236_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps1236_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps1236) == expectedRuns & length(time_Warm_steps1236) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps1236')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps1236')$time))))
	 if (result_RH1_steps1236_tTest | result_RH1_steps1236_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps1236')$time)){
	   	result_RH1_steps1236 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps1236 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps1236 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps1236 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps1236 = 5
	 	result_RH1_steps1236 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps1236')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps1236')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps1236')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps1236')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps1236')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps1236) != expectedRuns & length(time_Warm_steps1236) != expectedRuns){
 	result_object_RH1_steps1236 = 4
	result_RH1_steps1236 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps1236) == expectedRuns & length(time_Warm_steps1236) != expectedRuns){
	result_object_RH1_steps1236 = 2
	result_RH1_steps1236 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps1236) != expectedRuns & length(time_Warm_steps1236) == expectedRuns){
	result_object_RH1_steps1236 = 3
	result_RH1_steps1236 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.16: Object 1607 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps1607, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps1607 = subset(json_data, treatment == 'Hylaa' & object == 'steps1607' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps1607)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time)
 
 if(length(time_Hylaa_steps1607) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps1607'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps1607')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time))
 
 	shap_Hylaa_steps1607 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time)
 	print(shap_Hylaa_steps1607)
 	if(shap_Hylaa_steps1607$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps1607$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps1607$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps1607, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps1607 = subset(json_data, treatment == 'Warm' & object == 'steps1607' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps1607)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps1607')$time)
 
 if(length(time_Warm_steps1607) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps1607'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps1607')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps1607')$time))
 
 	shap_Warm_steps1607 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps1607')$time)
 	print(shap_Warm_steps1607)
 	if(shap_Warm_steps1607$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps1607$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps1607$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps1607, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps1607')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps1607 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 1607 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps1607
 if(length(time_Hylaa_steps1607) == expectedRuns & length(time_Warm_steps1607) == expectedRuns){
 	result_RH1_steps1607_tTest = FALSE
 	result_RH1_steps1607_wTest = FALSE
 	
 	if(shap_Hylaa_steps1607$p.value > alpha&shap_Warm_steps1607$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time, subset(json_data,treatment == 'Warm' & object == 'steps1607')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time, subset(json_data, treatment == 'Warm' & object == 'steps1607')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps1607_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps1607')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps1607_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps1607_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps1607) == expectedRuns & length(time_Warm_steps1607) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps1607')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps1607')$time))))
	 if (result_RH1_steps1607_tTest | result_RH1_steps1607_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps1607')$time)){
	   	result_RH1_steps1607 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps1607 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps1607 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps1607 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps1607 = 5
	 	result_RH1_steps1607 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps1607')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps1607')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps1607')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps1607')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps1607')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps1607) != expectedRuns & length(time_Warm_steps1607) != expectedRuns){
 	result_object_RH1_steps1607 = 4
	result_RH1_steps1607 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps1607) == expectedRuns & length(time_Warm_steps1607) != expectedRuns){
	result_object_RH1_steps1607 = 2
	result_RH1_steps1607 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps1607) != expectedRuns & length(time_Warm_steps1607) == expectedRuns){
	result_object_RH1_steps1607 = 3
	result_RH1_steps1607 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.17: Object 2089 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps2089, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps2089 = subset(json_data, treatment == 'Hylaa' & object == 'steps2089' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps2089)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time)
 
 if(length(time_Hylaa_steps2089) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps2089'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps2089')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time))
 
 	shap_Hylaa_steps2089 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time)
 	print(shap_Hylaa_steps2089)
 	if(shap_Hylaa_steps2089$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps2089$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps2089$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps2089, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps2089 = subset(json_data, treatment == 'Warm' & object == 'steps2089' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps2089)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps2089')$time)
 
 if(length(time_Warm_steps2089) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps2089'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps2089')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps2089')$time))
 
 	shap_Warm_steps2089 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps2089')$time)
 	print(shap_Warm_steps2089)
 	if(shap_Warm_steps2089$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps2089$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps2089$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps2089, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps2089')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps2089 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 2089 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps2089
 if(length(time_Hylaa_steps2089) == expectedRuns & length(time_Warm_steps2089) == expectedRuns){
 	result_RH1_steps2089_tTest = FALSE
 	result_RH1_steps2089_wTest = FALSE
 	
 	if(shap_Hylaa_steps2089$p.value > alpha&shap_Warm_steps2089$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time, subset(json_data,treatment == 'Warm' & object == 'steps2089')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time, subset(json_data, treatment == 'Warm' & object == 'steps2089')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps2089_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps2089')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps2089_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps2089_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps2089) == expectedRuns & length(time_Warm_steps2089) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps2089')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps2089')$time))))
	 if (result_RH1_steps2089_tTest | result_RH1_steps2089_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps2089')$time)){
	   	result_RH1_steps2089 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps2089 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps2089 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps2089 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps2089 = 5
	 	result_RH1_steps2089 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps2089')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps2089')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps2089')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps2089')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps2089')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps2089) != expectedRuns & length(time_Warm_steps2089) != expectedRuns){
 	result_object_RH1_steps2089 = 4
	result_RH1_steps2089 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps2089) == expectedRuns & length(time_Warm_steps2089) != expectedRuns){
	result_object_RH1_steps2089 = 2
	result_RH1_steps2089 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps2089) != expectedRuns & length(time_Warm_steps2089) == expectedRuns){
	result_object_RH1_steps2089 = 3
	result_RH1_steps2089 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.18: Object 2716 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps2716, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps2716 = subset(json_data, treatment == 'Hylaa' & object == 'steps2716' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps2716)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time)
 
 if(length(time_Hylaa_steps2716) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps2716'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps2716')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time))
 
 	shap_Hylaa_steps2716 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time)
 	print(shap_Hylaa_steps2716)
 	if(shap_Hylaa_steps2716$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps2716$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps2716$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps2716, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps2716 = subset(json_data, treatment == 'Warm' & object == 'steps2716' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps2716)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps2716')$time)
 
 if(length(time_Warm_steps2716) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps2716'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps2716')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps2716')$time))
 
 	shap_Warm_steps2716 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps2716')$time)
 	print(shap_Warm_steps2716)
 	if(shap_Warm_steps2716$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps2716$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps2716$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps2716, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps2716')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps2716 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 2716 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps2716
 if(length(time_Hylaa_steps2716) == expectedRuns & length(time_Warm_steps2716) == expectedRuns){
 	result_RH1_steps2716_tTest = FALSE
 	result_RH1_steps2716_wTest = FALSE
 	
 	if(shap_Hylaa_steps2716$p.value > alpha&shap_Warm_steps2716$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time, subset(json_data,treatment == 'Warm' & object == 'steps2716')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time, subset(json_data, treatment == 'Warm' & object == 'steps2716')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps2716_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps2716')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps2716_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps2716_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps2716) == expectedRuns & length(time_Warm_steps2716) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps2716')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps2716')$time))))
	 if (result_RH1_steps2716_tTest | result_RH1_steps2716_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps2716')$time)){
	   	result_RH1_steps2716 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps2716 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps2716 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps2716 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps2716 = 5
	 	result_RH1_steps2716 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps2716')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps2716')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps2716')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps2716')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps2716')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps2716) != expectedRuns & length(time_Warm_steps2716) != expectedRuns){
 	result_object_RH1_steps2716 = 4
	result_RH1_steps2716 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps2716) == expectedRuns & length(time_Warm_steps2716) != expectedRuns){
	result_object_RH1_steps2716 = 2
	result_RH1_steps2716 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps2716) != expectedRuns & length(time_Warm_steps2716) == expectedRuns){
	result_object_RH1_steps2716 = 3
	result_RH1_steps2716 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.19: Object 3531 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps3531, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps3531 = subset(json_data, treatment == 'Hylaa' & object == 'steps3531' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps3531)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time)
 
 if(length(time_Hylaa_steps3531) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps3531'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps3531')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time))
 
 	shap_Hylaa_steps3531 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time)
 	print(shap_Hylaa_steps3531)
 	if(shap_Hylaa_steps3531$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps3531$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps3531$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps3531, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps3531 = subset(json_data, treatment == 'Warm' & object == 'steps3531' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps3531)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps3531')$time)
 
 if(length(time_Warm_steps3531) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps3531'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps3531')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps3531')$time))
 
 	shap_Warm_steps3531 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps3531')$time)
 	print(shap_Warm_steps3531)
 	if(shap_Warm_steps3531$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps3531$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps3531$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps3531, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps3531')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps3531 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 3531 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps3531
 if(length(time_Hylaa_steps3531) == expectedRuns & length(time_Warm_steps3531) == expectedRuns){
 	result_RH1_steps3531_tTest = FALSE
 	result_RH1_steps3531_wTest = FALSE
 	
 	if(shap_Hylaa_steps3531$p.value > alpha&shap_Warm_steps3531$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time, subset(json_data,treatment == 'Warm' & object == 'steps3531')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time, subset(json_data, treatment == 'Warm' & object == 'steps3531')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps3531_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps3531')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps3531_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps3531_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps3531) == expectedRuns & length(time_Warm_steps3531) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps3531')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps3531')$time))))
	 if (result_RH1_steps3531_tTest | result_RH1_steps3531_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps3531')$time)){
	   	result_RH1_steps3531 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps3531 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps3531 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps3531 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps3531 = 5
	 	result_RH1_steps3531 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps3531')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps3531')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps3531')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps3531')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps3531')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps3531) != expectedRuns & length(time_Warm_steps3531) != expectedRuns){
 	result_object_RH1_steps3531 = 4
	result_RH1_steps3531 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps3531) == expectedRuns & length(time_Warm_steps3531) != expectedRuns){
	result_object_RH1_steps3531 = 2
	result_RH1_steps3531 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps3531) != expectedRuns & length(time_Warm_steps3531) == expectedRuns){
	result_object_RH1_steps3531 = 3
	result_RH1_steps3531 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.20: Object 4590 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps4590, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps4590 = subset(json_data, treatment == 'Hylaa' & object == 'steps4590' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps4590)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time)
 
 if(length(time_Hylaa_steps4590) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps4590'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps4590')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time))
 
 	shap_Hylaa_steps4590 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time)
 	print(shap_Hylaa_steps4590)
 	if(shap_Hylaa_steps4590$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps4590$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps4590$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps4590, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps4590 = subset(json_data, treatment == 'Warm' & object == 'steps4590' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps4590)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps4590')$time)
 
 if(length(time_Warm_steps4590) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps4590'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps4590')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps4590')$time))
 
 	shap_Warm_steps4590 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps4590')$time)
 	print(shap_Warm_steps4590)
 	if(shap_Warm_steps4590$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps4590$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps4590$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps4590, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps4590')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps4590 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 4590 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps4590
 if(length(time_Hylaa_steps4590) == expectedRuns & length(time_Warm_steps4590) == expectedRuns){
 	result_RH1_steps4590_tTest = FALSE
 	result_RH1_steps4590_wTest = FALSE
 	
 	if(shap_Hylaa_steps4590$p.value > alpha&shap_Warm_steps4590$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time, subset(json_data,treatment == 'Warm' & object == 'steps4590')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time, subset(json_data, treatment == 'Warm' & object == 'steps4590')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps4590_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps4590')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps4590_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps4590_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps4590) == expectedRuns & length(time_Warm_steps4590) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps4590')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps4590')$time))))
	 if (result_RH1_steps4590_tTest | result_RH1_steps4590_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps4590')$time)){
	   	result_RH1_steps4590 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps4590 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps4590 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps4590 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps4590 = 5
	 	result_RH1_steps4590 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps4590')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps4590')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps4590')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps4590')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps4590')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps4590) != expectedRuns & length(time_Warm_steps4590) != expectedRuns){
 	result_object_RH1_steps4590 = 4
	result_RH1_steps4590 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps4590) == expectedRuns & length(time_Warm_steps4590) != expectedRuns){
	result_object_RH1_steps4590 = 2
	result_RH1_steps4590 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps4590) != expectedRuns & length(time_Warm_steps4590) == expectedRuns){
	result_object_RH1_steps4590 = 3
	result_RH1_steps4590 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.21: Object 5967 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps5967, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps5967 = subset(json_data, treatment == 'Hylaa' & object == 'steps5967' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps5967)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time)
 
 if(length(time_Hylaa_steps5967) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps5967'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps5967')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time))
 
 	shap_Hylaa_steps5967 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time)
 	print(shap_Hylaa_steps5967)
 	if(shap_Hylaa_steps5967$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps5967$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps5967$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps5967, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps5967 = subset(json_data, treatment == 'Warm' & object == 'steps5967' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps5967)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps5967')$time)
 
 if(length(time_Warm_steps5967) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps5967'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps5967')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps5967')$time))
 
 	shap_Warm_steps5967 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps5967')$time)
 	print(shap_Warm_steps5967)
 	if(shap_Warm_steps5967$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps5967$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps5967$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps5967, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps5967')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps5967 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 5967 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps5967
 if(length(time_Hylaa_steps5967) == expectedRuns & length(time_Warm_steps5967) == expectedRuns){
 	result_RH1_steps5967_tTest = FALSE
 	result_RH1_steps5967_wTest = FALSE
 	
 	if(shap_Hylaa_steps5967$p.value > alpha&shap_Warm_steps5967$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time, subset(json_data,treatment == 'Warm' & object == 'steps5967')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time, subset(json_data, treatment == 'Warm' & object == 'steps5967')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps5967_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps5967')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps5967_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps5967_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps5967) == expectedRuns & length(time_Warm_steps5967) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps5967')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps5967')$time))))
	 if (result_RH1_steps5967_tTest | result_RH1_steps5967_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps5967')$time)){
	   	result_RH1_steps5967 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps5967 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps5967 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps5967 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps5967 = 5
	 	result_RH1_steps5967 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps5967')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps5967')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps5967')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps5967')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps5967')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps5967) != expectedRuns & length(time_Warm_steps5967) != expectedRuns){
 	result_object_RH1_steps5967 = 4
	result_RH1_steps5967 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps5967) == expectedRuns & length(time_Warm_steps5967) != expectedRuns){
	result_object_RH1_steps5967 = 2
	result_RH1_steps5967 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps5967) != expectedRuns & length(time_Warm_steps5967) == expectedRuns){
	result_object_RH1_steps5967 = 3
	result_RH1_steps5967 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.22: Object 7757 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps7757, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps7757 = subset(json_data, treatment == 'Hylaa' & object == 'steps7757' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps7757)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time)
 
 if(length(time_Hylaa_steps7757) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps7757'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps7757')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time))
 
 	shap_Hylaa_steps7757 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time)
 	print(shap_Hylaa_steps7757)
 	if(shap_Hylaa_steps7757$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps7757$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps7757$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps7757, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps7757 = subset(json_data, treatment == 'Warm' & object == 'steps7757' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps7757)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps7757')$time)
 
 if(length(time_Warm_steps7757) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps7757'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps7757')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps7757')$time))
 
 	shap_Warm_steps7757 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps7757')$time)
 	print(shap_Warm_steps7757)
 	if(shap_Warm_steps7757$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps7757$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps7757$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps7757, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps7757')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps7757 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 7757 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps7757
 if(length(time_Hylaa_steps7757) == expectedRuns & length(time_Warm_steps7757) == expectedRuns){
 	result_RH1_steps7757_tTest = FALSE
 	result_RH1_steps7757_wTest = FALSE
 	
 	if(shap_Hylaa_steps7757$p.value > alpha&shap_Warm_steps7757$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time, subset(json_data,treatment == 'Warm' & object == 'steps7757')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time, subset(json_data, treatment == 'Warm' & object == 'steps7757')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps7757_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps7757')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps7757_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps7757_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps7757) == expectedRuns & length(time_Warm_steps7757) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps7757')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps7757')$time))))
	 if (result_RH1_steps7757_tTest | result_RH1_steps7757_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps7757')$time)){
	   	result_RH1_steps7757 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps7757 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps7757 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps7757 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps7757 = 5
	 	result_RH1_steps7757 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps7757')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps7757')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps7757')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps7757')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps7757')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps7757) != expectedRuns & length(time_Warm_steps7757) != expectedRuns){
 	result_object_RH1_steps7757 = 4
	result_RH1_steps7757 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps7757) == expectedRuns & length(time_Warm_steps7757) != expectedRuns){
	result_object_RH1_steps7757 = 2
	result_RH1_steps7757 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps7757) != expectedRuns & length(time_Warm_steps7757) == expectedRuns){
	result_object_RH1_steps7757 = 3
	result_RH1_steps7757 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.23: Object 10085 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps10085, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps10085 = subset(json_data, treatment == 'Hylaa' & object == 'steps10085' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps10085)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time)
 
 if(length(time_Hylaa_steps10085) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps10085'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps10085')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time))
 
 	shap_Hylaa_steps10085 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time)
 	print(shap_Hylaa_steps10085)
 	if(shap_Hylaa_steps10085$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps10085$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps10085$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps10085, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps10085 = subset(json_data, treatment == 'Warm' & object == 'steps10085' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps10085)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps10085')$time)
 
 if(length(time_Warm_steps10085) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps10085'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps10085')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps10085')$time))
 
 	shap_Warm_steps10085 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps10085')$time)
 	print(shap_Warm_steps10085)
 	if(shap_Warm_steps10085$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps10085$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps10085$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps10085, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps10085')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps10085 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 10085 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps10085
 if(length(time_Hylaa_steps10085) == expectedRuns & length(time_Warm_steps10085) == expectedRuns){
 	result_RH1_steps10085_tTest = FALSE
 	result_RH1_steps10085_wTest = FALSE
 	
 	if(shap_Hylaa_steps10085$p.value > alpha&shap_Warm_steps10085$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time, subset(json_data,treatment == 'Warm' & object == 'steps10085')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time, subset(json_data, treatment == 'Warm' & object == 'steps10085')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps10085_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps10085')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps10085_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps10085_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps10085) == expectedRuns & length(time_Warm_steps10085) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps10085')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps10085')$time))))
	 if (result_RH1_steps10085_tTest | result_RH1_steps10085_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps10085')$time)){
	   	result_RH1_steps10085 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps10085 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps10085 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps10085 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps10085 = 5
	 	result_RH1_steps10085 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps10085')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps10085')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps10085')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps10085')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps10085')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps10085) != expectedRuns & length(time_Warm_steps10085) != expectedRuns){
 	result_object_RH1_steps10085 = 4
	result_RH1_steps10085 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps10085) == expectedRuns & length(time_Warm_steps10085) != expectedRuns){
	result_object_RH1_steps10085 = 2
	result_RH1_steps10085 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps10085) != expectedRuns & length(time_Warm_steps10085) == expectedRuns){
	result_object_RH1_steps10085 = 3
	result_RH1_steps10085 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.24: Object 13110 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps13110, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps13110 = subset(json_data, treatment == 'Hylaa' & object == 'steps13110' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps13110)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time)
 
 if(length(time_Hylaa_steps13110) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps13110'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps13110')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time))
 
 	shap_Hylaa_steps13110 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time)
 	print(shap_Hylaa_steps13110)
 	if(shap_Hylaa_steps13110$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps13110$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps13110$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps13110, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps13110 = subset(json_data, treatment == 'Warm' & object == 'steps13110' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps13110)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps13110')$time)
 
 if(length(time_Warm_steps13110) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps13110'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps13110')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps13110')$time))
 
 	shap_Warm_steps13110 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps13110')$time)
 	print(shap_Warm_steps13110)
 	if(shap_Warm_steps13110$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps13110$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps13110$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps13110, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps13110')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps13110 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 13110 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps13110
 if(length(time_Hylaa_steps13110) == expectedRuns & length(time_Warm_steps13110) == expectedRuns){
 	result_RH1_steps13110_tTest = FALSE
 	result_RH1_steps13110_wTest = FALSE
 	
 	if(shap_Hylaa_steps13110$p.value > alpha&shap_Warm_steps13110$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time, subset(json_data,treatment == 'Warm' & object == 'steps13110')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time, subset(json_data, treatment == 'Warm' & object == 'steps13110')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps13110_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps13110')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps13110_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps13110_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps13110) == expectedRuns & length(time_Warm_steps13110) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps13110')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps13110')$time))))
	 if (result_RH1_steps13110_tTest | result_RH1_steps13110_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps13110')$time)){
	   	result_RH1_steps13110 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps13110 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps13110 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps13110 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps13110 = 5
	 	result_RH1_steps13110 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps13110')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps13110')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps13110')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps13110')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps13110')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps13110) != expectedRuns & length(time_Warm_steps13110) != expectedRuns){
 	result_object_RH1_steps13110 = 4
	result_RH1_steps13110 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps13110) == expectedRuns & length(time_Warm_steps13110) != expectedRuns){
	result_object_RH1_steps13110 = 2
	result_RH1_steps13110 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps13110) != expectedRuns & length(time_Warm_steps13110) == expectedRuns){
	result_object_RH1_steps13110 = 3
	result_RH1_steps13110 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.25: Object 17043 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps17043, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps17043 = subset(json_data, treatment == 'Hylaa' & object == 'steps17043' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps17043)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time)
 
 if(length(time_Hylaa_steps17043) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps17043'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps17043')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time))
 
 	shap_Hylaa_steps17043 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time)
 	print(shap_Hylaa_steps17043)
 	if(shap_Hylaa_steps17043$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps17043$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps17043$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps17043, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps17043 = subset(json_data, treatment == 'Warm' & object == 'steps17043' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps17043)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps17043')$time)
 
 if(length(time_Warm_steps17043) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps17043'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps17043')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps17043')$time))
 
 	shap_Warm_steps17043 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps17043')$time)
 	print(shap_Warm_steps17043)
 	if(shap_Warm_steps17043$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps17043$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps17043$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps17043, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps17043')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps17043 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 17043 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps17043
 if(length(time_Hylaa_steps17043) == expectedRuns & length(time_Warm_steps17043) == expectedRuns){
 	result_RH1_steps17043_tTest = FALSE
 	result_RH1_steps17043_wTest = FALSE
 	
 	if(shap_Hylaa_steps17043$p.value > alpha&shap_Warm_steps17043$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time, subset(json_data,treatment == 'Warm' & object == 'steps17043')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time, subset(json_data, treatment == 'Warm' & object == 'steps17043')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps17043_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps17043')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps17043_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps17043_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps17043) == expectedRuns & length(time_Warm_steps17043) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps17043')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps17043')$time))))
	 if (result_RH1_steps17043_tTest | result_RH1_steps17043_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps17043')$time)){
	   	result_RH1_steps17043 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps17043 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps17043 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps17043 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps17043 = 5
	 	result_RH1_steps17043 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps17043')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps17043')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps17043')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps17043')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps17043')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps17043) != expectedRuns & length(time_Warm_steps17043) != expectedRuns){
 	result_object_RH1_steps17043 = 4
	result_RH1_steps17043 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps17043) == expectedRuns & length(time_Warm_steps17043) != expectedRuns){
	result_object_RH1_steps17043 = 2
	result_RH1_steps17043 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps17043) != expectedRuns & length(time_Warm_steps17043) == expectedRuns){
	result_object_RH1_steps17043 = 3
	result_RH1_steps17043 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.26: Object 22157 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps22157, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps22157 = subset(json_data, treatment == 'Hylaa' & object == 'steps22157' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps22157)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time)
 
 if(length(time_Hylaa_steps22157) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps22157'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps22157')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time))
 
 	shap_Hylaa_steps22157 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time)
 	print(shap_Hylaa_steps22157)
 	if(shap_Hylaa_steps22157$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps22157$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps22157$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps22157, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps22157 = subset(json_data, treatment == 'Warm' & object == 'steps22157' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps22157)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps22157')$time)
 
 if(length(time_Warm_steps22157) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps22157'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps22157')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps22157')$time))
 
 	shap_Warm_steps22157 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps22157')$time)
 	print(shap_Warm_steps22157)
 	if(shap_Warm_steps22157$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps22157$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps22157$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps22157, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps22157')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps22157 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 22157 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps22157
 if(length(time_Hylaa_steps22157) == expectedRuns & length(time_Warm_steps22157) == expectedRuns){
 	result_RH1_steps22157_tTest = FALSE
 	result_RH1_steps22157_wTest = FALSE
 	
 	if(shap_Hylaa_steps22157$p.value > alpha&shap_Warm_steps22157$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time, subset(json_data,treatment == 'Warm' & object == 'steps22157')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time, subset(json_data, treatment == 'Warm' & object == 'steps22157')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps22157_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps22157')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps22157_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps22157_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps22157) == expectedRuns & length(time_Warm_steps22157) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps22157')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps22157')$time))))
	 if (result_RH1_steps22157_tTest | result_RH1_steps22157_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps22157')$time)){
	   	result_RH1_steps22157 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps22157 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps22157 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps22157 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps22157 = 5
	 	result_RH1_steps22157 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps22157')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps22157')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps22157')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps22157')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps22157')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps22157) != expectedRuns & length(time_Warm_steps22157) != expectedRuns){
 	result_object_RH1_steps22157 = 4
	result_RH1_steps22157 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps22157) == expectedRuns & length(time_Warm_steps22157) != expectedRuns){
	result_object_RH1_steps22157 = 2
	result_RH1_steps22157 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps22157) != expectedRuns & length(time_Warm_steps22157) == expectedRuns){
	result_object_RH1_steps22157 = 3
	result_RH1_steps22157 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.27: Object 28804 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps28804, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps28804 = subset(json_data, treatment == 'Hylaa' & object == 'steps28804' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps28804)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time)
 
 if(length(time_Hylaa_steps28804) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps28804'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps28804')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time))
 
 	shap_Hylaa_steps28804 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time)
 	print(shap_Hylaa_steps28804)
 	if(shap_Hylaa_steps28804$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps28804$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps28804$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps28804, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps28804 = subset(json_data, treatment == 'Warm' & object == 'steps28804' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps28804)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps28804')$time)
 
 if(length(time_Warm_steps28804) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps28804'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps28804')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps28804')$time))
 
 	shap_Warm_steps28804 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps28804')$time)
 	print(shap_Warm_steps28804)
 	if(shap_Warm_steps28804$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps28804$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps28804$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps28804, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps28804')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps28804 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 28804 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps28804
 if(length(time_Hylaa_steps28804) == expectedRuns & length(time_Warm_steps28804) == expectedRuns){
 	result_RH1_steps28804_tTest = FALSE
 	result_RH1_steps28804_wTest = FALSE
 	
 	if(shap_Hylaa_steps28804$p.value > alpha&shap_Warm_steps28804$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time, subset(json_data,treatment == 'Warm' & object == 'steps28804')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time, subset(json_data, treatment == 'Warm' & object == 'steps28804')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps28804_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps28804')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps28804_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps28804_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps28804) == expectedRuns & length(time_Warm_steps28804) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps28804')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps28804')$time))))
	 if (result_RH1_steps28804_tTest | result_RH1_steps28804_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps28804')$time)){
	   	result_RH1_steps28804 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps28804 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps28804 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps28804 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps28804 = 5
	 	result_RH1_steps28804 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps28804')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps28804')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps28804')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps28804')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps28804')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps28804) != expectedRuns & length(time_Warm_steps28804) != expectedRuns){
 	result_object_RH1_steps28804 = 4
	result_RH1_steps28804 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps28804) == expectedRuns & length(time_Warm_steps28804) != expectedRuns){
	result_object_RH1_steps28804 = 2
	result_RH1_steps28804 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps28804) != expectedRuns & length(time_Warm_steps28804) == expectedRuns){
	result_object_RH1_steps28804 = 3
	result_RH1_steps28804 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.28: Object 37445 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps37445, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps37445 = subset(json_data, treatment == 'Hylaa' & object == 'steps37445' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps37445)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time)
 
 if(length(time_Hylaa_steps37445) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps37445'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps37445')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time))
 
 	shap_Hylaa_steps37445 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time)
 	print(shap_Hylaa_steps37445)
 	if(shap_Hylaa_steps37445$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps37445$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps37445$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps37445, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps37445 = subset(json_data, treatment == 'Warm' & object == 'steps37445' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps37445)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps37445')$time)
 
 if(length(time_Warm_steps37445) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps37445'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps37445')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps37445')$time))
 
 	shap_Warm_steps37445 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps37445')$time)
 	print(shap_Warm_steps37445)
 	if(shap_Warm_steps37445$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps37445$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps37445$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps37445, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps37445')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps37445 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 37445 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps37445
 if(length(time_Hylaa_steps37445) == expectedRuns & length(time_Warm_steps37445) == expectedRuns){
 	result_RH1_steps37445_tTest = FALSE
 	result_RH1_steps37445_wTest = FALSE
 	
 	if(shap_Hylaa_steps37445$p.value > alpha&shap_Warm_steps37445$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time, subset(json_data,treatment == 'Warm' & object == 'steps37445')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time, subset(json_data, treatment == 'Warm' & object == 'steps37445')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps37445_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps37445')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps37445_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps37445_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps37445) == expectedRuns & length(time_Warm_steps37445) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps37445')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps37445')$time))))
	 if (result_RH1_steps37445_tTest | result_RH1_steps37445_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps37445')$time)){
	   	result_RH1_steps37445 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps37445 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps37445 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps37445 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps37445 = 5
	 	result_RH1_steps37445 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps37445')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps37445')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps37445')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps37445')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps37445')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps37445) != expectedRuns & length(time_Warm_steps37445) != expectedRuns){
 	result_object_RH1_steps37445 = 4
	result_RH1_steps37445 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps37445) == expectedRuns & length(time_Warm_steps37445) != expectedRuns){
	result_object_RH1_steps37445 = 2
	result_RH1_steps37445 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps37445) != expectedRuns & length(time_Warm_steps37445) == expectedRuns){
	result_object_RH1_steps37445 = 3
	result_RH1_steps37445 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.29: Object 48679 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps48679, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps48679 = subset(json_data, treatment == 'Hylaa' & object == 'steps48679' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps48679)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time)
 
 if(length(time_Hylaa_steps48679) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps48679'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps48679')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time))
 
 	shap_Hylaa_steps48679 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time)
 	print(shap_Hylaa_steps48679)
 	if(shap_Hylaa_steps48679$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps48679$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps48679$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps48679, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps48679 = subset(json_data, treatment == 'Warm' & object == 'steps48679' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps48679)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps48679')$time)
 
 if(length(time_Warm_steps48679) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps48679'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps48679')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps48679')$time))
 
 	shap_Warm_steps48679 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps48679')$time)
 	print(shap_Warm_steps48679)
 	if(shap_Warm_steps48679$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps48679$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps48679$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps48679, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps48679')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps48679 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 48679 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps48679
 if(length(time_Hylaa_steps48679) == expectedRuns & length(time_Warm_steps48679) == expectedRuns){
 	result_RH1_steps48679_tTest = FALSE
 	result_RH1_steps48679_wTest = FALSE
 	
 	if(shap_Hylaa_steps48679$p.value > alpha&shap_Warm_steps48679$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time, subset(json_data,treatment == 'Warm' & object == 'steps48679')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time, subset(json_data, treatment == 'Warm' & object == 'steps48679')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps48679_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps48679')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps48679_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps48679_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps48679) == expectedRuns & length(time_Warm_steps48679) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps48679')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps48679')$time))))
	 if (result_RH1_steps48679_tTest | result_RH1_steps48679_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps48679')$time)){
	   	result_RH1_steps48679 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps48679 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps48679 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps48679 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps48679 = 5
	 	result_RH1_steps48679 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps48679')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps48679')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps48679')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps48679')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps48679')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps48679) != expectedRuns & length(time_Warm_steps48679) != expectedRuns){
 	result_object_RH1_steps48679 = 4
	result_RH1_steps48679 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps48679) == expectedRuns & length(time_Warm_steps48679) != expectedRuns){
	result_object_RH1_steps48679 = 2
	result_RH1_steps48679 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps48679) != expectedRuns & length(time_Warm_steps48679) == expectedRuns){
	result_object_RH1_steps48679 = 3
	result_RH1_steps48679 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.30: Object 63282 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps63282, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps63282 = subset(json_data, treatment == 'Hylaa' & object == 'steps63282' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps63282)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time)
 
 if(length(time_Hylaa_steps63282) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps63282'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps63282')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time))
 
 	shap_Hylaa_steps63282 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time)
 	print(shap_Hylaa_steps63282)
 	if(shap_Hylaa_steps63282$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps63282$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps63282$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps63282, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps63282 = subset(json_data, treatment == 'Warm' & object == 'steps63282' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps63282)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps63282')$time)
 
 if(length(time_Warm_steps63282) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps63282'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps63282')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps63282')$time))
 
 	shap_Warm_steps63282 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps63282')$time)
 	print(shap_Warm_steps63282)
 	if(shap_Warm_steps63282$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps63282$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps63282$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps63282, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps63282')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps63282 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 63282 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps63282
 if(length(time_Hylaa_steps63282) == expectedRuns & length(time_Warm_steps63282) == expectedRuns){
 	result_RH1_steps63282_tTest = FALSE
 	result_RH1_steps63282_wTest = FALSE
 	
 	if(shap_Hylaa_steps63282$p.value > alpha&shap_Warm_steps63282$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time, subset(json_data,treatment == 'Warm' & object == 'steps63282')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time, subset(json_data, treatment == 'Warm' & object == 'steps63282')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps63282_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps63282')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps63282_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps63282_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps63282) == expectedRuns & length(time_Warm_steps63282) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps63282')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps63282')$time))))
	 if (result_RH1_steps63282_tTest | result_RH1_steps63282_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps63282')$time)){
	   	result_RH1_steps63282 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps63282 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps63282 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps63282 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps63282 = 5
	 	result_RH1_steps63282 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps63282')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps63282')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps63282')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps63282')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps63282')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps63282) != expectedRuns & length(time_Warm_steps63282) != expectedRuns){
 	result_object_RH1_steps63282 = 4
	result_RH1_steps63282 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps63282) == expectedRuns & length(time_Warm_steps63282) != expectedRuns){
	result_object_RH1_steps63282 = 2
	result_RH1_steps63282 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps63282) != expectedRuns & length(time_Warm_steps63282) == expectedRuns){
	result_object_RH1_steps63282 = 3
	result_RH1_steps63282 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.31: Object 82267 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps82267, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps82267 = subset(json_data, treatment == 'Hylaa' & object == 'steps82267' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps82267)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time)
 
 if(length(time_Hylaa_steps82267) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps82267'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps82267')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time))
 
 	shap_Hylaa_steps82267 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time)
 	print(shap_Hylaa_steps82267)
 	if(shap_Hylaa_steps82267$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps82267$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps82267$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps82267, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps82267 = subset(json_data, treatment == 'Warm' & object == 'steps82267' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps82267)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps82267')$time)
 
 if(length(time_Warm_steps82267) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps82267'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps82267')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps82267')$time))
 
 	shap_Warm_steps82267 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps82267')$time)
 	print(shap_Warm_steps82267)
 	if(shap_Warm_steps82267$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps82267$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps82267$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps82267, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps82267')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps82267 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 82267 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps82267
 if(length(time_Hylaa_steps82267) == expectedRuns & length(time_Warm_steps82267) == expectedRuns){
 	result_RH1_steps82267_tTest = FALSE
 	result_RH1_steps82267_wTest = FALSE
 	
 	if(shap_Hylaa_steps82267$p.value > alpha&shap_Warm_steps82267$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time, subset(json_data,treatment == 'Warm' & object == 'steps82267')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time, subset(json_data, treatment == 'Warm' & object == 'steps82267')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps82267_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps82267')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps82267_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps82267_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps82267) == expectedRuns & length(time_Warm_steps82267) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps82267')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps82267')$time))))
	 if (result_RH1_steps82267_tTest | result_RH1_steps82267_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps82267')$time)){
	   	result_RH1_steps82267 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps82267 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps82267 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps82267 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps82267 = 5
	 	result_RH1_steps82267 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps82267')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps82267')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps82267')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps82267')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps82267')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps82267) != expectedRuns & length(time_Warm_steps82267) != expectedRuns){
 	result_object_RH1_steps82267 = 4
	result_RH1_steps82267 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps82267) == expectedRuns & length(time_Warm_steps82267) != expectedRuns){
	result_object_RH1_steps82267 = 2
	result_RH1_steps82267 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps82267) != expectedRuns & length(time_Warm_steps82267) == expectedRuns){
	result_object_RH1_steps82267 = 3
	result_RH1_steps82267 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.32: Object 106948 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps106948, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps106948 = subset(json_data, treatment == 'Hylaa' & object == 'steps106948' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps106948)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time)
 
 if(length(time_Hylaa_steps106948) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps106948'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps106948')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time))
 
 	shap_Hylaa_steps106948 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time)
 	print(shap_Hylaa_steps106948)
 	if(shap_Hylaa_steps106948$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps106948$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps106948$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps106948, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps106948 = subset(json_data, treatment == 'Warm' & object == 'steps106948' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps106948)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps106948')$time)
 
 if(length(time_Warm_steps106948) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps106948'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps106948')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps106948')$time))
 
 	shap_Warm_steps106948 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps106948')$time)
 	print(shap_Warm_steps106948)
 	if(shap_Warm_steps106948$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps106948$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps106948$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps106948, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps106948')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps106948 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 106948 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps106948
 if(length(time_Hylaa_steps106948) == expectedRuns & length(time_Warm_steps106948) == expectedRuns){
 	result_RH1_steps106948_tTest = FALSE
 	result_RH1_steps106948_wTest = FALSE
 	
 	if(shap_Hylaa_steps106948$p.value > alpha&shap_Warm_steps106948$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time, subset(json_data,treatment == 'Warm' & object == 'steps106948')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time, subset(json_data, treatment == 'Warm' & object == 'steps106948')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps106948_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps106948')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps106948_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps106948_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps106948) == expectedRuns & length(time_Warm_steps106948) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps106948')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps106948')$time))))
	 if (result_RH1_steps106948_tTest | result_RH1_steps106948_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps106948')$time)){
	   	result_RH1_steps106948 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps106948 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps106948 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps106948 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps106948 = 5
	 	result_RH1_steps106948 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps106948')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps106948')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps106948')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps106948')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps106948')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps106948) != expectedRuns & length(time_Warm_steps106948) != expectedRuns){
 	result_object_RH1_steps106948 = 4
	result_RH1_steps106948 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps106948) == expectedRuns & length(time_Warm_steps106948) != expectedRuns){
	result_object_RH1_steps106948 = 2
	result_RH1_steps106948 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps106948) != expectedRuns & length(time_Warm_steps106948) == expectedRuns){
	result_object_RH1_steps106948 = 3
	result_RH1_steps106948 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.33: Object 139032 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps139032, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps139032 = subset(json_data, treatment == 'Hylaa' & object == 'steps139032' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps139032)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time)
 
 if(length(time_Hylaa_steps139032) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps139032'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps139032')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time))
 
 	shap_Hylaa_steps139032 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time)
 	print(shap_Hylaa_steps139032)
 	if(shap_Hylaa_steps139032$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps139032$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps139032$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps139032, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps139032 = subset(json_data, treatment == 'Warm' & object == 'steps139032' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps139032)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps139032')$time)
 
 if(length(time_Warm_steps139032) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps139032'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps139032')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps139032')$time))
 
 	shap_Warm_steps139032 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps139032')$time)
 	print(shap_Warm_steps139032)
 	if(shap_Warm_steps139032$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps139032$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps139032$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps139032, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps139032')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps139032 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 139032 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps139032
 if(length(time_Hylaa_steps139032) == expectedRuns & length(time_Warm_steps139032) == expectedRuns){
 	result_RH1_steps139032_tTest = FALSE
 	result_RH1_steps139032_wTest = FALSE
 	
 	if(shap_Hylaa_steps139032$p.value > alpha&shap_Warm_steps139032$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time, subset(json_data,treatment == 'Warm' & object == 'steps139032')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time, subset(json_data, treatment == 'Warm' & object == 'steps139032')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps139032_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps139032')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps139032_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps139032_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps139032) == expectedRuns & length(time_Warm_steps139032) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps139032')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps139032')$time))))
	 if (result_RH1_steps139032_tTest | result_RH1_steps139032_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps139032')$time)){
	   	result_RH1_steps139032 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps139032 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps139032 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps139032 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps139032 = 5
	 	result_RH1_steps139032 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps139032')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps139032')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps139032')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps139032')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps139032')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps139032) != expectedRuns & length(time_Warm_steps139032) != expectedRuns){
 	result_object_RH1_steps139032 = 4
	result_RH1_steps139032 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps139032) == expectedRuns & length(time_Warm_steps139032) != expectedRuns){
	result_object_RH1_steps139032 = 2
	result_RH1_steps139032 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps139032) != expectedRuns & length(time_Warm_steps139032) == expectedRuns){
	result_object_RH1_steps139032 = 3
	result_RH1_steps139032 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


\subsubsection{RH1.34: Object 180742 steps}

 \textbf{Runtime for Hylaa}
 <<RH1_Hylaa_steps180742, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps180742 = subset(json_data, treatment == 'Hylaa' & object == 'steps180742' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps180742)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time)
 
 if(length(time_Hylaa_steps180742) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps180742'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps180742')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time))
 
 	shap_Hylaa_steps180742 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time)
 	print(shap_Hylaa_steps180742)
 	if(shap_Hylaa_steps180742$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps180742$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps180742$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Warm}
 <<RH1_Warm_steps180742, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Warm_steps180742 = subset(json_data, treatment == 'Warm' & object == 'steps180742' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Warm_steps180742)))					
 summary(subset(json_data, treatment == 'Warm' & object == 'steps180742')$time)
 
 if(length(time_Warm_steps180742) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Warm' & object == 'steps180742'), "time", min(subset(json_data, treatment == 'Warm'& object == 'steps180742')$time), max(subset(json_data, treatment == 'Warm' & object == 'steps180742')$time))
 
 	shap_Warm_steps180742 = shapiro.test(subset(json_data, treatment == 'Warm' & object == 'steps180742')$time)
 	print(shap_Warm_steps180742)
 	if(shap_Warm_steps180742$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Warm_steps180742$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Warm_steps180742$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_steps180742, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps180742')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH1_steps180742 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 180742 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH1_steps180742
 if(length(time_Hylaa_steps180742) == expectedRuns & length(time_Warm_steps180742) == expectedRuns){
 	result_RH1_steps180742_tTest = FALSE
 	result_RH1_steps180742_wTest = FALSE
 	
 	if(shap_Hylaa_steps180742$p.value > alpha&shap_Warm_steps180742$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time, subset(json_data,treatment == 'Warm' & object == 'steps180742')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time, subset(json_data, treatment == 'Warm' & object == 'steps180742')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_steps180742_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Warm') & object == 'steps180742')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps180742_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_steps180742_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps180742) == expectedRuns & length(time_Warm_steps180742) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time)))
	 print(paste("Mean Runtime for Warm: ", mean(subset(json_data, treatment == 'Warm' & object == 'steps180742')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time) - mean(subset(json_data, treatment == 'Warm' & object == 'steps180742')$time))))
	 if (result_RH1_steps180742_tTest | result_RH1_steps180742_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps180742')$time)){
	   	result_RH1_steps180742 = "Hylaa \\textgreater{} Warm"
	   	result_object_RH1_steps180742 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_steps180742 = "Hylaa \\textless{} Warm"
	   	result_object_RH1_steps180742 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_steps180742 = 5
	 	result_RH1_steps180742 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps180742')$time) > mean(subset(json_data, treatment == 'Warm' & object == 'steps180742')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps180742')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time)) / mean(subset(json_data, treatment == 'Warm' & object == 'steps180742')$time)), "% greater than \n Runtime for Warm"))				
	 }else{
	     cat(paste("Runtime for Warm is ", 100 * (abs(mean(subset(json_data, treatment == 'Warm' & object == 'steps180742')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps180742) != expectedRuns & length(time_Warm_steps180742) != expectedRuns){
 	result_object_RH1_steps180742 = 4
	result_RH1_steps180742 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(time_Hylaa_steps180742) == expectedRuns & length(time_Warm_steps180742) != expectedRuns){
	result_object_RH1_steps180742 = 2
	result_RH1_steps180742 = "Hylaa"
	result_RH1_Hylaa = result_RH1_Hylaa + 1			
}
if (length(time_Hylaa_steps180742) != expectedRuns & length(time_Warm_steps180742) == expectedRuns){
	result_object_RH1_steps180742 = 3
	result_RH1_steps180742 = "Warm"
	result_RH1_Warm = result_RH1_Warm + 1			
}
@  


 
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH1_result = list(hypothesis = "RH1", results = c(result_RH1_less / result_RH1_objects, result_RH1_greater / result_RH1_objects, result_RH1_Hylaa / result_RH1_objects, result_RH1_Warm / result_RH1_objects, result_RH1_none / result_RH1_objects, result_RH1_inconclusive / result_RH1_objects), objectResults = list( list(object = 'steps31', result = result_object_RH1_steps31),  list(object = 'steps40', result = result_object_RH1_steps40),  list(object = 'steps53', result = result_object_RH1_steps53),  list(object = 'steps68', result = result_object_RH1_steps68),  list(object = 'steps89', result = result_object_RH1_steps89),  list(object = 'steps116', result = result_object_RH1_steps116),  list(object = 'steps151', result = result_object_RH1_steps151),  list(object = 'steps197', result = result_object_RH1_steps197),  list(object = 'steps256', result = result_object_RH1_steps256),  list(object = 'steps332', result = result_object_RH1_steps332),  list(object = 'steps432', result = result_object_RH1_steps432),  list(object = 'steps562', result = result_object_RH1_steps562),  list(object = 'steps731', result = result_object_RH1_steps731),  list(object = 'steps951', result = result_object_RH1_steps951),  list(object = 'steps1236', result = result_object_RH1_steps1236),  list(object = 'steps1607', result = result_object_RH1_steps1607),  list(object = 'steps2089', result = result_object_RH1_steps2089),  list(object = 'steps2716', result = result_object_RH1_steps2716),  list(object = 'steps3531', result = result_object_RH1_steps3531),  list(object = 'steps4590', result = result_object_RH1_steps4590),  list(object = 'steps5967', result = result_object_RH1_steps5967),  list(object = 'steps7757', result = result_object_RH1_steps7757),  list(object = 'steps10085', result = result_object_RH1_steps10085),  list(object = 'steps13110', result = result_object_RH1_steps13110),  list(object = 'steps17043', result = result_object_RH1_steps17043),  list(object = 'steps22157', result = result_object_RH1_steps22157),  list(object = 'steps28804', result = result_object_RH1_steps28804),  list(object = 'steps37445', result = result_object_RH1_steps37445),  list(object = 'steps48679', result = result_object_RH1_steps48679),  list(object = 'steps63282', result = result_object_RH1_steps63282),  list(object = 'steps82267', result = result_object_RH1_steps82267),  list(object = 'steps106948', result = result_object_RH1_steps106948),  list(object = 'steps139032', result = result_object_RH1_steps139032),  list(object = 'steps180742', result = result_object_RH1_steps180742) ))	
	@
	
	\subsubsection{RH1 Results: Runtime Hylaa = Warm}
	
	
	\begin{table}[H]
	\centering
	\caption{RH1 Results per Object}
	\begin{tabular}{ll}
	\textbf{31 steps} & \Sexpr{result_RH1_steps31} \\
	\textbf{40 steps} & \Sexpr{result_RH1_steps40} \\
	\textbf{53 steps} & \Sexpr{result_RH1_steps53} \\
	\textbf{68 steps} & \Sexpr{result_RH1_steps68} \\
	\textbf{89 steps} & \Sexpr{result_RH1_steps89} \\
	\textbf{116 steps} & \Sexpr{result_RH1_steps116} \\
	\textbf{151 steps} & \Sexpr{result_RH1_steps151} \\
	\textbf{197 steps} & \Sexpr{result_RH1_steps197} \\
	\textbf{256 steps} & \Sexpr{result_RH1_steps256} \\
	\textbf{332 steps} & \Sexpr{result_RH1_steps332} \\
	\textbf{432 steps} & \Sexpr{result_RH1_steps432} \\
	\textbf{562 steps} & \Sexpr{result_RH1_steps562} \\
	\textbf{731 steps} & \Sexpr{result_RH1_steps731} \\
	\textbf{951 steps} & \Sexpr{result_RH1_steps951} \\
	\textbf{1236 steps} & \Sexpr{result_RH1_steps1236} \\
	\textbf{1607 steps} & \Sexpr{result_RH1_steps1607} \\
	\textbf{2089 steps} & \Sexpr{result_RH1_steps2089} \\
	\textbf{2716 steps} & \Sexpr{result_RH1_steps2716} \\
	\textbf{3531 steps} & \Sexpr{result_RH1_steps3531} \\
	\textbf{4590 steps} & \Sexpr{result_RH1_steps4590} \\
	\textbf{5967 steps} & \Sexpr{result_RH1_steps5967} \\
	\textbf{7757 steps} & \Sexpr{result_RH1_steps7757} \\
	\textbf{10085 steps} & \Sexpr{result_RH1_steps10085} \\
	\textbf{13110 steps} & \Sexpr{result_RH1_steps13110} \\
	\textbf{17043 steps} & \Sexpr{result_RH1_steps17043} \\
	\textbf{22157 steps} & \Sexpr{result_RH1_steps22157} \\
	\textbf{28804 steps} & \Sexpr{result_RH1_steps28804} \\
	\textbf{37445 steps} & \Sexpr{result_RH1_steps37445} \\
	\textbf{48679 steps} & \Sexpr{result_RH1_steps48679} \\
	\textbf{63282 steps} & \Sexpr{result_RH1_steps63282} \\
	\textbf{82267 steps} & \Sexpr{result_RH1_steps82267} \\
	\textbf{106948 steps} & \Sexpr{result_RH1_steps106948} \\
	\textbf{139032 steps} & \Sexpr{result_RH1_steps139032} \\
	\textbf{180742 steps} & \Sexpr{result_RH1_steps180742} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH1 Results Summary}
	\begin{tabular}{ll}
	\textbf{Hylaa \textless{} Warm:}& \Sexpr{100 * result_RH1_less / result_RH1_objects}\% \\
	\textbf{Hylaa \textgreater{} Warm:}& \Sexpr{100 * result_RH1_greater / result_RH1_objects}\%\\
	\textbf{Hylaa:} & \Sexpr{100 * result_RH1_Hylaa / result_RH1_objects}\%\\
	\textbf{Warm:} & \Sexpr{100 * result_RH1_Warm / result_RH1_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH1_none / result_RH1_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH1_inconclusive / result_RH1_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	



\subsection{RH2: Runtime time for Hylaa is equals than runtime time for Decomp}

 <<RH2, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 
 result_RH2_objects=34
 result_RH2_less=0
 result_RH2_greater=0
 result_RH2_Hylaa=0
 result_RH2_Decomp=0
 result_RH2_none=0
 result_RH2_inconclusive=0
 @
 
 <<overview_RH2, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 DF <- data_summary(subset(json_data, (object == 'steps31' |object == 'steps40' |object == 'steps53' |object == 'steps68' |object == 'steps89' |object == 'steps116' |object == 'steps151' |object == 'steps197' |object == 'steps256' |object == 'steps332' |object == 'steps432' |object == 'steps562' |object == 'steps731' |object == 'steps951' |object == 'steps1236' |object == 'steps1607' |object == 'steps2089' |object == 'steps2716' |object == 'steps3531' |object == 'steps4590' |object == 'steps5967' |object == 'steps7757' |object == 'steps10085' |object == 'steps13110' |object == 'steps17043' |object == 'steps22157' |object == 'steps28804' |object == 'steps37445' |object == 'steps48679' |object == 'steps63282' |object == 'steps82267' |object == 'steps106948' |object == 'steps139032' |object == 'steps180742' ) & (treatment == 'Hylaa' | treatment == 'Decomp')), varname = "time", groupnames = c("treatmentDescription", "objectLabel", "objectOrder"))
 		
 		ggplot(DF, aes(x=objectLabel, y=time, group=treatmentDescription, color=treatmentDescription)) + 
 		    geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1, linetype=3) +
 		    geom_line() + geom_point()+
 		   scale_color_brewer(palette="Paired") +
 		   theme_bw() +
 		  scale_x_log10(name = "Number of steps(log scale)", breaks_log(data=DF$objectLabel,steps=10))+
 		  
 		  scale_y_continuous(name = "Runtime (seconds)")+
 		  ggtitle("Runtime Overview") + 
 		  theme(legend.title = element_blank())	
 @
 	

\subsubsection{RH2.1: Object 31 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps31, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps31 = subset(json_data, treatment == 'Decomp' & object == 'steps31' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps31)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps31')$time)
 
 if(length(time_Decomp_steps31) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps31'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps31')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps31')$time))
 
 	shap_Decomp_steps31 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps31')$time)
 	print(shap_Decomp_steps31)
 	if(shap_Decomp_steps31$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps31$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps31$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps31, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps31 = subset(json_data, treatment == 'Hylaa' & object == 'steps31' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps31)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time)
 
 if(length(time_Hylaa_steps31) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps31'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps31')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time))
 
 	shap_Hylaa_steps31 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time)
 	print(shap_Hylaa_steps31)
 	if(shap_Hylaa_steps31$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps31$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps31$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps31, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps31')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps31 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 31 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps31
 if(length(time_Hylaa_steps31) == expectedRuns & length(time_Decomp_steps31) == expectedRuns){
 	result_RH2_steps31_tTest = FALSE
 	result_RH2_steps31_wTest = FALSE
 	
 	if(shap_Hylaa_steps31$p.value > alpha&shap_Decomp_steps31$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time, subset(json_data,treatment == 'Decomp' & object == 'steps31')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time, subset(json_data, treatment == 'Decomp' & object == 'steps31')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps31_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps31')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps31_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps31_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps31) == expectedRuns & length(time_Decomp_steps31) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps31')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps31')$time))))
	 if (result_RH2_steps31_tTest | result_RH2_steps31_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps31')$time)){
	   	result_RH2_steps31 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps31 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps31 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps31 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps31 = 5
	 	result_RH2_steps31 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps31')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps31')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps31')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps31')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps31')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps31) != expectedRuns & length(time_Decomp_steps31) != expectedRuns){
 	result_object_RH2_steps31 = 4
	result_RH2_steps31 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps31) == expectedRuns & length(time_Decomp_steps31) != expectedRuns){
	result_object_RH2_steps31 = 2
	result_RH2_steps31 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps31) != expectedRuns & length(time_Decomp_steps31) == expectedRuns){
	result_object_RH2_steps31 = 3
	result_RH2_steps31 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.2: Object 40 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps40, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps40 = subset(json_data, treatment == 'Decomp' & object == 'steps40' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps40)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps40')$time)
 
 if(length(time_Decomp_steps40) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps40'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps40')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps40')$time))
 
 	shap_Decomp_steps40 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps40')$time)
 	print(shap_Decomp_steps40)
 	if(shap_Decomp_steps40$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps40$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps40$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps40, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps40 = subset(json_data, treatment == 'Hylaa' & object == 'steps40' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps40)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time)
 
 if(length(time_Hylaa_steps40) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps40'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps40')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time))
 
 	shap_Hylaa_steps40 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time)
 	print(shap_Hylaa_steps40)
 	if(shap_Hylaa_steps40$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps40$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps40$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps40, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps40')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps40 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 40 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps40
 if(length(time_Hylaa_steps40) == expectedRuns & length(time_Decomp_steps40) == expectedRuns){
 	result_RH2_steps40_tTest = FALSE
 	result_RH2_steps40_wTest = FALSE
 	
 	if(shap_Hylaa_steps40$p.value > alpha&shap_Decomp_steps40$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time, subset(json_data,treatment == 'Decomp' & object == 'steps40')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time, subset(json_data, treatment == 'Decomp' & object == 'steps40')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps40_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps40')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps40_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps40_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps40) == expectedRuns & length(time_Decomp_steps40) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps40')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps40')$time))))
	 if (result_RH2_steps40_tTest | result_RH2_steps40_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps40')$time)){
	   	result_RH2_steps40 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps40 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps40 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps40 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps40 = 5
	 	result_RH2_steps40 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps40')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps40')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps40')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps40')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps40')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps40) != expectedRuns & length(time_Decomp_steps40) != expectedRuns){
 	result_object_RH2_steps40 = 4
	result_RH2_steps40 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps40) == expectedRuns & length(time_Decomp_steps40) != expectedRuns){
	result_object_RH2_steps40 = 2
	result_RH2_steps40 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps40) != expectedRuns & length(time_Decomp_steps40) == expectedRuns){
	result_object_RH2_steps40 = 3
	result_RH2_steps40 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.3: Object 53 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps53, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps53 = subset(json_data, treatment == 'Decomp' & object == 'steps53' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps53)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps53')$time)
 
 if(length(time_Decomp_steps53) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps53'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps53')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps53')$time))
 
 	shap_Decomp_steps53 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps53')$time)
 	print(shap_Decomp_steps53)
 	if(shap_Decomp_steps53$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps53$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps53$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps53, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps53 = subset(json_data, treatment == 'Hylaa' & object == 'steps53' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps53)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time)
 
 if(length(time_Hylaa_steps53) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps53'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps53')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time))
 
 	shap_Hylaa_steps53 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time)
 	print(shap_Hylaa_steps53)
 	if(shap_Hylaa_steps53$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps53$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps53$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps53, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps53')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps53 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 53 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps53
 if(length(time_Hylaa_steps53) == expectedRuns & length(time_Decomp_steps53) == expectedRuns){
 	result_RH2_steps53_tTest = FALSE
 	result_RH2_steps53_wTest = FALSE
 	
 	if(shap_Hylaa_steps53$p.value > alpha&shap_Decomp_steps53$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time, subset(json_data,treatment == 'Decomp' & object == 'steps53')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time, subset(json_data, treatment == 'Decomp' & object == 'steps53')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps53_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps53')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps53_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps53_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps53) == expectedRuns & length(time_Decomp_steps53) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps53')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps53')$time))))
	 if (result_RH2_steps53_tTest | result_RH2_steps53_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps53')$time)){
	   	result_RH2_steps53 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps53 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps53 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps53 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps53 = 5
	 	result_RH2_steps53 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps53')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps53')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps53')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps53')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps53')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps53) != expectedRuns & length(time_Decomp_steps53) != expectedRuns){
 	result_object_RH2_steps53 = 4
	result_RH2_steps53 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps53) == expectedRuns & length(time_Decomp_steps53) != expectedRuns){
	result_object_RH2_steps53 = 2
	result_RH2_steps53 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps53) != expectedRuns & length(time_Decomp_steps53) == expectedRuns){
	result_object_RH2_steps53 = 3
	result_RH2_steps53 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.4: Object 68 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps68, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps68 = subset(json_data, treatment == 'Decomp' & object == 'steps68' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps68)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps68')$time)
 
 if(length(time_Decomp_steps68) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps68'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps68')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps68')$time))
 
 	shap_Decomp_steps68 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps68')$time)
 	print(shap_Decomp_steps68)
 	if(shap_Decomp_steps68$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps68$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps68$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps68, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps68 = subset(json_data, treatment == 'Hylaa' & object == 'steps68' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps68)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time)
 
 if(length(time_Hylaa_steps68) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps68'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps68')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time))
 
 	shap_Hylaa_steps68 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time)
 	print(shap_Hylaa_steps68)
 	if(shap_Hylaa_steps68$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps68$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps68$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps68, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps68')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps68 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 68 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps68
 if(length(time_Hylaa_steps68) == expectedRuns & length(time_Decomp_steps68) == expectedRuns){
 	result_RH2_steps68_tTest = FALSE
 	result_RH2_steps68_wTest = FALSE
 	
 	if(shap_Hylaa_steps68$p.value > alpha&shap_Decomp_steps68$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time, subset(json_data,treatment == 'Decomp' & object == 'steps68')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time, subset(json_data, treatment == 'Decomp' & object == 'steps68')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps68_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps68')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps68_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps68_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps68) == expectedRuns & length(time_Decomp_steps68) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps68')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps68')$time))))
	 if (result_RH2_steps68_tTest | result_RH2_steps68_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps68')$time)){
	   	result_RH2_steps68 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps68 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps68 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps68 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps68 = 5
	 	result_RH2_steps68 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps68')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps68')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps68')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps68')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps68')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps68) != expectedRuns & length(time_Decomp_steps68) != expectedRuns){
 	result_object_RH2_steps68 = 4
	result_RH2_steps68 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps68) == expectedRuns & length(time_Decomp_steps68) != expectedRuns){
	result_object_RH2_steps68 = 2
	result_RH2_steps68 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps68) != expectedRuns & length(time_Decomp_steps68) == expectedRuns){
	result_object_RH2_steps68 = 3
	result_RH2_steps68 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.5: Object 89 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps89, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps89 = subset(json_data, treatment == 'Decomp' & object == 'steps89' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps89)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps89')$time)
 
 if(length(time_Decomp_steps89) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps89'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps89')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps89')$time))
 
 	shap_Decomp_steps89 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps89')$time)
 	print(shap_Decomp_steps89)
 	if(shap_Decomp_steps89$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps89$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps89$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps89, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps89 = subset(json_data, treatment == 'Hylaa' & object == 'steps89' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps89)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time)
 
 if(length(time_Hylaa_steps89) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps89'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps89')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time))
 
 	shap_Hylaa_steps89 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time)
 	print(shap_Hylaa_steps89)
 	if(shap_Hylaa_steps89$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps89$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps89$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps89, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps89')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps89 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 89 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps89
 if(length(time_Hylaa_steps89) == expectedRuns & length(time_Decomp_steps89) == expectedRuns){
 	result_RH2_steps89_tTest = FALSE
 	result_RH2_steps89_wTest = FALSE
 	
 	if(shap_Hylaa_steps89$p.value > alpha&shap_Decomp_steps89$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time, subset(json_data,treatment == 'Decomp' & object == 'steps89')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time, subset(json_data, treatment == 'Decomp' & object == 'steps89')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps89_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps89')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps89_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps89_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps89) == expectedRuns & length(time_Decomp_steps89) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps89')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps89')$time))))
	 if (result_RH2_steps89_tTest | result_RH2_steps89_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps89')$time)){
	   	result_RH2_steps89 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps89 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps89 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps89 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps89 = 5
	 	result_RH2_steps89 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps89')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps89')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps89')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps89')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps89')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps89) != expectedRuns & length(time_Decomp_steps89) != expectedRuns){
 	result_object_RH2_steps89 = 4
	result_RH2_steps89 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps89) == expectedRuns & length(time_Decomp_steps89) != expectedRuns){
	result_object_RH2_steps89 = 2
	result_RH2_steps89 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps89) != expectedRuns & length(time_Decomp_steps89) == expectedRuns){
	result_object_RH2_steps89 = 3
	result_RH2_steps89 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.6: Object 116 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps116, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps116 = subset(json_data, treatment == 'Decomp' & object == 'steps116' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps116)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps116')$time)
 
 if(length(time_Decomp_steps116) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps116'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps116')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps116')$time))
 
 	shap_Decomp_steps116 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps116')$time)
 	print(shap_Decomp_steps116)
 	if(shap_Decomp_steps116$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps116$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps116$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps116, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps116 = subset(json_data, treatment == 'Hylaa' & object == 'steps116' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps116)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time)
 
 if(length(time_Hylaa_steps116) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps116'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps116')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time))
 
 	shap_Hylaa_steps116 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time)
 	print(shap_Hylaa_steps116)
 	if(shap_Hylaa_steps116$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps116$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps116$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps116, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps116')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps116 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 116 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps116
 if(length(time_Hylaa_steps116) == expectedRuns & length(time_Decomp_steps116) == expectedRuns){
 	result_RH2_steps116_tTest = FALSE
 	result_RH2_steps116_wTest = FALSE
 	
 	if(shap_Hylaa_steps116$p.value > alpha&shap_Decomp_steps116$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time, subset(json_data,treatment == 'Decomp' & object == 'steps116')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time, subset(json_data, treatment == 'Decomp' & object == 'steps116')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps116_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps116')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps116_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps116_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps116) == expectedRuns & length(time_Decomp_steps116) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps116')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps116')$time))))
	 if (result_RH2_steps116_tTest | result_RH2_steps116_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps116')$time)){
	   	result_RH2_steps116 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps116 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps116 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps116 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps116 = 5
	 	result_RH2_steps116 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps116')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps116')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps116')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps116')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps116')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps116) != expectedRuns & length(time_Decomp_steps116) != expectedRuns){
 	result_object_RH2_steps116 = 4
	result_RH2_steps116 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps116) == expectedRuns & length(time_Decomp_steps116) != expectedRuns){
	result_object_RH2_steps116 = 2
	result_RH2_steps116 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps116) != expectedRuns & length(time_Decomp_steps116) == expectedRuns){
	result_object_RH2_steps116 = 3
	result_RH2_steps116 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.7: Object 151 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps151, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps151 = subset(json_data, treatment == 'Decomp' & object == 'steps151' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps151)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps151')$time)
 
 if(length(time_Decomp_steps151) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps151'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps151')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps151')$time))
 
 	shap_Decomp_steps151 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps151')$time)
 	print(shap_Decomp_steps151)
 	if(shap_Decomp_steps151$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps151$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps151$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps151, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps151 = subset(json_data, treatment == 'Hylaa' & object == 'steps151' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps151)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time)
 
 if(length(time_Hylaa_steps151) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps151'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps151')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time))
 
 	shap_Hylaa_steps151 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time)
 	print(shap_Hylaa_steps151)
 	if(shap_Hylaa_steps151$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps151$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps151$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps151, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps151')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps151 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 151 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps151
 if(length(time_Hylaa_steps151) == expectedRuns & length(time_Decomp_steps151) == expectedRuns){
 	result_RH2_steps151_tTest = FALSE
 	result_RH2_steps151_wTest = FALSE
 	
 	if(shap_Hylaa_steps151$p.value > alpha&shap_Decomp_steps151$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time, subset(json_data,treatment == 'Decomp' & object == 'steps151')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time, subset(json_data, treatment == 'Decomp' & object == 'steps151')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps151_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps151')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps151_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps151_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps151) == expectedRuns & length(time_Decomp_steps151) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps151')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps151')$time))))
	 if (result_RH2_steps151_tTest | result_RH2_steps151_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps151')$time)){
	   	result_RH2_steps151 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps151 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps151 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps151 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps151 = 5
	 	result_RH2_steps151 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps151')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps151')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps151')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps151')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps151')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps151) != expectedRuns & length(time_Decomp_steps151) != expectedRuns){
 	result_object_RH2_steps151 = 4
	result_RH2_steps151 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps151) == expectedRuns & length(time_Decomp_steps151) != expectedRuns){
	result_object_RH2_steps151 = 2
	result_RH2_steps151 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps151) != expectedRuns & length(time_Decomp_steps151) == expectedRuns){
	result_object_RH2_steps151 = 3
	result_RH2_steps151 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.8: Object 197 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps197, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps197 = subset(json_data, treatment == 'Decomp' & object == 'steps197' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps197)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps197')$time)
 
 if(length(time_Decomp_steps197) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps197'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps197')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps197')$time))
 
 	shap_Decomp_steps197 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps197')$time)
 	print(shap_Decomp_steps197)
 	if(shap_Decomp_steps197$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps197$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps197$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps197, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps197 = subset(json_data, treatment == 'Hylaa' & object == 'steps197' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps197)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time)
 
 if(length(time_Hylaa_steps197) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps197'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps197')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time))
 
 	shap_Hylaa_steps197 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time)
 	print(shap_Hylaa_steps197)
 	if(shap_Hylaa_steps197$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps197$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps197$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps197, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps197')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps197 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 197 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps197
 if(length(time_Hylaa_steps197) == expectedRuns & length(time_Decomp_steps197) == expectedRuns){
 	result_RH2_steps197_tTest = FALSE
 	result_RH2_steps197_wTest = FALSE
 	
 	if(shap_Hylaa_steps197$p.value > alpha&shap_Decomp_steps197$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time, subset(json_data,treatment == 'Decomp' & object == 'steps197')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time, subset(json_data, treatment == 'Decomp' & object == 'steps197')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps197_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps197')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps197_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps197_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps197) == expectedRuns & length(time_Decomp_steps197) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps197')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps197')$time))))
	 if (result_RH2_steps197_tTest | result_RH2_steps197_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps197')$time)){
	   	result_RH2_steps197 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps197 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps197 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps197 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps197 = 5
	 	result_RH2_steps197 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps197')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps197')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps197')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps197')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps197')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps197) != expectedRuns & length(time_Decomp_steps197) != expectedRuns){
 	result_object_RH2_steps197 = 4
	result_RH2_steps197 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps197) == expectedRuns & length(time_Decomp_steps197) != expectedRuns){
	result_object_RH2_steps197 = 2
	result_RH2_steps197 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps197) != expectedRuns & length(time_Decomp_steps197) == expectedRuns){
	result_object_RH2_steps197 = 3
	result_RH2_steps197 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.9: Object 256 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps256, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps256 = subset(json_data, treatment == 'Decomp' & object == 'steps256' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps256)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps256')$time)
 
 if(length(time_Decomp_steps256) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps256'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps256')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps256')$time))
 
 	shap_Decomp_steps256 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps256')$time)
 	print(shap_Decomp_steps256)
 	if(shap_Decomp_steps256$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps256$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps256$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps256, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps256 = subset(json_data, treatment == 'Hylaa' & object == 'steps256' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps256)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time)
 
 if(length(time_Hylaa_steps256) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps256'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps256')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time))
 
 	shap_Hylaa_steps256 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time)
 	print(shap_Hylaa_steps256)
 	if(shap_Hylaa_steps256$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps256$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps256$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps256, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps256')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps256 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 256 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps256
 if(length(time_Hylaa_steps256) == expectedRuns & length(time_Decomp_steps256) == expectedRuns){
 	result_RH2_steps256_tTest = FALSE
 	result_RH2_steps256_wTest = FALSE
 	
 	if(shap_Hylaa_steps256$p.value > alpha&shap_Decomp_steps256$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time, subset(json_data,treatment == 'Decomp' & object == 'steps256')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time, subset(json_data, treatment == 'Decomp' & object == 'steps256')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps256_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps256')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps256_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps256_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps256) == expectedRuns & length(time_Decomp_steps256) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps256')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps256')$time))))
	 if (result_RH2_steps256_tTest | result_RH2_steps256_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps256')$time)){
	   	result_RH2_steps256 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps256 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps256 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps256 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps256 = 5
	 	result_RH2_steps256 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps256')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps256')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps256')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps256')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps256')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps256) != expectedRuns & length(time_Decomp_steps256) != expectedRuns){
 	result_object_RH2_steps256 = 4
	result_RH2_steps256 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps256) == expectedRuns & length(time_Decomp_steps256) != expectedRuns){
	result_object_RH2_steps256 = 2
	result_RH2_steps256 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps256) != expectedRuns & length(time_Decomp_steps256) == expectedRuns){
	result_object_RH2_steps256 = 3
	result_RH2_steps256 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.10: Object 332 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps332, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps332 = subset(json_data, treatment == 'Decomp' & object == 'steps332' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps332)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps332')$time)
 
 if(length(time_Decomp_steps332) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps332'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps332')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps332')$time))
 
 	shap_Decomp_steps332 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps332')$time)
 	print(shap_Decomp_steps332)
 	if(shap_Decomp_steps332$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps332$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps332$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps332, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps332 = subset(json_data, treatment == 'Hylaa' & object == 'steps332' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps332)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time)
 
 if(length(time_Hylaa_steps332) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps332'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps332')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time))
 
 	shap_Hylaa_steps332 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time)
 	print(shap_Hylaa_steps332)
 	if(shap_Hylaa_steps332$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps332$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps332$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps332, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps332')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps332 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 332 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps332
 if(length(time_Hylaa_steps332) == expectedRuns & length(time_Decomp_steps332) == expectedRuns){
 	result_RH2_steps332_tTest = FALSE
 	result_RH2_steps332_wTest = FALSE
 	
 	if(shap_Hylaa_steps332$p.value > alpha&shap_Decomp_steps332$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time, subset(json_data,treatment == 'Decomp' & object == 'steps332')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time, subset(json_data, treatment == 'Decomp' & object == 'steps332')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps332_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps332')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps332_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps332_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps332) == expectedRuns & length(time_Decomp_steps332) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps332')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps332')$time))))
	 if (result_RH2_steps332_tTest | result_RH2_steps332_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps332')$time)){
	   	result_RH2_steps332 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps332 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps332 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps332 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps332 = 5
	 	result_RH2_steps332 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps332')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps332')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps332')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps332')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps332')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps332) != expectedRuns & length(time_Decomp_steps332) != expectedRuns){
 	result_object_RH2_steps332 = 4
	result_RH2_steps332 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps332) == expectedRuns & length(time_Decomp_steps332) != expectedRuns){
	result_object_RH2_steps332 = 2
	result_RH2_steps332 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps332) != expectedRuns & length(time_Decomp_steps332) == expectedRuns){
	result_object_RH2_steps332 = 3
	result_RH2_steps332 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.11: Object 432 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps432, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps432 = subset(json_data, treatment == 'Decomp' & object == 'steps432' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps432)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps432')$time)
 
 if(length(time_Decomp_steps432) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps432'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps432')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps432')$time))
 
 	shap_Decomp_steps432 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps432')$time)
 	print(shap_Decomp_steps432)
 	if(shap_Decomp_steps432$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps432$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps432$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps432, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps432 = subset(json_data, treatment == 'Hylaa' & object == 'steps432' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps432)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time)
 
 if(length(time_Hylaa_steps432) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps432'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps432')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time))
 
 	shap_Hylaa_steps432 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time)
 	print(shap_Hylaa_steps432)
 	if(shap_Hylaa_steps432$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps432$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps432$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps432, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps432')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps432 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 432 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps432
 if(length(time_Hylaa_steps432) == expectedRuns & length(time_Decomp_steps432) == expectedRuns){
 	result_RH2_steps432_tTest = FALSE
 	result_RH2_steps432_wTest = FALSE
 	
 	if(shap_Hylaa_steps432$p.value > alpha&shap_Decomp_steps432$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time, subset(json_data,treatment == 'Decomp' & object == 'steps432')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time, subset(json_data, treatment == 'Decomp' & object == 'steps432')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps432_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps432')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps432_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps432_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps432) == expectedRuns & length(time_Decomp_steps432) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps432')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps432')$time))))
	 if (result_RH2_steps432_tTest | result_RH2_steps432_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps432')$time)){
	   	result_RH2_steps432 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps432 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps432 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps432 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps432 = 5
	 	result_RH2_steps432 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps432')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps432')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps432')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps432')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps432')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps432) != expectedRuns & length(time_Decomp_steps432) != expectedRuns){
 	result_object_RH2_steps432 = 4
	result_RH2_steps432 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps432) == expectedRuns & length(time_Decomp_steps432) != expectedRuns){
	result_object_RH2_steps432 = 2
	result_RH2_steps432 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps432) != expectedRuns & length(time_Decomp_steps432) == expectedRuns){
	result_object_RH2_steps432 = 3
	result_RH2_steps432 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.12: Object 562 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps562, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps562 = subset(json_data, treatment == 'Decomp' & object == 'steps562' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps562)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps562')$time)
 
 if(length(time_Decomp_steps562) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps562'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps562')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps562')$time))
 
 	shap_Decomp_steps562 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps562')$time)
 	print(shap_Decomp_steps562)
 	if(shap_Decomp_steps562$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps562$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps562$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps562, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps562 = subset(json_data, treatment == 'Hylaa' & object == 'steps562' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps562)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time)
 
 if(length(time_Hylaa_steps562) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps562'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps562')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time))
 
 	shap_Hylaa_steps562 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time)
 	print(shap_Hylaa_steps562)
 	if(shap_Hylaa_steps562$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps562$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps562$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps562, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps562')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps562 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 562 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps562
 if(length(time_Hylaa_steps562) == expectedRuns & length(time_Decomp_steps562) == expectedRuns){
 	result_RH2_steps562_tTest = FALSE
 	result_RH2_steps562_wTest = FALSE
 	
 	if(shap_Hylaa_steps562$p.value > alpha&shap_Decomp_steps562$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time, subset(json_data,treatment == 'Decomp' & object == 'steps562')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time, subset(json_data, treatment == 'Decomp' & object == 'steps562')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps562_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps562')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps562_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps562_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps562) == expectedRuns & length(time_Decomp_steps562) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps562')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps562')$time))))
	 if (result_RH2_steps562_tTest | result_RH2_steps562_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps562')$time)){
	   	result_RH2_steps562 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps562 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps562 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps562 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps562 = 5
	 	result_RH2_steps562 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps562')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps562')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps562')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps562')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps562')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps562) != expectedRuns & length(time_Decomp_steps562) != expectedRuns){
 	result_object_RH2_steps562 = 4
	result_RH2_steps562 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps562) == expectedRuns & length(time_Decomp_steps562) != expectedRuns){
	result_object_RH2_steps562 = 2
	result_RH2_steps562 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps562) != expectedRuns & length(time_Decomp_steps562) == expectedRuns){
	result_object_RH2_steps562 = 3
	result_RH2_steps562 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.13: Object 731 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps731, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps731 = subset(json_data, treatment == 'Decomp' & object == 'steps731' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps731)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps731')$time)
 
 if(length(time_Decomp_steps731) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps731'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps731')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps731')$time))
 
 	shap_Decomp_steps731 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps731')$time)
 	print(shap_Decomp_steps731)
 	if(shap_Decomp_steps731$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps731$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps731$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps731, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps731 = subset(json_data, treatment == 'Hylaa' & object == 'steps731' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps731)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time)
 
 if(length(time_Hylaa_steps731) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps731'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps731')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time))
 
 	shap_Hylaa_steps731 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time)
 	print(shap_Hylaa_steps731)
 	if(shap_Hylaa_steps731$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps731$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps731$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps731, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps731')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps731 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 731 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps731
 if(length(time_Hylaa_steps731) == expectedRuns & length(time_Decomp_steps731) == expectedRuns){
 	result_RH2_steps731_tTest = FALSE
 	result_RH2_steps731_wTest = FALSE
 	
 	if(shap_Hylaa_steps731$p.value > alpha&shap_Decomp_steps731$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time, subset(json_data,treatment == 'Decomp' & object == 'steps731')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time, subset(json_data, treatment == 'Decomp' & object == 'steps731')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps731_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps731')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps731_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps731_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps731) == expectedRuns & length(time_Decomp_steps731) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps731')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps731')$time))))
	 if (result_RH2_steps731_tTest | result_RH2_steps731_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps731')$time)){
	   	result_RH2_steps731 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps731 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps731 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps731 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps731 = 5
	 	result_RH2_steps731 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps731')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps731')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps731')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps731')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps731')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps731) != expectedRuns & length(time_Decomp_steps731) != expectedRuns){
 	result_object_RH2_steps731 = 4
	result_RH2_steps731 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps731) == expectedRuns & length(time_Decomp_steps731) != expectedRuns){
	result_object_RH2_steps731 = 2
	result_RH2_steps731 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps731) != expectedRuns & length(time_Decomp_steps731) == expectedRuns){
	result_object_RH2_steps731 = 3
	result_RH2_steps731 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.14: Object 951 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps951, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps951 = subset(json_data, treatment == 'Decomp' & object == 'steps951' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps951)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps951')$time)
 
 if(length(time_Decomp_steps951) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps951'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps951')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps951')$time))
 
 	shap_Decomp_steps951 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps951')$time)
 	print(shap_Decomp_steps951)
 	if(shap_Decomp_steps951$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps951$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps951$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps951, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps951 = subset(json_data, treatment == 'Hylaa' & object == 'steps951' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps951)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time)
 
 if(length(time_Hylaa_steps951) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps951'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps951')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time))
 
 	shap_Hylaa_steps951 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time)
 	print(shap_Hylaa_steps951)
 	if(shap_Hylaa_steps951$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps951$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps951$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps951, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps951')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps951 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 951 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps951
 if(length(time_Hylaa_steps951) == expectedRuns & length(time_Decomp_steps951) == expectedRuns){
 	result_RH2_steps951_tTest = FALSE
 	result_RH2_steps951_wTest = FALSE
 	
 	if(shap_Hylaa_steps951$p.value > alpha&shap_Decomp_steps951$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time, subset(json_data,treatment == 'Decomp' & object == 'steps951')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time, subset(json_data, treatment == 'Decomp' & object == 'steps951')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps951_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps951')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps951_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps951_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps951) == expectedRuns & length(time_Decomp_steps951) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps951')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps951')$time))))
	 if (result_RH2_steps951_tTest | result_RH2_steps951_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps951')$time)){
	   	result_RH2_steps951 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps951 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps951 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps951 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps951 = 5
	 	result_RH2_steps951 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps951')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps951')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps951')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps951')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps951')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps951) != expectedRuns & length(time_Decomp_steps951) != expectedRuns){
 	result_object_RH2_steps951 = 4
	result_RH2_steps951 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps951) == expectedRuns & length(time_Decomp_steps951) != expectedRuns){
	result_object_RH2_steps951 = 2
	result_RH2_steps951 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps951) != expectedRuns & length(time_Decomp_steps951) == expectedRuns){
	result_object_RH2_steps951 = 3
	result_RH2_steps951 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.15: Object 1236 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps1236, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps1236 = subset(json_data, treatment == 'Decomp' & object == 'steps1236' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps1236)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps1236')$time)
 
 if(length(time_Decomp_steps1236) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps1236'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps1236')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps1236')$time))
 
 	shap_Decomp_steps1236 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps1236')$time)
 	print(shap_Decomp_steps1236)
 	if(shap_Decomp_steps1236$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps1236$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps1236$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps1236, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps1236 = subset(json_data, treatment == 'Hylaa' & object == 'steps1236' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps1236)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time)
 
 if(length(time_Hylaa_steps1236) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps1236'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps1236')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time))
 
 	shap_Hylaa_steps1236 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time)
 	print(shap_Hylaa_steps1236)
 	if(shap_Hylaa_steps1236$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps1236$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps1236$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps1236, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps1236')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps1236 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 1236 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps1236
 if(length(time_Hylaa_steps1236) == expectedRuns & length(time_Decomp_steps1236) == expectedRuns){
 	result_RH2_steps1236_tTest = FALSE
 	result_RH2_steps1236_wTest = FALSE
 	
 	if(shap_Hylaa_steps1236$p.value > alpha&shap_Decomp_steps1236$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time, subset(json_data,treatment == 'Decomp' & object == 'steps1236')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time, subset(json_data, treatment == 'Decomp' & object == 'steps1236')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps1236_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps1236')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps1236_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps1236_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps1236) == expectedRuns & length(time_Decomp_steps1236) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps1236')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps1236')$time))))
	 if (result_RH2_steps1236_tTest | result_RH2_steps1236_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps1236')$time)){
	   	result_RH2_steps1236 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps1236 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps1236 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps1236 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps1236 = 5
	 	result_RH2_steps1236 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps1236')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps1236')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps1236')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps1236')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps1236')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps1236) != expectedRuns & length(time_Decomp_steps1236) != expectedRuns){
 	result_object_RH2_steps1236 = 4
	result_RH2_steps1236 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps1236) == expectedRuns & length(time_Decomp_steps1236) != expectedRuns){
	result_object_RH2_steps1236 = 2
	result_RH2_steps1236 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps1236) != expectedRuns & length(time_Decomp_steps1236) == expectedRuns){
	result_object_RH2_steps1236 = 3
	result_RH2_steps1236 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.16: Object 1607 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps1607, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps1607 = subset(json_data, treatment == 'Decomp' & object == 'steps1607' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps1607)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps1607')$time)
 
 if(length(time_Decomp_steps1607) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps1607'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps1607')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps1607')$time))
 
 	shap_Decomp_steps1607 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps1607')$time)
 	print(shap_Decomp_steps1607)
 	if(shap_Decomp_steps1607$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps1607$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps1607$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps1607, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps1607 = subset(json_data, treatment == 'Hylaa' & object == 'steps1607' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps1607)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time)
 
 if(length(time_Hylaa_steps1607) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps1607'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps1607')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time))
 
 	shap_Hylaa_steps1607 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time)
 	print(shap_Hylaa_steps1607)
 	if(shap_Hylaa_steps1607$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps1607$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps1607$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps1607, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps1607')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps1607 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 1607 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps1607
 if(length(time_Hylaa_steps1607) == expectedRuns & length(time_Decomp_steps1607) == expectedRuns){
 	result_RH2_steps1607_tTest = FALSE
 	result_RH2_steps1607_wTest = FALSE
 	
 	if(shap_Hylaa_steps1607$p.value > alpha&shap_Decomp_steps1607$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time, subset(json_data,treatment == 'Decomp' & object == 'steps1607')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time, subset(json_data, treatment == 'Decomp' & object == 'steps1607')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps1607_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps1607')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps1607_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps1607_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps1607) == expectedRuns & length(time_Decomp_steps1607) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps1607')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps1607')$time))))
	 if (result_RH2_steps1607_tTest | result_RH2_steps1607_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps1607')$time)){
	   	result_RH2_steps1607 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps1607 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps1607 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps1607 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps1607 = 5
	 	result_RH2_steps1607 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps1607')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps1607')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps1607')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps1607')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps1607')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps1607) != expectedRuns & length(time_Decomp_steps1607) != expectedRuns){
 	result_object_RH2_steps1607 = 4
	result_RH2_steps1607 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps1607) == expectedRuns & length(time_Decomp_steps1607) != expectedRuns){
	result_object_RH2_steps1607 = 2
	result_RH2_steps1607 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps1607) != expectedRuns & length(time_Decomp_steps1607) == expectedRuns){
	result_object_RH2_steps1607 = 3
	result_RH2_steps1607 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.17: Object 2089 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps2089, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps2089 = subset(json_data, treatment == 'Decomp' & object == 'steps2089' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps2089)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps2089')$time)
 
 if(length(time_Decomp_steps2089) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps2089'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps2089')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps2089')$time))
 
 	shap_Decomp_steps2089 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps2089')$time)
 	print(shap_Decomp_steps2089)
 	if(shap_Decomp_steps2089$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps2089$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps2089$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps2089, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps2089 = subset(json_data, treatment == 'Hylaa' & object == 'steps2089' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps2089)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time)
 
 if(length(time_Hylaa_steps2089) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps2089'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps2089')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time))
 
 	shap_Hylaa_steps2089 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time)
 	print(shap_Hylaa_steps2089)
 	if(shap_Hylaa_steps2089$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps2089$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps2089$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps2089, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps2089')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps2089 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 2089 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps2089
 if(length(time_Hylaa_steps2089) == expectedRuns & length(time_Decomp_steps2089) == expectedRuns){
 	result_RH2_steps2089_tTest = FALSE
 	result_RH2_steps2089_wTest = FALSE
 	
 	if(shap_Hylaa_steps2089$p.value > alpha&shap_Decomp_steps2089$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time, subset(json_data,treatment == 'Decomp' & object == 'steps2089')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time, subset(json_data, treatment == 'Decomp' & object == 'steps2089')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps2089_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps2089')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps2089_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps2089_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps2089) == expectedRuns & length(time_Decomp_steps2089) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps2089')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps2089')$time))))
	 if (result_RH2_steps2089_tTest | result_RH2_steps2089_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps2089')$time)){
	   	result_RH2_steps2089 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps2089 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps2089 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps2089 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps2089 = 5
	 	result_RH2_steps2089 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps2089')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps2089')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps2089')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps2089')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps2089')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps2089) != expectedRuns & length(time_Decomp_steps2089) != expectedRuns){
 	result_object_RH2_steps2089 = 4
	result_RH2_steps2089 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps2089) == expectedRuns & length(time_Decomp_steps2089) != expectedRuns){
	result_object_RH2_steps2089 = 2
	result_RH2_steps2089 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps2089) != expectedRuns & length(time_Decomp_steps2089) == expectedRuns){
	result_object_RH2_steps2089 = 3
	result_RH2_steps2089 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.18: Object 2716 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps2716, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps2716 = subset(json_data, treatment == 'Decomp' & object == 'steps2716' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps2716)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps2716')$time)
 
 if(length(time_Decomp_steps2716) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps2716'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps2716')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps2716')$time))
 
 	shap_Decomp_steps2716 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps2716')$time)
 	print(shap_Decomp_steps2716)
 	if(shap_Decomp_steps2716$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps2716$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps2716$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps2716, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps2716 = subset(json_data, treatment == 'Hylaa' & object == 'steps2716' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps2716)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time)
 
 if(length(time_Hylaa_steps2716) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps2716'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps2716')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time))
 
 	shap_Hylaa_steps2716 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time)
 	print(shap_Hylaa_steps2716)
 	if(shap_Hylaa_steps2716$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps2716$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps2716$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps2716, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps2716')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps2716 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 2716 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps2716
 if(length(time_Hylaa_steps2716) == expectedRuns & length(time_Decomp_steps2716) == expectedRuns){
 	result_RH2_steps2716_tTest = FALSE
 	result_RH2_steps2716_wTest = FALSE
 	
 	if(shap_Hylaa_steps2716$p.value > alpha&shap_Decomp_steps2716$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time, subset(json_data,treatment == 'Decomp' & object == 'steps2716')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time, subset(json_data, treatment == 'Decomp' & object == 'steps2716')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps2716_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps2716')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps2716_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps2716_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps2716) == expectedRuns & length(time_Decomp_steps2716) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps2716')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps2716')$time))))
	 if (result_RH2_steps2716_tTest | result_RH2_steps2716_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps2716')$time)){
	   	result_RH2_steps2716 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps2716 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps2716 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps2716 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps2716 = 5
	 	result_RH2_steps2716 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps2716')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps2716')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps2716')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps2716')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps2716')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps2716) != expectedRuns & length(time_Decomp_steps2716) != expectedRuns){
 	result_object_RH2_steps2716 = 4
	result_RH2_steps2716 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps2716) == expectedRuns & length(time_Decomp_steps2716) != expectedRuns){
	result_object_RH2_steps2716 = 2
	result_RH2_steps2716 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps2716) != expectedRuns & length(time_Decomp_steps2716) == expectedRuns){
	result_object_RH2_steps2716 = 3
	result_RH2_steps2716 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.19: Object 3531 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps3531, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps3531 = subset(json_data, treatment == 'Decomp' & object == 'steps3531' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps3531)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps3531')$time)
 
 if(length(time_Decomp_steps3531) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps3531'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps3531')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps3531')$time))
 
 	shap_Decomp_steps3531 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps3531')$time)
 	print(shap_Decomp_steps3531)
 	if(shap_Decomp_steps3531$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps3531$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps3531$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps3531, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps3531 = subset(json_data, treatment == 'Hylaa' & object == 'steps3531' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps3531)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time)
 
 if(length(time_Hylaa_steps3531) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps3531'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps3531')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time))
 
 	shap_Hylaa_steps3531 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time)
 	print(shap_Hylaa_steps3531)
 	if(shap_Hylaa_steps3531$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps3531$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps3531$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps3531, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps3531')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps3531 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 3531 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps3531
 if(length(time_Hylaa_steps3531) == expectedRuns & length(time_Decomp_steps3531) == expectedRuns){
 	result_RH2_steps3531_tTest = FALSE
 	result_RH2_steps3531_wTest = FALSE
 	
 	if(shap_Hylaa_steps3531$p.value > alpha&shap_Decomp_steps3531$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time, subset(json_data,treatment == 'Decomp' & object == 'steps3531')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time, subset(json_data, treatment == 'Decomp' & object == 'steps3531')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps3531_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps3531')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps3531_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps3531_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps3531) == expectedRuns & length(time_Decomp_steps3531) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps3531')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps3531')$time))))
	 if (result_RH2_steps3531_tTest | result_RH2_steps3531_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps3531')$time)){
	   	result_RH2_steps3531 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps3531 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps3531 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps3531 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps3531 = 5
	 	result_RH2_steps3531 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps3531')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps3531')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps3531')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps3531')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps3531')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps3531) != expectedRuns & length(time_Decomp_steps3531) != expectedRuns){
 	result_object_RH2_steps3531 = 4
	result_RH2_steps3531 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps3531) == expectedRuns & length(time_Decomp_steps3531) != expectedRuns){
	result_object_RH2_steps3531 = 2
	result_RH2_steps3531 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps3531) != expectedRuns & length(time_Decomp_steps3531) == expectedRuns){
	result_object_RH2_steps3531 = 3
	result_RH2_steps3531 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.20: Object 4590 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps4590, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps4590 = subset(json_data, treatment == 'Decomp' & object == 'steps4590' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps4590)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps4590')$time)
 
 if(length(time_Decomp_steps4590) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps4590'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps4590')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps4590')$time))
 
 	shap_Decomp_steps4590 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps4590')$time)
 	print(shap_Decomp_steps4590)
 	if(shap_Decomp_steps4590$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps4590$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps4590$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps4590, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps4590 = subset(json_data, treatment == 'Hylaa' & object == 'steps4590' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps4590)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time)
 
 if(length(time_Hylaa_steps4590) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps4590'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps4590')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time))
 
 	shap_Hylaa_steps4590 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time)
 	print(shap_Hylaa_steps4590)
 	if(shap_Hylaa_steps4590$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps4590$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps4590$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps4590, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps4590')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps4590 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 4590 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps4590
 if(length(time_Hylaa_steps4590) == expectedRuns & length(time_Decomp_steps4590) == expectedRuns){
 	result_RH2_steps4590_tTest = FALSE
 	result_RH2_steps4590_wTest = FALSE
 	
 	if(shap_Hylaa_steps4590$p.value > alpha&shap_Decomp_steps4590$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time, subset(json_data,treatment == 'Decomp' & object == 'steps4590')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time, subset(json_data, treatment == 'Decomp' & object == 'steps4590')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps4590_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps4590')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps4590_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps4590_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps4590) == expectedRuns & length(time_Decomp_steps4590) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps4590')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps4590')$time))))
	 if (result_RH2_steps4590_tTest | result_RH2_steps4590_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps4590')$time)){
	   	result_RH2_steps4590 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps4590 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps4590 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps4590 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps4590 = 5
	 	result_RH2_steps4590 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps4590')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps4590')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps4590')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps4590')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps4590')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps4590) != expectedRuns & length(time_Decomp_steps4590) != expectedRuns){
 	result_object_RH2_steps4590 = 4
	result_RH2_steps4590 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps4590) == expectedRuns & length(time_Decomp_steps4590) != expectedRuns){
	result_object_RH2_steps4590 = 2
	result_RH2_steps4590 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps4590) != expectedRuns & length(time_Decomp_steps4590) == expectedRuns){
	result_object_RH2_steps4590 = 3
	result_RH2_steps4590 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.21: Object 5967 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps5967, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps5967 = subset(json_data, treatment == 'Decomp' & object == 'steps5967' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps5967)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps5967')$time)
 
 if(length(time_Decomp_steps5967) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps5967'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps5967')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps5967')$time))
 
 	shap_Decomp_steps5967 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps5967')$time)
 	print(shap_Decomp_steps5967)
 	if(shap_Decomp_steps5967$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps5967$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps5967$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps5967, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps5967 = subset(json_data, treatment == 'Hylaa' & object == 'steps5967' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps5967)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time)
 
 if(length(time_Hylaa_steps5967) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps5967'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps5967')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time))
 
 	shap_Hylaa_steps5967 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time)
 	print(shap_Hylaa_steps5967)
 	if(shap_Hylaa_steps5967$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps5967$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps5967$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps5967, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps5967')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps5967 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 5967 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps5967
 if(length(time_Hylaa_steps5967) == expectedRuns & length(time_Decomp_steps5967) == expectedRuns){
 	result_RH2_steps5967_tTest = FALSE
 	result_RH2_steps5967_wTest = FALSE
 	
 	if(shap_Hylaa_steps5967$p.value > alpha&shap_Decomp_steps5967$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time, subset(json_data,treatment == 'Decomp' & object == 'steps5967')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time, subset(json_data, treatment == 'Decomp' & object == 'steps5967')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps5967_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps5967')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps5967_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps5967_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps5967) == expectedRuns & length(time_Decomp_steps5967) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps5967')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps5967')$time))))
	 if (result_RH2_steps5967_tTest | result_RH2_steps5967_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps5967')$time)){
	   	result_RH2_steps5967 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps5967 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps5967 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps5967 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps5967 = 5
	 	result_RH2_steps5967 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps5967')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps5967')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps5967')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps5967')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps5967')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps5967) != expectedRuns & length(time_Decomp_steps5967) != expectedRuns){
 	result_object_RH2_steps5967 = 4
	result_RH2_steps5967 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps5967) == expectedRuns & length(time_Decomp_steps5967) != expectedRuns){
	result_object_RH2_steps5967 = 2
	result_RH2_steps5967 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps5967) != expectedRuns & length(time_Decomp_steps5967) == expectedRuns){
	result_object_RH2_steps5967 = 3
	result_RH2_steps5967 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.22: Object 7757 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps7757, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps7757 = subset(json_data, treatment == 'Decomp' & object == 'steps7757' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps7757)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps7757')$time)
 
 if(length(time_Decomp_steps7757) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps7757'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps7757')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps7757')$time))
 
 	shap_Decomp_steps7757 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps7757')$time)
 	print(shap_Decomp_steps7757)
 	if(shap_Decomp_steps7757$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps7757$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps7757$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps7757, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps7757 = subset(json_data, treatment == 'Hylaa' & object == 'steps7757' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps7757)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time)
 
 if(length(time_Hylaa_steps7757) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps7757'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps7757')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time))
 
 	shap_Hylaa_steps7757 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time)
 	print(shap_Hylaa_steps7757)
 	if(shap_Hylaa_steps7757$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps7757$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps7757$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps7757, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps7757')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps7757 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 7757 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps7757
 if(length(time_Hylaa_steps7757) == expectedRuns & length(time_Decomp_steps7757) == expectedRuns){
 	result_RH2_steps7757_tTest = FALSE
 	result_RH2_steps7757_wTest = FALSE
 	
 	if(shap_Hylaa_steps7757$p.value > alpha&shap_Decomp_steps7757$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time, subset(json_data,treatment == 'Decomp' & object == 'steps7757')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time, subset(json_data, treatment == 'Decomp' & object == 'steps7757')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps7757_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps7757')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps7757_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps7757_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps7757) == expectedRuns & length(time_Decomp_steps7757) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps7757')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps7757')$time))))
	 if (result_RH2_steps7757_tTest | result_RH2_steps7757_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps7757')$time)){
	   	result_RH2_steps7757 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps7757 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps7757 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps7757 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps7757 = 5
	 	result_RH2_steps7757 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps7757')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps7757')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps7757')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps7757')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps7757')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps7757) != expectedRuns & length(time_Decomp_steps7757) != expectedRuns){
 	result_object_RH2_steps7757 = 4
	result_RH2_steps7757 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps7757) == expectedRuns & length(time_Decomp_steps7757) != expectedRuns){
	result_object_RH2_steps7757 = 2
	result_RH2_steps7757 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps7757) != expectedRuns & length(time_Decomp_steps7757) == expectedRuns){
	result_object_RH2_steps7757 = 3
	result_RH2_steps7757 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.23: Object 10085 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps10085, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps10085 = subset(json_data, treatment == 'Decomp' & object == 'steps10085' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps10085)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps10085')$time)
 
 if(length(time_Decomp_steps10085) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps10085'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps10085')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps10085')$time))
 
 	shap_Decomp_steps10085 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps10085')$time)
 	print(shap_Decomp_steps10085)
 	if(shap_Decomp_steps10085$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps10085$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps10085$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps10085, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps10085 = subset(json_data, treatment == 'Hylaa' & object == 'steps10085' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps10085)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time)
 
 if(length(time_Hylaa_steps10085) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps10085'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps10085')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time))
 
 	shap_Hylaa_steps10085 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time)
 	print(shap_Hylaa_steps10085)
 	if(shap_Hylaa_steps10085$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps10085$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps10085$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps10085, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps10085')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps10085 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 10085 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps10085
 if(length(time_Hylaa_steps10085) == expectedRuns & length(time_Decomp_steps10085) == expectedRuns){
 	result_RH2_steps10085_tTest = FALSE
 	result_RH2_steps10085_wTest = FALSE
 	
 	if(shap_Hylaa_steps10085$p.value > alpha&shap_Decomp_steps10085$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time, subset(json_data,treatment == 'Decomp' & object == 'steps10085')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time, subset(json_data, treatment == 'Decomp' & object == 'steps10085')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps10085_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps10085')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps10085_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps10085_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps10085) == expectedRuns & length(time_Decomp_steps10085) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps10085')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps10085')$time))))
	 if (result_RH2_steps10085_tTest | result_RH2_steps10085_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps10085')$time)){
	   	result_RH2_steps10085 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps10085 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps10085 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps10085 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps10085 = 5
	 	result_RH2_steps10085 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps10085')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps10085')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps10085')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps10085')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps10085')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps10085) != expectedRuns & length(time_Decomp_steps10085) != expectedRuns){
 	result_object_RH2_steps10085 = 4
	result_RH2_steps10085 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps10085) == expectedRuns & length(time_Decomp_steps10085) != expectedRuns){
	result_object_RH2_steps10085 = 2
	result_RH2_steps10085 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps10085) != expectedRuns & length(time_Decomp_steps10085) == expectedRuns){
	result_object_RH2_steps10085 = 3
	result_RH2_steps10085 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.24: Object 13110 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps13110, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps13110 = subset(json_data, treatment == 'Decomp' & object == 'steps13110' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps13110)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps13110')$time)
 
 if(length(time_Decomp_steps13110) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps13110'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps13110')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps13110')$time))
 
 	shap_Decomp_steps13110 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps13110')$time)
 	print(shap_Decomp_steps13110)
 	if(shap_Decomp_steps13110$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps13110$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps13110$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps13110, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps13110 = subset(json_data, treatment == 'Hylaa' & object == 'steps13110' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps13110)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time)
 
 if(length(time_Hylaa_steps13110) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps13110'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps13110')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time))
 
 	shap_Hylaa_steps13110 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time)
 	print(shap_Hylaa_steps13110)
 	if(shap_Hylaa_steps13110$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps13110$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps13110$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps13110, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps13110')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps13110 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 13110 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps13110
 if(length(time_Hylaa_steps13110) == expectedRuns & length(time_Decomp_steps13110) == expectedRuns){
 	result_RH2_steps13110_tTest = FALSE
 	result_RH2_steps13110_wTest = FALSE
 	
 	if(shap_Hylaa_steps13110$p.value > alpha&shap_Decomp_steps13110$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time, subset(json_data,treatment == 'Decomp' & object == 'steps13110')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time, subset(json_data, treatment == 'Decomp' & object == 'steps13110')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps13110_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps13110')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps13110_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps13110_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps13110) == expectedRuns & length(time_Decomp_steps13110) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps13110')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps13110')$time))))
	 if (result_RH2_steps13110_tTest | result_RH2_steps13110_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps13110')$time)){
	   	result_RH2_steps13110 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps13110 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps13110 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps13110 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps13110 = 5
	 	result_RH2_steps13110 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps13110')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps13110')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps13110')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps13110')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps13110')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps13110) != expectedRuns & length(time_Decomp_steps13110) != expectedRuns){
 	result_object_RH2_steps13110 = 4
	result_RH2_steps13110 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps13110) == expectedRuns & length(time_Decomp_steps13110) != expectedRuns){
	result_object_RH2_steps13110 = 2
	result_RH2_steps13110 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps13110) != expectedRuns & length(time_Decomp_steps13110) == expectedRuns){
	result_object_RH2_steps13110 = 3
	result_RH2_steps13110 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.25: Object 17043 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps17043, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps17043 = subset(json_data, treatment == 'Decomp' & object == 'steps17043' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps17043)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps17043')$time)
 
 if(length(time_Decomp_steps17043) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps17043'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps17043')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps17043')$time))
 
 	shap_Decomp_steps17043 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps17043')$time)
 	print(shap_Decomp_steps17043)
 	if(shap_Decomp_steps17043$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps17043$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps17043$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps17043, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps17043 = subset(json_data, treatment == 'Hylaa' & object == 'steps17043' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps17043)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time)
 
 if(length(time_Hylaa_steps17043) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps17043'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps17043')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time))
 
 	shap_Hylaa_steps17043 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time)
 	print(shap_Hylaa_steps17043)
 	if(shap_Hylaa_steps17043$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps17043$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps17043$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps17043, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps17043')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps17043 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 17043 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps17043
 if(length(time_Hylaa_steps17043) == expectedRuns & length(time_Decomp_steps17043) == expectedRuns){
 	result_RH2_steps17043_tTest = FALSE
 	result_RH2_steps17043_wTest = FALSE
 	
 	if(shap_Hylaa_steps17043$p.value > alpha&shap_Decomp_steps17043$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time, subset(json_data,treatment == 'Decomp' & object == 'steps17043')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time, subset(json_data, treatment == 'Decomp' & object == 'steps17043')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps17043_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps17043')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps17043_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps17043_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps17043) == expectedRuns & length(time_Decomp_steps17043) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps17043')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps17043')$time))))
	 if (result_RH2_steps17043_tTest | result_RH2_steps17043_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps17043')$time)){
	   	result_RH2_steps17043 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps17043 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps17043 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps17043 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps17043 = 5
	 	result_RH2_steps17043 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps17043')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps17043')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps17043')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps17043')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps17043')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps17043) != expectedRuns & length(time_Decomp_steps17043) != expectedRuns){
 	result_object_RH2_steps17043 = 4
	result_RH2_steps17043 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps17043) == expectedRuns & length(time_Decomp_steps17043) != expectedRuns){
	result_object_RH2_steps17043 = 2
	result_RH2_steps17043 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps17043) != expectedRuns & length(time_Decomp_steps17043) == expectedRuns){
	result_object_RH2_steps17043 = 3
	result_RH2_steps17043 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.26: Object 22157 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps22157, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps22157 = subset(json_data, treatment == 'Decomp' & object == 'steps22157' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps22157)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps22157')$time)
 
 if(length(time_Decomp_steps22157) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps22157'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps22157')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps22157')$time))
 
 	shap_Decomp_steps22157 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps22157')$time)
 	print(shap_Decomp_steps22157)
 	if(shap_Decomp_steps22157$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps22157$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps22157$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps22157, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps22157 = subset(json_data, treatment == 'Hylaa' & object == 'steps22157' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps22157)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time)
 
 if(length(time_Hylaa_steps22157) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps22157'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps22157')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time))
 
 	shap_Hylaa_steps22157 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time)
 	print(shap_Hylaa_steps22157)
 	if(shap_Hylaa_steps22157$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps22157$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps22157$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps22157, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps22157')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps22157 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 22157 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps22157
 if(length(time_Hylaa_steps22157) == expectedRuns & length(time_Decomp_steps22157) == expectedRuns){
 	result_RH2_steps22157_tTest = FALSE
 	result_RH2_steps22157_wTest = FALSE
 	
 	if(shap_Hylaa_steps22157$p.value > alpha&shap_Decomp_steps22157$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time, subset(json_data,treatment == 'Decomp' & object == 'steps22157')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time, subset(json_data, treatment == 'Decomp' & object == 'steps22157')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps22157_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps22157')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps22157_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps22157_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps22157) == expectedRuns & length(time_Decomp_steps22157) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps22157')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps22157')$time))))
	 if (result_RH2_steps22157_tTest | result_RH2_steps22157_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps22157')$time)){
	   	result_RH2_steps22157 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps22157 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps22157 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps22157 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps22157 = 5
	 	result_RH2_steps22157 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps22157')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps22157')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps22157')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps22157')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps22157')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps22157) != expectedRuns & length(time_Decomp_steps22157) != expectedRuns){
 	result_object_RH2_steps22157 = 4
	result_RH2_steps22157 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps22157) == expectedRuns & length(time_Decomp_steps22157) != expectedRuns){
	result_object_RH2_steps22157 = 2
	result_RH2_steps22157 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps22157) != expectedRuns & length(time_Decomp_steps22157) == expectedRuns){
	result_object_RH2_steps22157 = 3
	result_RH2_steps22157 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.27: Object 28804 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps28804, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps28804 = subset(json_data, treatment == 'Decomp' & object == 'steps28804' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps28804)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps28804')$time)
 
 if(length(time_Decomp_steps28804) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps28804'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps28804')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps28804')$time))
 
 	shap_Decomp_steps28804 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps28804')$time)
 	print(shap_Decomp_steps28804)
 	if(shap_Decomp_steps28804$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps28804$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps28804$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps28804, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps28804 = subset(json_data, treatment == 'Hylaa' & object == 'steps28804' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps28804)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time)
 
 if(length(time_Hylaa_steps28804) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps28804'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps28804')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time))
 
 	shap_Hylaa_steps28804 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time)
 	print(shap_Hylaa_steps28804)
 	if(shap_Hylaa_steps28804$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps28804$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps28804$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps28804, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps28804')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps28804 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 28804 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps28804
 if(length(time_Hylaa_steps28804) == expectedRuns & length(time_Decomp_steps28804) == expectedRuns){
 	result_RH2_steps28804_tTest = FALSE
 	result_RH2_steps28804_wTest = FALSE
 	
 	if(shap_Hylaa_steps28804$p.value > alpha&shap_Decomp_steps28804$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time, subset(json_data,treatment == 'Decomp' & object == 'steps28804')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time, subset(json_data, treatment == 'Decomp' & object == 'steps28804')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps28804_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps28804')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps28804_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps28804_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps28804) == expectedRuns & length(time_Decomp_steps28804) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps28804')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps28804')$time))))
	 if (result_RH2_steps28804_tTest | result_RH2_steps28804_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps28804')$time)){
	   	result_RH2_steps28804 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps28804 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps28804 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps28804 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps28804 = 5
	 	result_RH2_steps28804 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps28804')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps28804')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps28804')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps28804')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps28804')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps28804) != expectedRuns & length(time_Decomp_steps28804) != expectedRuns){
 	result_object_RH2_steps28804 = 4
	result_RH2_steps28804 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps28804) == expectedRuns & length(time_Decomp_steps28804) != expectedRuns){
	result_object_RH2_steps28804 = 2
	result_RH2_steps28804 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps28804) != expectedRuns & length(time_Decomp_steps28804) == expectedRuns){
	result_object_RH2_steps28804 = 3
	result_RH2_steps28804 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.28: Object 37445 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps37445, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps37445 = subset(json_data, treatment == 'Decomp' & object == 'steps37445' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps37445)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps37445')$time)
 
 if(length(time_Decomp_steps37445) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps37445'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps37445')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps37445')$time))
 
 	shap_Decomp_steps37445 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps37445')$time)
 	print(shap_Decomp_steps37445)
 	if(shap_Decomp_steps37445$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps37445$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps37445$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps37445, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps37445 = subset(json_data, treatment == 'Hylaa' & object == 'steps37445' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps37445)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time)
 
 if(length(time_Hylaa_steps37445) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps37445'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps37445')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time))
 
 	shap_Hylaa_steps37445 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time)
 	print(shap_Hylaa_steps37445)
 	if(shap_Hylaa_steps37445$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps37445$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps37445$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps37445, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps37445')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps37445 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 37445 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps37445
 if(length(time_Hylaa_steps37445) == expectedRuns & length(time_Decomp_steps37445) == expectedRuns){
 	result_RH2_steps37445_tTest = FALSE
 	result_RH2_steps37445_wTest = FALSE
 	
 	if(shap_Hylaa_steps37445$p.value > alpha&shap_Decomp_steps37445$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time, subset(json_data,treatment == 'Decomp' & object == 'steps37445')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time, subset(json_data, treatment == 'Decomp' & object == 'steps37445')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps37445_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps37445')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps37445_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps37445_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps37445) == expectedRuns & length(time_Decomp_steps37445) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps37445')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps37445')$time))))
	 if (result_RH2_steps37445_tTest | result_RH2_steps37445_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps37445')$time)){
	   	result_RH2_steps37445 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps37445 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps37445 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps37445 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps37445 = 5
	 	result_RH2_steps37445 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps37445')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps37445')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps37445')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps37445')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps37445')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps37445) != expectedRuns & length(time_Decomp_steps37445) != expectedRuns){
 	result_object_RH2_steps37445 = 4
	result_RH2_steps37445 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps37445) == expectedRuns & length(time_Decomp_steps37445) != expectedRuns){
	result_object_RH2_steps37445 = 2
	result_RH2_steps37445 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps37445) != expectedRuns & length(time_Decomp_steps37445) == expectedRuns){
	result_object_RH2_steps37445 = 3
	result_RH2_steps37445 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.29: Object 48679 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps48679, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps48679 = subset(json_data, treatment == 'Decomp' & object == 'steps48679' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps48679)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps48679')$time)
 
 if(length(time_Decomp_steps48679) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps48679'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps48679')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps48679')$time))
 
 	shap_Decomp_steps48679 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps48679')$time)
 	print(shap_Decomp_steps48679)
 	if(shap_Decomp_steps48679$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps48679$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps48679$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps48679, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps48679 = subset(json_data, treatment == 'Hylaa' & object == 'steps48679' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps48679)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time)
 
 if(length(time_Hylaa_steps48679) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps48679'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps48679')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time))
 
 	shap_Hylaa_steps48679 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time)
 	print(shap_Hylaa_steps48679)
 	if(shap_Hylaa_steps48679$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps48679$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps48679$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps48679, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps48679')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps48679 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 48679 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps48679
 if(length(time_Hylaa_steps48679) == expectedRuns & length(time_Decomp_steps48679) == expectedRuns){
 	result_RH2_steps48679_tTest = FALSE
 	result_RH2_steps48679_wTest = FALSE
 	
 	if(shap_Hylaa_steps48679$p.value > alpha&shap_Decomp_steps48679$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time, subset(json_data,treatment == 'Decomp' & object == 'steps48679')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time, subset(json_data, treatment == 'Decomp' & object == 'steps48679')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps48679_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps48679')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps48679_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps48679_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps48679) == expectedRuns & length(time_Decomp_steps48679) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps48679')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps48679')$time))))
	 if (result_RH2_steps48679_tTest | result_RH2_steps48679_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps48679')$time)){
	   	result_RH2_steps48679 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps48679 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps48679 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps48679 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps48679 = 5
	 	result_RH2_steps48679 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps48679')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps48679')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps48679')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps48679')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps48679')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps48679) != expectedRuns & length(time_Decomp_steps48679) != expectedRuns){
 	result_object_RH2_steps48679 = 4
	result_RH2_steps48679 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps48679) == expectedRuns & length(time_Decomp_steps48679) != expectedRuns){
	result_object_RH2_steps48679 = 2
	result_RH2_steps48679 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps48679) != expectedRuns & length(time_Decomp_steps48679) == expectedRuns){
	result_object_RH2_steps48679 = 3
	result_RH2_steps48679 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.30: Object 63282 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps63282, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps63282 = subset(json_data, treatment == 'Decomp' & object == 'steps63282' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps63282)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps63282')$time)
 
 if(length(time_Decomp_steps63282) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps63282'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps63282')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps63282')$time))
 
 	shap_Decomp_steps63282 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps63282')$time)
 	print(shap_Decomp_steps63282)
 	if(shap_Decomp_steps63282$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps63282$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps63282$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps63282, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps63282 = subset(json_data, treatment == 'Hylaa' & object == 'steps63282' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps63282)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time)
 
 if(length(time_Hylaa_steps63282) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps63282'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps63282')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time))
 
 	shap_Hylaa_steps63282 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time)
 	print(shap_Hylaa_steps63282)
 	if(shap_Hylaa_steps63282$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps63282$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps63282$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps63282, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps63282')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps63282 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 63282 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps63282
 if(length(time_Hylaa_steps63282) == expectedRuns & length(time_Decomp_steps63282) == expectedRuns){
 	result_RH2_steps63282_tTest = FALSE
 	result_RH2_steps63282_wTest = FALSE
 	
 	if(shap_Hylaa_steps63282$p.value > alpha&shap_Decomp_steps63282$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time, subset(json_data,treatment == 'Decomp' & object == 'steps63282')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time, subset(json_data, treatment == 'Decomp' & object == 'steps63282')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps63282_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps63282')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps63282_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps63282_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps63282) == expectedRuns & length(time_Decomp_steps63282) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps63282')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps63282')$time))))
	 if (result_RH2_steps63282_tTest | result_RH2_steps63282_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps63282')$time)){
	   	result_RH2_steps63282 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps63282 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps63282 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps63282 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps63282 = 5
	 	result_RH2_steps63282 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps63282')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps63282')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps63282')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps63282')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps63282')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps63282) != expectedRuns & length(time_Decomp_steps63282) != expectedRuns){
 	result_object_RH2_steps63282 = 4
	result_RH2_steps63282 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps63282) == expectedRuns & length(time_Decomp_steps63282) != expectedRuns){
	result_object_RH2_steps63282 = 2
	result_RH2_steps63282 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps63282) != expectedRuns & length(time_Decomp_steps63282) == expectedRuns){
	result_object_RH2_steps63282 = 3
	result_RH2_steps63282 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.31: Object 82267 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps82267, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps82267 = subset(json_data, treatment == 'Decomp' & object == 'steps82267' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps82267)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps82267')$time)
 
 if(length(time_Decomp_steps82267) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps82267'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps82267')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps82267')$time))
 
 	shap_Decomp_steps82267 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps82267')$time)
 	print(shap_Decomp_steps82267)
 	if(shap_Decomp_steps82267$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps82267$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps82267$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps82267, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps82267 = subset(json_data, treatment == 'Hylaa' & object == 'steps82267' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps82267)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time)
 
 if(length(time_Hylaa_steps82267) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps82267'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps82267')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time))
 
 	shap_Hylaa_steps82267 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time)
 	print(shap_Hylaa_steps82267)
 	if(shap_Hylaa_steps82267$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps82267$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps82267$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps82267, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps82267')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps82267 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 82267 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps82267
 if(length(time_Hylaa_steps82267) == expectedRuns & length(time_Decomp_steps82267) == expectedRuns){
 	result_RH2_steps82267_tTest = FALSE
 	result_RH2_steps82267_wTest = FALSE
 	
 	if(shap_Hylaa_steps82267$p.value > alpha&shap_Decomp_steps82267$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time, subset(json_data,treatment == 'Decomp' & object == 'steps82267')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time, subset(json_data, treatment == 'Decomp' & object == 'steps82267')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps82267_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps82267')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps82267_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps82267_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps82267) == expectedRuns & length(time_Decomp_steps82267) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps82267')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps82267')$time))))
	 if (result_RH2_steps82267_tTest | result_RH2_steps82267_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps82267')$time)){
	   	result_RH2_steps82267 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps82267 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps82267 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps82267 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps82267 = 5
	 	result_RH2_steps82267 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps82267')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps82267')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps82267')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps82267')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps82267')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps82267) != expectedRuns & length(time_Decomp_steps82267) != expectedRuns){
 	result_object_RH2_steps82267 = 4
	result_RH2_steps82267 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps82267) == expectedRuns & length(time_Decomp_steps82267) != expectedRuns){
	result_object_RH2_steps82267 = 2
	result_RH2_steps82267 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps82267) != expectedRuns & length(time_Decomp_steps82267) == expectedRuns){
	result_object_RH2_steps82267 = 3
	result_RH2_steps82267 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.32: Object 106948 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps106948, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps106948 = subset(json_data, treatment == 'Decomp' & object == 'steps106948' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps106948)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps106948')$time)
 
 if(length(time_Decomp_steps106948) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps106948'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps106948')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps106948')$time))
 
 	shap_Decomp_steps106948 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps106948')$time)
 	print(shap_Decomp_steps106948)
 	if(shap_Decomp_steps106948$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps106948$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps106948$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps106948, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps106948 = subset(json_data, treatment == 'Hylaa' & object == 'steps106948' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps106948)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time)
 
 if(length(time_Hylaa_steps106948) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps106948'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps106948')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time))
 
 	shap_Hylaa_steps106948 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time)
 	print(shap_Hylaa_steps106948)
 	if(shap_Hylaa_steps106948$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps106948$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps106948$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps106948, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps106948')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps106948 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 106948 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps106948
 if(length(time_Hylaa_steps106948) == expectedRuns & length(time_Decomp_steps106948) == expectedRuns){
 	result_RH2_steps106948_tTest = FALSE
 	result_RH2_steps106948_wTest = FALSE
 	
 	if(shap_Hylaa_steps106948$p.value > alpha&shap_Decomp_steps106948$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time, subset(json_data,treatment == 'Decomp' & object == 'steps106948')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time, subset(json_data, treatment == 'Decomp' & object == 'steps106948')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps106948_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps106948')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps106948_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps106948_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps106948) == expectedRuns & length(time_Decomp_steps106948) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps106948')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps106948')$time))))
	 if (result_RH2_steps106948_tTest | result_RH2_steps106948_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps106948')$time)){
	   	result_RH2_steps106948 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps106948 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps106948 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps106948 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps106948 = 5
	 	result_RH2_steps106948 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps106948')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps106948')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps106948')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps106948')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps106948')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps106948) != expectedRuns & length(time_Decomp_steps106948) != expectedRuns){
 	result_object_RH2_steps106948 = 4
	result_RH2_steps106948 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps106948) == expectedRuns & length(time_Decomp_steps106948) != expectedRuns){
	result_object_RH2_steps106948 = 2
	result_RH2_steps106948 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps106948) != expectedRuns & length(time_Decomp_steps106948) == expectedRuns){
	result_object_RH2_steps106948 = 3
	result_RH2_steps106948 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.33: Object 139032 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps139032, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps139032 = subset(json_data, treatment == 'Decomp' & object == 'steps139032' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps139032)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps139032')$time)
 
 if(length(time_Decomp_steps139032) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps139032'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps139032')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps139032')$time))
 
 	shap_Decomp_steps139032 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps139032')$time)
 	print(shap_Decomp_steps139032)
 	if(shap_Decomp_steps139032$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps139032$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps139032$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps139032, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps139032 = subset(json_data, treatment == 'Hylaa' & object == 'steps139032' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps139032)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time)
 
 if(length(time_Hylaa_steps139032) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps139032'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps139032')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time))
 
 	shap_Hylaa_steps139032 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time)
 	print(shap_Hylaa_steps139032)
 	if(shap_Hylaa_steps139032$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps139032$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps139032$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps139032, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps139032')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps139032 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 139032 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps139032
 if(length(time_Hylaa_steps139032) == expectedRuns & length(time_Decomp_steps139032) == expectedRuns){
 	result_RH2_steps139032_tTest = FALSE
 	result_RH2_steps139032_wTest = FALSE
 	
 	if(shap_Hylaa_steps139032$p.value > alpha&shap_Decomp_steps139032$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time, subset(json_data,treatment == 'Decomp' & object == 'steps139032')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time, subset(json_data, treatment == 'Decomp' & object == 'steps139032')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps139032_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps139032')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps139032_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps139032_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps139032) == expectedRuns & length(time_Decomp_steps139032) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps139032')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps139032')$time))))
	 if (result_RH2_steps139032_tTest | result_RH2_steps139032_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps139032')$time)){
	   	result_RH2_steps139032 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps139032 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps139032 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps139032 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps139032 = 5
	 	result_RH2_steps139032 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps139032')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps139032')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps139032')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps139032')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps139032')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps139032) != expectedRuns & length(time_Decomp_steps139032) != expectedRuns){
 	result_object_RH2_steps139032 = 4
	result_RH2_steps139032 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps139032) == expectedRuns & length(time_Decomp_steps139032) != expectedRuns){
	result_object_RH2_steps139032 = 2
	result_RH2_steps139032 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps139032) != expectedRuns & length(time_Decomp_steps139032) == expectedRuns){
	result_object_RH2_steps139032 = 3
	result_RH2_steps139032 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


\subsubsection{RH2.34: Object 180742 steps}

 \textbf{Runtime for Decomp}
 <<RH2_Decomp_steps180742, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Decomp_steps180742 = subset(json_data, treatment == 'Decomp' & object == 'steps180742' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Decomp_steps180742)))					
 summary(subset(json_data, treatment == 'Decomp' & object == 'steps180742')$time)
 
 if(length(time_Decomp_steps180742) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Decomp' & object == 'steps180742'), "time", min(subset(json_data, treatment == 'Decomp'& object == 'steps180742')$time), max(subset(json_data, treatment == 'Decomp' & object == 'steps180742')$time))
 
 	shap_Decomp_steps180742 = shapiro.test(subset(json_data, treatment == 'Decomp' & object == 'steps180742')$time)
 	print(shap_Decomp_steps180742)
 	if(shap_Decomp_steps180742$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Decomp_steps180742$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Decomp_steps180742$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH2_Hylaa_steps180742, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps180742 = subset(json_data, treatment == 'Hylaa' & object == 'steps180742' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps180742)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time)
 
 if(length(time_Hylaa_steps180742) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps180742'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps180742')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time))
 
 	shap_Hylaa_steps180742 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time)
 	print(shap_Hylaa_steps180742)
 	if(shap_Hylaa_steps180742$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps180742$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps180742$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_steps180742, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps180742')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH2_steps180742 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 180742 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH2_steps180742
 if(length(time_Hylaa_steps180742) == expectedRuns & length(time_Decomp_steps180742) == expectedRuns){
 	result_RH2_steps180742_tTest = FALSE
 	result_RH2_steps180742_wTest = FALSE
 	
 	if(shap_Hylaa_steps180742$p.value > alpha&shap_Decomp_steps180742$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time, subset(json_data,treatment == 'Decomp' & object == 'steps180742')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time, subset(json_data, treatment == 'Decomp' & object == 'steps180742')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_steps180742_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Decomp') & object == 'steps180742')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps180742_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_steps180742_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps180742) == expectedRuns & length(time_Decomp_steps180742) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time)))
	 print(paste("Mean Runtime for Decomp: ", mean(subset(json_data, treatment == 'Decomp' & object == 'steps180742')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time) - mean(subset(json_data, treatment == 'Decomp' & object == 'steps180742')$time))))
	 if (result_RH2_steps180742_tTest | result_RH2_steps180742_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps180742')$time)){
	   	result_RH2_steps180742 = "Hylaa \\textgreater{} Decomp"
	   	result_object_RH2_steps180742 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_steps180742 = "Hylaa \\textless{} Decomp"
	   	result_object_RH2_steps180742 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_steps180742 = 5
	 	result_RH2_steps180742 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps180742')$time) > mean(subset(json_data, treatment == 'Decomp' & object == 'steps180742')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps180742')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time)) / mean(subset(json_data, treatment == 'Decomp' & object == 'steps180742')$time)), "% greater than \n Runtime for Decomp"))				
	 }else{
	     cat(paste("Runtime for Decomp is ", 100 * (abs(mean(subset(json_data, treatment == 'Decomp' & object == 'steps180742')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps180742) != expectedRuns & length(time_Decomp_steps180742) != expectedRuns){
 	result_object_RH2_steps180742 = 4
	result_RH2_steps180742 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(time_Hylaa_steps180742) == expectedRuns & length(time_Decomp_steps180742) != expectedRuns){
	result_object_RH2_steps180742 = 2
	result_RH2_steps180742 = "Hylaa"
	result_RH2_Hylaa = result_RH2_Hylaa + 1			
}
if (length(time_Hylaa_steps180742) != expectedRuns & length(time_Decomp_steps180742) == expectedRuns){
	result_object_RH2_steps180742 = 3
	result_RH2_steps180742 = "Decomp"
	result_RH2_Decomp = result_RH2_Decomp + 1			
}
@  


 
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH2_result = list(hypothesis = "RH2", results = c(result_RH2_less / result_RH2_objects, result_RH2_greater / result_RH2_objects, result_RH2_Hylaa / result_RH2_objects, result_RH2_Decomp / result_RH2_objects, result_RH2_none / result_RH2_objects, result_RH2_inconclusive / result_RH2_objects), objectResults = list( list(object = 'steps31', result = result_object_RH2_steps31),  list(object = 'steps40', result = result_object_RH2_steps40),  list(object = 'steps53', result = result_object_RH2_steps53),  list(object = 'steps68', result = result_object_RH2_steps68),  list(object = 'steps89', result = result_object_RH2_steps89),  list(object = 'steps116', result = result_object_RH2_steps116),  list(object = 'steps151', result = result_object_RH2_steps151),  list(object = 'steps197', result = result_object_RH2_steps197),  list(object = 'steps256', result = result_object_RH2_steps256),  list(object = 'steps332', result = result_object_RH2_steps332),  list(object = 'steps432', result = result_object_RH2_steps432),  list(object = 'steps562', result = result_object_RH2_steps562),  list(object = 'steps731', result = result_object_RH2_steps731),  list(object = 'steps951', result = result_object_RH2_steps951),  list(object = 'steps1236', result = result_object_RH2_steps1236),  list(object = 'steps1607', result = result_object_RH2_steps1607),  list(object = 'steps2089', result = result_object_RH2_steps2089),  list(object = 'steps2716', result = result_object_RH2_steps2716),  list(object = 'steps3531', result = result_object_RH2_steps3531),  list(object = 'steps4590', result = result_object_RH2_steps4590),  list(object = 'steps5967', result = result_object_RH2_steps5967),  list(object = 'steps7757', result = result_object_RH2_steps7757),  list(object = 'steps10085', result = result_object_RH2_steps10085),  list(object = 'steps13110', result = result_object_RH2_steps13110),  list(object = 'steps17043', result = result_object_RH2_steps17043),  list(object = 'steps22157', result = result_object_RH2_steps22157),  list(object = 'steps28804', result = result_object_RH2_steps28804),  list(object = 'steps37445', result = result_object_RH2_steps37445),  list(object = 'steps48679', result = result_object_RH2_steps48679),  list(object = 'steps63282', result = result_object_RH2_steps63282),  list(object = 'steps82267', result = result_object_RH2_steps82267),  list(object = 'steps106948', result = result_object_RH2_steps106948),  list(object = 'steps139032', result = result_object_RH2_steps139032),  list(object = 'steps180742', result = result_object_RH2_steps180742) ))	
	@
	
	\subsubsection{RH2 Results: Runtime Hylaa = Decomp}
	
	
	\begin{table}[H]
	\centering
	\caption{RH2 Results per Object}
	\begin{tabular}{ll}
	\textbf{31 steps} & \Sexpr{result_RH2_steps31} \\
	\textbf{40 steps} & \Sexpr{result_RH2_steps40} \\
	\textbf{53 steps} & \Sexpr{result_RH2_steps53} \\
	\textbf{68 steps} & \Sexpr{result_RH2_steps68} \\
	\textbf{89 steps} & \Sexpr{result_RH2_steps89} \\
	\textbf{116 steps} & \Sexpr{result_RH2_steps116} \\
	\textbf{151 steps} & \Sexpr{result_RH2_steps151} \\
	\textbf{197 steps} & \Sexpr{result_RH2_steps197} \\
	\textbf{256 steps} & \Sexpr{result_RH2_steps256} \\
	\textbf{332 steps} & \Sexpr{result_RH2_steps332} \\
	\textbf{432 steps} & \Sexpr{result_RH2_steps432} \\
	\textbf{562 steps} & \Sexpr{result_RH2_steps562} \\
	\textbf{731 steps} & \Sexpr{result_RH2_steps731} \\
	\textbf{951 steps} & \Sexpr{result_RH2_steps951} \\
	\textbf{1236 steps} & \Sexpr{result_RH2_steps1236} \\
	\textbf{1607 steps} & \Sexpr{result_RH2_steps1607} \\
	\textbf{2089 steps} & \Sexpr{result_RH2_steps2089} \\
	\textbf{2716 steps} & \Sexpr{result_RH2_steps2716} \\
	\textbf{3531 steps} & \Sexpr{result_RH2_steps3531} \\
	\textbf{4590 steps} & \Sexpr{result_RH2_steps4590} \\
	\textbf{5967 steps} & \Sexpr{result_RH2_steps5967} \\
	\textbf{7757 steps} & \Sexpr{result_RH2_steps7757} \\
	\textbf{10085 steps} & \Sexpr{result_RH2_steps10085} \\
	\textbf{13110 steps} & \Sexpr{result_RH2_steps13110} \\
	\textbf{17043 steps} & \Sexpr{result_RH2_steps17043} \\
	\textbf{22157 steps} & \Sexpr{result_RH2_steps22157} \\
	\textbf{28804 steps} & \Sexpr{result_RH2_steps28804} \\
	\textbf{37445 steps} & \Sexpr{result_RH2_steps37445} \\
	\textbf{48679 steps} & \Sexpr{result_RH2_steps48679} \\
	\textbf{63282 steps} & \Sexpr{result_RH2_steps63282} \\
	\textbf{82267 steps} & \Sexpr{result_RH2_steps82267} \\
	\textbf{106948 steps} & \Sexpr{result_RH2_steps106948} \\
	\textbf{139032 steps} & \Sexpr{result_RH2_steps139032} \\
	\textbf{180742 steps} & \Sexpr{result_RH2_steps180742} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH2 Results Summary}
	\begin{tabular}{ll}
	\textbf{Hylaa \textless{} Decomp:}& \Sexpr{100 * result_RH2_less / result_RH2_objects}\% \\
	\textbf{Hylaa \textgreater{} Decomp:}& \Sexpr{100 * result_RH2_greater / result_RH2_objects}\%\\
	\textbf{Hylaa:} & \Sexpr{100 * result_RH2_Hylaa / result_RH2_objects}\%\\
	\textbf{Decomp:} & \Sexpr{100 * result_RH2_Decomp / result_RH2_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH2_none / result_RH2_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH2_inconclusive / result_RH2_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	



\subsection{RH3: Runtime time for Hylaa is equals than runtime time for Basic}

 <<RH3, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 
 result_RH3_objects=34
 result_RH3_less=0
 result_RH3_greater=0
 result_RH3_Hylaa=0
 result_RH3_Basic=0
 result_RH3_none=0
 result_RH3_inconclusive=0
 @
 
 <<overview_RH3, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 DF <- data_summary(subset(json_data, (object == 'steps31' |object == 'steps40' |object == 'steps53' |object == 'steps68' |object == 'steps89' |object == 'steps116' |object == 'steps151' |object == 'steps197' |object == 'steps256' |object == 'steps332' |object == 'steps432' |object == 'steps562' |object == 'steps731' |object == 'steps951' |object == 'steps1236' |object == 'steps1607' |object == 'steps2089' |object == 'steps2716' |object == 'steps3531' |object == 'steps4590' |object == 'steps5967' |object == 'steps7757' |object == 'steps10085' |object == 'steps13110' |object == 'steps17043' |object == 'steps22157' |object == 'steps28804' |object == 'steps37445' |object == 'steps48679' |object == 'steps63282' |object == 'steps82267' |object == 'steps106948' |object == 'steps139032' |object == 'steps180742' ) & (treatment == 'Hylaa' | treatment == 'Basic')), varname = "time", groupnames = c("treatmentDescription", "objectLabel", "objectOrder"))
 		
 		ggplot(DF, aes(x=objectLabel, y=time, group=treatmentDescription, color=treatmentDescription)) + 
 		    geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1, linetype=3) +
 		    geom_line() + geom_point()+
 		   scale_color_brewer(palette="Paired") +
 		   theme_bw() +
 		  scale_x_log10(name = "Number of steps(log scale)", breaks_log(data=DF$objectLabel,steps=10))+
 		  
 		  scale_y_continuous(name = "Runtime (seconds)")+
 		  ggtitle("Runtime Overview") + 
 		  theme(legend.title = element_blank())	
 @
 	

\subsubsection{RH3.1: Object 31 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps31, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps31 = subset(json_data, treatment == 'Basic' & object == 'steps31' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps31)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps31')$time)
 
 if(length(time_Basic_steps31) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps31'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps31')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps31')$time))
 
 	shap_Basic_steps31 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps31')$time)
 	print(shap_Basic_steps31)
 	if(shap_Basic_steps31$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps31$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps31$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps31, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps31 = subset(json_data, treatment == 'Hylaa' & object == 'steps31' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps31)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time)
 
 if(length(time_Hylaa_steps31) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps31'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps31')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time))
 
 	shap_Hylaa_steps31 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time)
 	print(shap_Hylaa_steps31)
 	if(shap_Hylaa_steps31$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps31$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps31$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps31, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps31')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps31 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 31 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps31
 if(length(time_Hylaa_steps31) == expectedRuns & length(time_Basic_steps31) == expectedRuns){
 	result_RH3_steps31_tTest = FALSE
 	result_RH3_steps31_wTest = FALSE
 	
 	if(shap_Hylaa_steps31$p.value > alpha&shap_Basic_steps31$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time, subset(json_data,treatment == 'Basic' & object == 'steps31')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time, subset(json_data, treatment == 'Basic' & object == 'steps31')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps31_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps31')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps31_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps31_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps31) == expectedRuns & length(time_Basic_steps31) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps31')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps31')$time))))
	 if (result_RH3_steps31_tTest | result_RH3_steps31_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps31')$time)){
	   	result_RH3_steps31 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps31 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps31 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps31 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps31 = 5
	 	result_RH3_steps31 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps31')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps31')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps31')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps31')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps31')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps31) != expectedRuns & length(time_Basic_steps31) != expectedRuns){
 	result_object_RH3_steps31 = 4
	result_RH3_steps31 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps31) == expectedRuns & length(time_Basic_steps31) != expectedRuns){
	result_object_RH3_steps31 = 2
	result_RH3_steps31 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps31) != expectedRuns & length(time_Basic_steps31) == expectedRuns){
	result_object_RH3_steps31 = 3
	result_RH3_steps31 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.2: Object 40 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps40, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps40 = subset(json_data, treatment == 'Basic' & object == 'steps40' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps40)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps40')$time)
 
 if(length(time_Basic_steps40) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps40'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps40')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps40')$time))
 
 	shap_Basic_steps40 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps40')$time)
 	print(shap_Basic_steps40)
 	if(shap_Basic_steps40$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps40$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps40$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps40, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps40 = subset(json_data, treatment == 'Hylaa' & object == 'steps40' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps40)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time)
 
 if(length(time_Hylaa_steps40) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps40'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps40')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time))
 
 	shap_Hylaa_steps40 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time)
 	print(shap_Hylaa_steps40)
 	if(shap_Hylaa_steps40$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps40$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps40$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps40, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps40')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps40 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 40 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps40
 if(length(time_Hylaa_steps40) == expectedRuns & length(time_Basic_steps40) == expectedRuns){
 	result_RH3_steps40_tTest = FALSE
 	result_RH3_steps40_wTest = FALSE
 	
 	if(shap_Hylaa_steps40$p.value > alpha&shap_Basic_steps40$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time, subset(json_data,treatment == 'Basic' & object == 'steps40')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time, subset(json_data, treatment == 'Basic' & object == 'steps40')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps40_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps40')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps40_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps40_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps40) == expectedRuns & length(time_Basic_steps40) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps40')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps40')$time))))
	 if (result_RH3_steps40_tTest | result_RH3_steps40_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps40')$time)){
	   	result_RH3_steps40 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps40 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps40 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps40 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps40 = 5
	 	result_RH3_steps40 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps40')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps40')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps40')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps40')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps40')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps40) != expectedRuns & length(time_Basic_steps40) != expectedRuns){
 	result_object_RH3_steps40 = 4
	result_RH3_steps40 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps40) == expectedRuns & length(time_Basic_steps40) != expectedRuns){
	result_object_RH3_steps40 = 2
	result_RH3_steps40 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps40) != expectedRuns & length(time_Basic_steps40) == expectedRuns){
	result_object_RH3_steps40 = 3
	result_RH3_steps40 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.3: Object 53 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps53, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps53 = subset(json_data, treatment == 'Basic' & object == 'steps53' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps53)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps53')$time)
 
 if(length(time_Basic_steps53) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps53'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps53')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps53')$time))
 
 	shap_Basic_steps53 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps53')$time)
 	print(shap_Basic_steps53)
 	if(shap_Basic_steps53$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps53$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps53$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps53, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps53 = subset(json_data, treatment == 'Hylaa' & object == 'steps53' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps53)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time)
 
 if(length(time_Hylaa_steps53) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps53'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps53')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time))
 
 	shap_Hylaa_steps53 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time)
 	print(shap_Hylaa_steps53)
 	if(shap_Hylaa_steps53$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps53$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps53$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps53, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps53')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps53 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 53 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps53
 if(length(time_Hylaa_steps53) == expectedRuns & length(time_Basic_steps53) == expectedRuns){
 	result_RH3_steps53_tTest = FALSE
 	result_RH3_steps53_wTest = FALSE
 	
 	if(shap_Hylaa_steps53$p.value > alpha&shap_Basic_steps53$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time, subset(json_data,treatment == 'Basic' & object == 'steps53')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time, subset(json_data, treatment == 'Basic' & object == 'steps53')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps53_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps53')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps53_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps53_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps53) == expectedRuns & length(time_Basic_steps53) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps53')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps53')$time))))
	 if (result_RH3_steps53_tTest | result_RH3_steps53_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps53')$time)){
	   	result_RH3_steps53 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps53 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps53 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps53 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps53 = 5
	 	result_RH3_steps53 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps53')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps53')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps53')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps53')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps53')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps53) != expectedRuns & length(time_Basic_steps53) != expectedRuns){
 	result_object_RH3_steps53 = 4
	result_RH3_steps53 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps53) == expectedRuns & length(time_Basic_steps53) != expectedRuns){
	result_object_RH3_steps53 = 2
	result_RH3_steps53 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps53) != expectedRuns & length(time_Basic_steps53) == expectedRuns){
	result_object_RH3_steps53 = 3
	result_RH3_steps53 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.4: Object 68 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps68, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps68 = subset(json_data, treatment == 'Basic' & object == 'steps68' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps68)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps68')$time)
 
 if(length(time_Basic_steps68) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps68'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps68')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps68')$time))
 
 	shap_Basic_steps68 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps68')$time)
 	print(shap_Basic_steps68)
 	if(shap_Basic_steps68$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps68$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps68$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps68, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps68 = subset(json_data, treatment == 'Hylaa' & object == 'steps68' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps68)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time)
 
 if(length(time_Hylaa_steps68) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps68'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps68')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time))
 
 	shap_Hylaa_steps68 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time)
 	print(shap_Hylaa_steps68)
 	if(shap_Hylaa_steps68$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps68$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps68$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps68, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps68')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps68 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 68 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps68
 if(length(time_Hylaa_steps68) == expectedRuns & length(time_Basic_steps68) == expectedRuns){
 	result_RH3_steps68_tTest = FALSE
 	result_RH3_steps68_wTest = FALSE
 	
 	if(shap_Hylaa_steps68$p.value > alpha&shap_Basic_steps68$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time, subset(json_data,treatment == 'Basic' & object == 'steps68')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time, subset(json_data, treatment == 'Basic' & object == 'steps68')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps68_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps68')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps68_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps68_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps68) == expectedRuns & length(time_Basic_steps68) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps68')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps68')$time))))
	 if (result_RH3_steps68_tTest | result_RH3_steps68_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps68')$time)){
	   	result_RH3_steps68 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps68 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps68 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps68 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps68 = 5
	 	result_RH3_steps68 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps68')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps68')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps68')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps68')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps68')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps68) != expectedRuns & length(time_Basic_steps68) != expectedRuns){
 	result_object_RH3_steps68 = 4
	result_RH3_steps68 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps68) == expectedRuns & length(time_Basic_steps68) != expectedRuns){
	result_object_RH3_steps68 = 2
	result_RH3_steps68 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps68) != expectedRuns & length(time_Basic_steps68) == expectedRuns){
	result_object_RH3_steps68 = 3
	result_RH3_steps68 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.5: Object 89 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps89, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps89 = subset(json_data, treatment == 'Basic' & object == 'steps89' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps89)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps89')$time)
 
 if(length(time_Basic_steps89) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps89'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps89')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps89')$time))
 
 	shap_Basic_steps89 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps89')$time)
 	print(shap_Basic_steps89)
 	if(shap_Basic_steps89$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps89$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps89$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps89, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps89 = subset(json_data, treatment == 'Hylaa' & object == 'steps89' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps89)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time)
 
 if(length(time_Hylaa_steps89) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps89'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps89')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time))
 
 	shap_Hylaa_steps89 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time)
 	print(shap_Hylaa_steps89)
 	if(shap_Hylaa_steps89$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps89$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps89$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps89, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps89')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps89 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 89 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps89
 if(length(time_Hylaa_steps89) == expectedRuns & length(time_Basic_steps89) == expectedRuns){
 	result_RH3_steps89_tTest = FALSE
 	result_RH3_steps89_wTest = FALSE
 	
 	if(shap_Hylaa_steps89$p.value > alpha&shap_Basic_steps89$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time, subset(json_data,treatment == 'Basic' & object == 'steps89')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time, subset(json_data, treatment == 'Basic' & object == 'steps89')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps89_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps89')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps89_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps89_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps89) == expectedRuns & length(time_Basic_steps89) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps89')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps89')$time))))
	 if (result_RH3_steps89_tTest | result_RH3_steps89_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps89')$time)){
	   	result_RH3_steps89 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps89 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps89 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps89 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps89 = 5
	 	result_RH3_steps89 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps89')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps89')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps89')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps89')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps89')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps89) != expectedRuns & length(time_Basic_steps89) != expectedRuns){
 	result_object_RH3_steps89 = 4
	result_RH3_steps89 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps89) == expectedRuns & length(time_Basic_steps89) != expectedRuns){
	result_object_RH3_steps89 = 2
	result_RH3_steps89 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps89) != expectedRuns & length(time_Basic_steps89) == expectedRuns){
	result_object_RH3_steps89 = 3
	result_RH3_steps89 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.6: Object 116 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps116, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps116 = subset(json_data, treatment == 'Basic' & object == 'steps116' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps116)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps116')$time)
 
 if(length(time_Basic_steps116) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps116'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps116')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps116')$time))
 
 	shap_Basic_steps116 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps116')$time)
 	print(shap_Basic_steps116)
 	if(shap_Basic_steps116$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps116$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps116$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps116, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps116 = subset(json_data, treatment == 'Hylaa' & object == 'steps116' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps116)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time)
 
 if(length(time_Hylaa_steps116) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps116'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps116')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time))
 
 	shap_Hylaa_steps116 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time)
 	print(shap_Hylaa_steps116)
 	if(shap_Hylaa_steps116$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps116$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps116$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps116, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps116')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps116 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 116 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps116
 if(length(time_Hylaa_steps116) == expectedRuns & length(time_Basic_steps116) == expectedRuns){
 	result_RH3_steps116_tTest = FALSE
 	result_RH3_steps116_wTest = FALSE
 	
 	if(shap_Hylaa_steps116$p.value > alpha&shap_Basic_steps116$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time, subset(json_data,treatment == 'Basic' & object == 'steps116')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time, subset(json_data, treatment == 'Basic' & object == 'steps116')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps116_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps116')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps116_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps116_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps116) == expectedRuns & length(time_Basic_steps116) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps116')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps116')$time))))
	 if (result_RH3_steps116_tTest | result_RH3_steps116_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps116')$time)){
	   	result_RH3_steps116 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps116 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps116 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps116 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps116 = 5
	 	result_RH3_steps116 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps116')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps116')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps116')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps116')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps116')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps116) != expectedRuns & length(time_Basic_steps116) != expectedRuns){
 	result_object_RH3_steps116 = 4
	result_RH3_steps116 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps116) == expectedRuns & length(time_Basic_steps116) != expectedRuns){
	result_object_RH3_steps116 = 2
	result_RH3_steps116 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps116) != expectedRuns & length(time_Basic_steps116) == expectedRuns){
	result_object_RH3_steps116 = 3
	result_RH3_steps116 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.7: Object 151 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps151, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps151 = subset(json_data, treatment == 'Basic' & object == 'steps151' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps151)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps151')$time)
 
 if(length(time_Basic_steps151) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps151'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps151')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps151')$time))
 
 	shap_Basic_steps151 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps151')$time)
 	print(shap_Basic_steps151)
 	if(shap_Basic_steps151$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps151$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps151$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps151, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps151 = subset(json_data, treatment == 'Hylaa' & object == 'steps151' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps151)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time)
 
 if(length(time_Hylaa_steps151) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps151'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps151')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time))
 
 	shap_Hylaa_steps151 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time)
 	print(shap_Hylaa_steps151)
 	if(shap_Hylaa_steps151$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps151$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps151$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps151, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps151')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps151 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 151 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps151
 if(length(time_Hylaa_steps151) == expectedRuns & length(time_Basic_steps151) == expectedRuns){
 	result_RH3_steps151_tTest = FALSE
 	result_RH3_steps151_wTest = FALSE
 	
 	if(shap_Hylaa_steps151$p.value > alpha&shap_Basic_steps151$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time, subset(json_data,treatment == 'Basic' & object == 'steps151')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time, subset(json_data, treatment == 'Basic' & object == 'steps151')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps151_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps151')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps151_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps151_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps151) == expectedRuns & length(time_Basic_steps151) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps151')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps151')$time))))
	 if (result_RH3_steps151_tTest | result_RH3_steps151_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps151')$time)){
	   	result_RH3_steps151 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps151 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps151 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps151 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps151 = 5
	 	result_RH3_steps151 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps151')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps151')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps151')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps151')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps151')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps151) != expectedRuns & length(time_Basic_steps151) != expectedRuns){
 	result_object_RH3_steps151 = 4
	result_RH3_steps151 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps151) == expectedRuns & length(time_Basic_steps151) != expectedRuns){
	result_object_RH3_steps151 = 2
	result_RH3_steps151 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps151) != expectedRuns & length(time_Basic_steps151) == expectedRuns){
	result_object_RH3_steps151 = 3
	result_RH3_steps151 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.8: Object 197 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps197, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps197 = subset(json_data, treatment == 'Basic' & object == 'steps197' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps197)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps197')$time)
 
 if(length(time_Basic_steps197) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps197'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps197')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps197')$time))
 
 	shap_Basic_steps197 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps197')$time)
 	print(shap_Basic_steps197)
 	if(shap_Basic_steps197$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps197$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps197$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps197, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps197 = subset(json_data, treatment == 'Hylaa' & object == 'steps197' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps197)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time)
 
 if(length(time_Hylaa_steps197) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps197'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps197')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time))
 
 	shap_Hylaa_steps197 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time)
 	print(shap_Hylaa_steps197)
 	if(shap_Hylaa_steps197$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps197$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps197$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps197, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps197')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps197 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 197 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps197
 if(length(time_Hylaa_steps197) == expectedRuns & length(time_Basic_steps197) == expectedRuns){
 	result_RH3_steps197_tTest = FALSE
 	result_RH3_steps197_wTest = FALSE
 	
 	if(shap_Hylaa_steps197$p.value > alpha&shap_Basic_steps197$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time, subset(json_data,treatment == 'Basic' & object == 'steps197')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time, subset(json_data, treatment == 'Basic' & object == 'steps197')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps197_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps197')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps197_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps197_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps197) == expectedRuns & length(time_Basic_steps197) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps197')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps197')$time))))
	 if (result_RH3_steps197_tTest | result_RH3_steps197_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps197')$time)){
	   	result_RH3_steps197 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps197 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps197 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps197 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps197 = 5
	 	result_RH3_steps197 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps197')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps197')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps197')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps197')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps197')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps197) != expectedRuns & length(time_Basic_steps197) != expectedRuns){
 	result_object_RH3_steps197 = 4
	result_RH3_steps197 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps197) == expectedRuns & length(time_Basic_steps197) != expectedRuns){
	result_object_RH3_steps197 = 2
	result_RH3_steps197 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps197) != expectedRuns & length(time_Basic_steps197) == expectedRuns){
	result_object_RH3_steps197 = 3
	result_RH3_steps197 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.9: Object 256 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps256, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps256 = subset(json_data, treatment == 'Basic' & object == 'steps256' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps256)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps256')$time)
 
 if(length(time_Basic_steps256) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps256'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps256')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps256')$time))
 
 	shap_Basic_steps256 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps256')$time)
 	print(shap_Basic_steps256)
 	if(shap_Basic_steps256$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps256$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps256$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps256, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps256 = subset(json_data, treatment == 'Hylaa' & object == 'steps256' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps256)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time)
 
 if(length(time_Hylaa_steps256) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps256'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps256')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time))
 
 	shap_Hylaa_steps256 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time)
 	print(shap_Hylaa_steps256)
 	if(shap_Hylaa_steps256$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps256$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps256$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps256, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps256')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps256 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 256 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps256
 if(length(time_Hylaa_steps256) == expectedRuns & length(time_Basic_steps256) == expectedRuns){
 	result_RH3_steps256_tTest = FALSE
 	result_RH3_steps256_wTest = FALSE
 	
 	if(shap_Hylaa_steps256$p.value > alpha&shap_Basic_steps256$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time, subset(json_data,treatment == 'Basic' & object == 'steps256')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time, subset(json_data, treatment == 'Basic' & object == 'steps256')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps256_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps256')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps256_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps256_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps256) == expectedRuns & length(time_Basic_steps256) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps256')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps256')$time))))
	 if (result_RH3_steps256_tTest | result_RH3_steps256_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps256')$time)){
	   	result_RH3_steps256 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps256 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps256 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps256 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps256 = 5
	 	result_RH3_steps256 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps256')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps256')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps256')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps256')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps256')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps256) != expectedRuns & length(time_Basic_steps256) != expectedRuns){
 	result_object_RH3_steps256 = 4
	result_RH3_steps256 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps256) == expectedRuns & length(time_Basic_steps256) != expectedRuns){
	result_object_RH3_steps256 = 2
	result_RH3_steps256 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps256) != expectedRuns & length(time_Basic_steps256) == expectedRuns){
	result_object_RH3_steps256 = 3
	result_RH3_steps256 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.10: Object 332 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps332, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps332 = subset(json_data, treatment == 'Basic' & object == 'steps332' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps332)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps332')$time)
 
 if(length(time_Basic_steps332) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps332'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps332')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps332')$time))
 
 	shap_Basic_steps332 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps332')$time)
 	print(shap_Basic_steps332)
 	if(shap_Basic_steps332$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps332$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps332$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps332, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps332 = subset(json_data, treatment == 'Hylaa' & object == 'steps332' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps332)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time)
 
 if(length(time_Hylaa_steps332) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps332'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps332')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time))
 
 	shap_Hylaa_steps332 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time)
 	print(shap_Hylaa_steps332)
 	if(shap_Hylaa_steps332$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps332$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps332$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps332, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps332')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps332 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 332 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps332
 if(length(time_Hylaa_steps332) == expectedRuns & length(time_Basic_steps332) == expectedRuns){
 	result_RH3_steps332_tTest = FALSE
 	result_RH3_steps332_wTest = FALSE
 	
 	if(shap_Hylaa_steps332$p.value > alpha&shap_Basic_steps332$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time, subset(json_data,treatment == 'Basic' & object == 'steps332')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time, subset(json_data, treatment == 'Basic' & object == 'steps332')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps332_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps332')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps332_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps332_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps332) == expectedRuns & length(time_Basic_steps332) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps332')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps332')$time))))
	 if (result_RH3_steps332_tTest | result_RH3_steps332_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps332')$time)){
	   	result_RH3_steps332 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps332 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps332 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps332 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps332 = 5
	 	result_RH3_steps332 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps332')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps332')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps332')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps332')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps332')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps332) != expectedRuns & length(time_Basic_steps332) != expectedRuns){
 	result_object_RH3_steps332 = 4
	result_RH3_steps332 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps332) == expectedRuns & length(time_Basic_steps332) != expectedRuns){
	result_object_RH3_steps332 = 2
	result_RH3_steps332 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps332) != expectedRuns & length(time_Basic_steps332) == expectedRuns){
	result_object_RH3_steps332 = 3
	result_RH3_steps332 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.11: Object 432 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps432, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps432 = subset(json_data, treatment == 'Basic' & object == 'steps432' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps432)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps432')$time)
 
 if(length(time_Basic_steps432) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps432'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps432')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps432')$time))
 
 	shap_Basic_steps432 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps432')$time)
 	print(shap_Basic_steps432)
 	if(shap_Basic_steps432$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps432$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps432$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps432, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps432 = subset(json_data, treatment == 'Hylaa' & object == 'steps432' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps432)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time)
 
 if(length(time_Hylaa_steps432) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps432'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps432')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time))
 
 	shap_Hylaa_steps432 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time)
 	print(shap_Hylaa_steps432)
 	if(shap_Hylaa_steps432$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps432$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps432$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps432, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps432')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps432 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 432 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps432
 if(length(time_Hylaa_steps432) == expectedRuns & length(time_Basic_steps432) == expectedRuns){
 	result_RH3_steps432_tTest = FALSE
 	result_RH3_steps432_wTest = FALSE
 	
 	if(shap_Hylaa_steps432$p.value > alpha&shap_Basic_steps432$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time, subset(json_data,treatment == 'Basic' & object == 'steps432')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time, subset(json_data, treatment == 'Basic' & object == 'steps432')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps432_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps432')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps432_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps432_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps432) == expectedRuns & length(time_Basic_steps432) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps432')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps432')$time))))
	 if (result_RH3_steps432_tTest | result_RH3_steps432_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps432')$time)){
	   	result_RH3_steps432 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps432 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps432 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps432 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps432 = 5
	 	result_RH3_steps432 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps432')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps432')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps432')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps432')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps432')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps432) != expectedRuns & length(time_Basic_steps432) != expectedRuns){
 	result_object_RH3_steps432 = 4
	result_RH3_steps432 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps432) == expectedRuns & length(time_Basic_steps432) != expectedRuns){
	result_object_RH3_steps432 = 2
	result_RH3_steps432 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps432) != expectedRuns & length(time_Basic_steps432) == expectedRuns){
	result_object_RH3_steps432 = 3
	result_RH3_steps432 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.12: Object 562 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps562, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps562 = subset(json_data, treatment == 'Basic' & object == 'steps562' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps562)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps562')$time)
 
 if(length(time_Basic_steps562) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps562'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps562')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps562')$time))
 
 	shap_Basic_steps562 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps562')$time)
 	print(shap_Basic_steps562)
 	if(shap_Basic_steps562$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps562$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps562$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps562, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps562 = subset(json_data, treatment == 'Hylaa' & object == 'steps562' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps562)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time)
 
 if(length(time_Hylaa_steps562) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps562'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps562')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time))
 
 	shap_Hylaa_steps562 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time)
 	print(shap_Hylaa_steps562)
 	if(shap_Hylaa_steps562$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps562$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps562$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps562, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps562')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps562 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 562 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps562
 if(length(time_Hylaa_steps562) == expectedRuns & length(time_Basic_steps562) == expectedRuns){
 	result_RH3_steps562_tTest = FALSE
 	result_RH3_steps562_wTest = FALSE
 	
 	if(shap_Hylaa_steps562$p.value > alpha&shap_Basic_steps562$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time, subset(json_data,treatment == 'Basic' & object == 'steps562')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time, subset(json_data, treatment == 'Basic' & object == 'steps562')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps562_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps562')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps562_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps562_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps562) == expectedRuns & length(time_Basic_steps562) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps562')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps562')$time))))
	 if (result_RH3_steps562_tTest | result_RH3_steps562_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps562')$time)){
	   	result_RH3_steps562 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps562 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps562 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps562 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps562 = 5
	 	result_RH3_steps562 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps562')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps562')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps562')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps562')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps562')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps562) != expectedRuns & length(time_Basic_steps562) != expectedRuns){
 	result_object_RH3_steps562 = 4
	result_RH3_steps562 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps562) == expectedRuns & length(time_Basic_steps562) != expectedRuns){
	result_object_RH3_steps562 = 2
	result_RH3_steps562 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps562) != expectedRuns & length(time_Basic_steps562) == expectedRuns){
	result_object_RH3_steps562 = 3
	result_RH3_steps562 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.13: Object 731 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps731, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps731 = subset(json_data, treatment == 'Basic' & object == 'steps731' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps731)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps731')$time)
 
 if(length(time_Basic_steps731) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps731'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps731')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps731')$time))
 
 	shap_Basic_steps731 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps731')$time)
 	print(shap_Basic_steps731)
 	if(shap_Basic_steps731$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps731$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps731$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps731, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps731 = subset(json_data, treatment == 'Hylaa' & object == 'steps731' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps731)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time)
 
 if(length(time_Hylaa_steps731) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps731'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps731')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time))
 
 	shap_Hylaa_steps731 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time)
 	print(shap_Hylaa_steps731)
 	if(shap_Hylaa_steps731$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps731$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps731$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps731, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps731')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps731 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 731 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps731
 if(length(time_Hylaa_steps731) == expectedRuns & length(time_Basic_steps731) == expectedRuns){
 	result_RH3_steps731_tTest = FALSE
 	result_RH3_steps731_wTest = FALSE
 	
 	if(shap_Hylaa_steps731$p.value > alpha&shap_Basic_steps731$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time, subset(json_data,treatment == 'Basic' & object == 'steps731')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time, subset(json_data, treatment == 'Basic' & object == 'steps731')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps731_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps731')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps731_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps731_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps731) == expectedRuns & length(time_Basic_steps731) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps731')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps731')$time))))
	 if (result_RH3_steps731_tTest | result_RH3_steps731_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps731')$time)){
	   	result_RH3_steps731 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps731 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps731 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps731 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps731 = 5
	 	result_RH3_steps731 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps731')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps731')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps731')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps731')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps731')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps731) != expectedRuns & length(time_Basic_steps731) != expectedRuns){
 	result_object_RH3_steps731 = 4
	result_RH3_steps731 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps731) == expectedRuns & length(time_Basic_steps731) != expectedRuns){
	result_object_RH3_steps731 = 2
	result_RH3_steps731 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps731) != expectedRuns & length(time_Basic_steps731) == expectedRuns){
	result_object_RH3_steps731 = 3
	result_RH3_steps731 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.14: Object 951 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps951, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps951 = subset(json_data, treatment == 'Basic' & object == 'steps951' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps951)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps951')$time)
 
 if(length(time_Basic_steps951) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps951'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps951')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps951')$time))
 
 	shap_Basic_steps951 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps951')$time)
 	print(shap_Basic_steps951)
 	if(shap_Basic_steps951$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps951$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps951$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps951, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps951 = subset(json_data, treatment == 'Hylaa' & object == 'steps951' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps951)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time)
 
 if(length(time_Hylaa_steps951) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps951'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps951')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time))
 
 	shap_Hylaa_steps951 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time)
 	print(shap_Hylaa_steps951)
 	if(shap_Hylaa_steps951$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps951$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps951$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps951, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps951')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps951 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 951 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps951
 if(length(time_Hylaa_steps951) == expectedRuns & length(time_Basic_steps951) == expectedRuns){
 	result_RH3_steps951_tTest = FALSE
 	result_RH3_steps951_wTest = FALSE
 	
 	if(shap_Hylaa_steps951$p.value > alpha&shap_Basic_steps951$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time, subset(json_data,treatment == 'Basic' & object == 'steps951')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time, subset(json_data, treatment == 'Basic' & object == 'steps951')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps951_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps951')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps951_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps951_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps951) == expectedRuns & length(time_Basic_steps951) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps951')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps951')$time))))
	 if (result_RH3_steps951_tTest | result_RH3_steps951_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps951')$time)){
	   	result_RH3_steps951 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps951 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps951 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps951 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps951 = 5
	 	result_RH3_steps951 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps951')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps951')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps951')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps951')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps951')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps951) != expectedRuns & length(time_Basic_steps951) != expectedRuns){
 	result_object_RH3_steps951 = 4
	result_RH3_steps951 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps951) == expectedRuns & length(time_Basic_steps951) != expectedRuns){
	result_object_RH3_steps951 = 2
	result_RH3_steps951 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps951) != expectedRuns & length(time_Basic_steps951) == expectedRuns){
	result_object_RH3_steps951 = 3
	result_RH3_steps951 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.15: Object 1236 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps1236, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps1236 = subset(json_data, treatment == 'Basic' & object == 'steps1236' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps1236)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps1236')$time)
 
 if(length(time_Basic_steps1236) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps1236'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps1236')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps1236')$time))
 
 	shap_Basic_steps1236 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps1236')$time)
 	print(shap_Basic_steps1236)
 	if(shap_Basic_steps1236$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps1236$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps1236$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps1236, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps1236 = subset(json_data, treatment == 'Hylaa' & object == 'steps1236' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps1236)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time)
 
 if(length(time_Hylaa_steps1236) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps1236'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps1236')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time))
 
 	shap_Hylaa_steps1236 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time)
 	print(shap_Hylaa_steps1236)
 	if(shap_Hylaa_steps1236$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps1236$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps1236$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps1236, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps1236')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps1236 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 1236 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps1236
 if(length(time_Hylaa_steps1236) == expectedRuns & length(time_Basic_steps1236) == expectedRuns){
 	result_RH3_steps1236_tTest = FALSE
 	result_RH3_steps1236_wTest = FALSE
 	
 	if(shap_Hylaa_steps1236$p.value > alpha&shap_Basic_steps1236$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time, subset(json_data,treatment == 'Basic' & object == 'steps1236')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time, subset(json_data, treatment == 'Basic' & object == 'steps1236')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps1236_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps1236')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps1236_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps1236_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps1236) == expectedRuns & length(time_Basic_steps1236) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps1236')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps1236')$time))))
	 if (result_RH3_steps1236_tTest | result_RH3_steps1236_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps1236')$time)){
	   	result_RH3_steps1236 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps1236 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps1236 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps1236 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps1236 = 5
	 	result_RH3_steps1236 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps1236')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps1236')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps1236')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps1236')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps1236')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps1236) != expectedRuns & length(time_Basic_steps1236) != expectedRuns){
 	result_object_RH3_steps1236 = 4
	result_RH3_steps1236 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps1236) == expectedRuns & length(time_Basic_steps1236) != expectedRuns){
	result_object_RH3_steps1236 = 2
	result_RH3_steps1236 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps1236) != expectedRuns & length(time_Basic_steps1236) == expectedRuns){
	result_object_RH3_steps1236 = 3
	result_RH3_steps1236 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.16: Object 1607 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps1607, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps1607 = subset(json_data, treatment == 'Basic' & object == 'steps1607' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps1607)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps1607')$time)
 
 if(length(time_Basic_steps1607) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps1607'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps1607')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps1607')$time))
 
 	shap_Basic_steps1607 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps1607')$time)
 	print(shap_Basic_steps1607)
 	if(shap_Basic_steps1607$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps1607$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps1607$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps1607, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps1607 = subset(json_data, treatment == 'Hylaa' & object == 'steps1607' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps1607)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time)
 
 if(length(time_Hylaa_steps1607) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps1607'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps1607')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time))
 
 	shap_Hylaa_steps1607 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time)
 	print(shap_Hylaa_steps1607)
 	if(shap_Hylaa_steps1607$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps1607$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps1607$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps1607, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps1607')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps1607 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 1607 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps1607
 if(length(time_Hylaa_steps1607) == expectedRuns & length(time_Basic_steps1607) == expectedRuns){
 	result_RH3_steps1607_tTest = FALSE
 	result_RH3_steps1607_wTest = FALSE
 	
 	if(shap_Hylaa_steps1607$p.value > alpha&shap_Basic_steps1607$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time, subset(json_data,treatment == 'Basic' & object == 'steps1607')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time, subset(json_data, treatment == 'Basic' & object == 'steps1607')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps1607_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps1607')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps1607_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps1607_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps1607) == expectedRuns & length(time_Basic_steps1607) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps1607')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps1607')$time))))
	 if (result_RH3_steps1607_tTest | result_RH3_steps1607_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps1607')$time)){
	   	result_RH3_steps1607 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps1607 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps1607 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps1607 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps1607 = 5
	 	result_RH3_steps1607 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps1607')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps1607')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps1607')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps1607')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps1607')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps1607) != expectedRuns & length(time_Basic_steps1607) != expectedRuns){
 	result_object_RH3_steps1607 = 4
	result_RH3_steps1607 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps1607) == expectedRuns & length(time_Basic_steps1607) != expectedRuns){
	result_object_RH3_steps1607 = 2
	result_RH3_steps1607 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps1607) != expectedRuns & length(time_Basic_steps1607) == expectedRuns){
	result_object_RH3_steps1607 = 3
	result_RH3_steps1607 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.17: Object 2089 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps2089, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps2089 = subset(json_data, treatment == 'Basic' & object == 'steps2089' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps2089)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps2089')$time)
 
 if(length(time_Basic_steps2089) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps2089'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps2089')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps2089')$time))
 
 	shap_Basic_steps2089 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps2089')$time)
 	print(shap_Basic_steps2089)
 	if(shap_Basic_steps2089$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps2089$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps2089$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps2089, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps2089 = subset(json_data, treatment == 'Hylaa' & object == 'steps2089' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps2089)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time)
 
 if(length(time_Hylaa_steps2089) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps2089'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps2089')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time))
 
 	shap_Hylaa_steps2089 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time)
 	print(shap_Hylaa_steps2089)
 	if(shap_Hylaa_steps2089$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps2089$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps2089$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps2089, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps2089')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps2089 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 2089 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps2089
 if(length(time_Hylaa_steps2089) == expectedRuns & length(time_Basic_steps2089) == expectedRuns){
 	result_RH3_steps2089_tTest = FALSE
 	result_RH3_steps2089_wTest = FALSE
 	
 	if(shap_Hylaa_steps2089$p.value > alpha&shap_Basic_steps2089$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time, subset(json_data,treatment == 'Basic' & object == 'steps2089')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time, subset(json_data, treatment == 'Basic' & object == 'steps2089')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps2089_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps2089')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps2089_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps2089_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps2089) == expectedRuns & length(time_Basic_steps2089) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps2089')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps2089')$time))))
	 if (result_RH3_steps2089_tTest | result_RH3_steps2089_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps2089')$time)){
	   	result_RH3_steps2089 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps2089 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps2089 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps2089 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps2089 = 5
	 	result_RH3_steps2089 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps2089')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps2089')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps2089')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps2089')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps2089')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps2089) != expectedRuns & length(time_Basic_steps2089) != expectedRuns){
 	result_object_RH3_steps2089 = 4
	result_RH3_steps2089 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps2089) == expectedRuns & length(time_Basic_steps2089) != expectedRuns){
	result_object_RH3_steps2089 = 2
	result_RH3_steps2089 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps2089) != expectedRuns & length(time_Basic_steps2089) == expectedRuns){
	result_object_RH3_steps2089 = 3
	result_RH3_steps2089 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.18: Object 2716 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps2716, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps2716 = subset(json_data, treatment == 'Basic' & object == 'steps2716' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps2716)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps2716')$time)
 
 if(length(time_Basic_steps2716) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps2716'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps2716')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps2716')$time))
 
 	shap_Basic_steps2716 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps2716')$time)
 	print(shap_Basic_steps2716)
 	if(shap_Basic_steps2716$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps2716$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps2716$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps2716, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps2716 = subset(json_data, treatment == 'Hylaa' & object == 'steps2716' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps2716)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time)
 
 if(length(time_Hylaa_steps2716) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps2716'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps2716')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time))
 
 	shap_Hylaa_steps2716 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time)
 	print(shap_Hylaa_steps2716)
 	if(shap_Hylaa_steps2716$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps2716$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps2716$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps2716, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps2716')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps2716 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 2716 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps2716
 if(length(time_Hylaa_steps2716) == expectedRuns & length(time_Basic_steps2716) == expectedRuns){
 	result_RH3_steps2716_tTest = FALSE
 	result_RH3_steps2716_wTest = FALSE
 	
 	if(shap_Hylaa_steps2716$p.value > alpha&shap_Basic_steps2716$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time, subset(json_data,treatment == 'Basic' & object == 'steps2716')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time, subset(json_data, treatment == 'Basic' & object == 'steps2716')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps2716_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps2716')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps2716_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps2716_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps2716) == expectedRuns & length(time_Basic_steps2716) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps2716')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps2716')$time))))
	 if (result_RH3_steps2716_tTest | result_RH3_steps2716_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps2716')$time)){
	   	result_RH3_steps2716 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps2716 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps2716 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps2716 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps2716 = 5
	 	result_RH3_steps2716 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps2716')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps2716')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps2716')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps2716')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps2716')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps2716) != expectedRuns & length(time_Basic_steps2716) != expectedRuns){
 	result_object_RH3_steps2716 = 4
	result_RH3_steps2716 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps2716) == expectedRuns & length(time_Basic_steps2716) != expectedRuns){
	result_object_RH3_steps2716 = 2
	result_RH3_steps2716 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps2716) != expectedRuns & length(time_Basic_steps2716) == expectedRuns){
	result_object_RH3_steps2716 = 3
	result_RH3_steps2716 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.19: Object 3531 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps3531, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps3531 = subset(json_data, treatment == 'Basic' & object == 'steps3531' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps3531)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps3531')$time)
 
 if(length(time_Basic_steps3531) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps3531'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps3531')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps3531')$time))
 
 	shap_Basic_steps3531 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps3531')$time)
 	print(shap_Basic_steps3531)
 	if(shap_Basic_steps3531$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps3531$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps3531$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps3531, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps3531 = subset(json_data, treatment == 'Hylaa' & object == 'steps3531' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps3531)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time)
 
 if(length(time_Hylaa_steps3531) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps3531'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps3531')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time))
 
 	shap_Hylaa_steps3531 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time)
 	print(shap_Hylaa_steps3531)
 	if(shap_Hylaa_steps3531$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps3531$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps3531$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps3531, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps3531')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps3531 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 3531 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps3531
 if(length(time_Hylaa_steps3531) == expectedRuns & length(time_Basic_steps3531) == expectedRuns){
 	result_RH3_steps3531_tTest = FALSE
 	result_RH3_steps3531_wTest = FALSE
 	
 	if(shap_Hylaa_steps3531$p.value > alpha&shap_Basic_steps3531$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time, subset(json_data,treatment == 'Basic' & object == 'steps3531')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time, subset(json_data, treatment == 'Basic' & object == 'steps3531')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps3531_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps3531')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps3531_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps3531_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps3531) == expectedRuns & length(time_Basic_steps3531) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps3531')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps3531')$time))))
	 if (result_RH3_steps3531_tTest | result_RH3_steps3531_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps3531')$time)){
	   	result_RH3_steps3531 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps3531 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps3531 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps3531 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps3531 = 5
	 	result_RH3_steps3531 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps3531')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps3531')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps3531')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps3531')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps3531')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps3531) != expectedRuns & length(time_Basic_steps3531) != expectedRuns){
 	result_object_RH3_steps3531 = 4
	result_RH3_steps3531 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps3531) == expectedRuns & length(time_Basic_steps3531) != expectedRuns){
	result_object_RH3_steps3531 = 2
	result_RH3_steps3531 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps3531) != expectedRuns & length(time_Basic_steps3531) == expectedRuns){
	result_object_RH3_steps3531 = 3
	result_RH3_steps3531 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.20: Object 4590 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps4590, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps4590 = subset(json_data, treatment == 'Basic' & object == 'steps4590' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps4590)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps4590')$time)
 
 if(length(time_Basic_steps4590) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps4590'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps4590')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps4590')$time))
 
 	shap_Basic_steps4590 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps4590')$time)
 	print(shap_Basic_steps4590)
 	if(shap_Basic_steps4590$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps4590$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps4590$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps4590, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps4590 = subset(json_data, treatment == 'Hylaa' & object == 'steps4590' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps4590)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time)
 
 if(length(time_Hylaa_steps4590) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps4590'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps4590')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time))
 
 	shap_Hylaa_steps4590 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time)
 	print(shap_Hylaa_steps4590)
 	if(shap_Hylaa_steps4590$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps4590$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps4590$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps4590, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps4590')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps4590 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 4590 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps4590
 if(length(time_Hylaa_steps4590) == expectedRuns & length(time_Basic_steps4590) == expectedRuns){
 	result_RH3_steps4590_tTest = FALSE
 	result_RH3_steps4590_wTest = FALSE
 	
 	if(shap_Hylaa_steps4590$p.value > alpha&shap_Basic_steps4590$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time, subset(json_data,treatment == 'Basic' & object == 'steps4590')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time, subset(json_data, treatment == 'Basic' & object == 'steps4590')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps4590_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps4590')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps4590_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps4590_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps4590) == expectedRuns & length(time_Basic_steps4590) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps4590')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps4590')$time))))
	 if (result_RH3_steps4590_tTest | result_RH3_steps4590_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps4590')$time)){
	   	result_RH3_steps4590 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps4590 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps4590 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps4590 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps4590 = 5
	 	result_RH3_steps4590 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps4590')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps4590')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps4590')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps4590')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps4590')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps4590) != expectedRuns & length(time_Basic_steps4590) != expectedRuns){
 	result_object_RH3_steps4590 = 4
	result_RH3_steps4590 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps4590) == expectedRuns & length(time_Basic_steps4590) != expectedRuns){
	result_object_RH3_steps4590 = 2
	result_RH3_steps4590 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps4590) != expectedRuns & length(time_Basic_steps4590) == expectedRuns){
	result_object_RH3_steps4590 = 3
	result_RH3_steps4590 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.21: Object 5967 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps5967, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps5967 = subset(json_data, treatment == 'Basic' & object == 'steps5967' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps5967)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps5967')$time)
 
 if(length(time_Basic_steps5967) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps5967'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps5967')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps5967')$time))
 
 	shap_Basic_steps5967 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps5967')$time)
 	print(shap_Basic_steps5967)
 	if(shap_Basic_steps5967$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps5967$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps5967$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps5967, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps5967 = subset(json_data, treatment == 'Hylaa' & object == 'steps5967' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps5967)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time)
 
 if(length(time_Hylaa_steps5967) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps5967'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps5967')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time))
 
 	shap_Hylaa_steps5967 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time)
 	print(shap_Hylaa_steps5967)
 	if(shap_Hylaa_steps5967$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps5967$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps5967$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps5967, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps5967')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps5967 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 5967 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps5967
 if(length(time_Hylaa_steps5967) == expectedRuns & length(time_Basic_steps5967) == expectedRuns){
 	result_RH3_steps5967_tTest = FALSE
 	result_RH3_steps5967_wTest = FALSE
 	
 	if(shap_Hylaa_steps5967$p.value > alpha&shap_Basic_steps5967$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time, subset(json_data,treatment == 'Basic' & object == 'steps5967')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time, subset(json_data, treatment == 'Basic' & object == 'steps5967')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps5967_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps5967')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps5967_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps5967_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps5967) == expectedRuns & length(time_Basic_steps5967) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps5967')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps5967')$time))))
	 if (result_RH3_steps5967_tTest | result_RH3_steps5967_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps5967')$time)){
	   	result_RH3_steps5967 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps5967 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps5967 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps5967 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps5967 = 5
	 	result_RH3_steps5967 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps5967')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps5967')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps5967')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps5967')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps5967')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps5967) != expectedRuns & length(time_Basic_steps5967) != expectedRuns){
 	result_object_RH3_steps5967 = 4
	result_RH3_steps5967 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps5967) == expectedRuns & length(time_Basic_steps5967) != expectedRuns){
	result_object_RH3_steps5967 = 2
	result_RH3_steps5967 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps5967) != expectedRuns & length(time_Basic_steps5967) == expectedRuns){
	result_object_RH3_steps5967 = 3
	result_RH3_steps5967 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.22: Object 7757 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps7757, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps7757 = subset(json_data, treatment == 'Basic' & object == 'steps7757' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps7757)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps7757')$time)
 
 if(length(time_Basic_steps7757) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps7757'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps7757')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps7757')$time))
 
 	shap_Basic_steps7757 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps7757')$time)
 	print(shap_Basic_steps7757)
 	if(shap_Basic_steps7757$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps7757$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps7757$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps7757, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps7757 = subset(json_data, treatment == 'Hylaa' & object == 'steps7757' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps7757)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time)
 
 if(length(time_Hylaa_steps7757) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps7757'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps7757')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time))
 
 	shap_Hylaa_steps7757 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time)
 	print(shap_Hylaa_steps7757)
 	if(shap_Hylaa_steps7757$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps7757$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps7757$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps7757, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps7757')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps7757 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 7757 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps7757
 if(length(time_Hylaa_steps7757) == expectedRuns & length(time_Basic_steps7757) == expectedRuns){
 	result_RH3_steps7757_tTest = FALSE
 	result_RH3_steps7757_wTest = FALSE
 	
 	if(shap_Hylaa_steps7757$p.value > alpha&shap_Basic_steps7757$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time, subset(json_data,treatment == 'Basic' & object == 'steps7757')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time, subset(json_data, treatment == 'Basic' & object == 'steps7757')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps7757_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps7757')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps7757_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps7757_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps7757) == expectedRuns & length(time_Basic_steps7757) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps7757')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps7757')$time))))
	 if (result_RH3_steps7757_tTest | result_RH3_steps7757_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps7757')$time)){
	   	result_RH3_steps7757 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps7757 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps7757 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps7757 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps7757 = 5
	 	result_RH3_steps7757 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps7757')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps7757')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps7757')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps7757')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps7757')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps7757) != expectedRuns & length(time_Basic_steps7757) != expectedRuns){
 	result_object_RH3_steps7757 = 4
	result_RH3_steps7757 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps7757) == expectedRuns & length(time_Basic_steps7757) != expectedRuns){
	result_object_RH3_steps7757 = 2
	result_RH3_steps7757 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps7757) != expectedRuns & length(time_Basic_steps7757) == expectedRuns){
	result_object_RH3_steps7757 = 3
	result_RH3_steps7757 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.23: Object 10085 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps10085, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps10085 = subset(json_data, treatment == 'Basic' & object == 'steps10085' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps10085)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps10085')$time)
 
 if(length(time_Basic_steps10085) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps10085'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps10085')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps10085')$time))
 
 	shap_Basic_steps10085 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps10085')$time)
 	print(shap_Basic_steps10085)
 	if(shap_Basic_steps10085$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps10085$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps10085$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps10085, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps10085 = subset(json_data, treatment == 'Hylaa' & object == 'steps10085' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps10085)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time)
 
 if(length(time_Hylaa_steps10085) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps10085'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps10085')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time))
 
 	shap_Hylaa_steps10085 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time)
 	print(shap_Hylaa_steps10085)
 	if(shap_Hylaa_steps10085$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps10085$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps10085$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps10085, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps10085')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps10085 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 10085 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps10085
 if(length(time_Hylaa_steps10085) == expectedRuns & length(time_Basic_steps10085) == expectedRuns){
 	result_RH3_steps10085_tTest = FALSE
 	result_RH3_steps10085_wTest = FALSE
 	
 	if(shap_Hylaa_steps10085$p.value > alpha&shap_Basic_steps10085$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time, subset(json_data,treatment == 'Basic' & object == 'steps10085')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time, subset(json_data, treatment == 'Basic' & object == 'steps10085')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps10085_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps10085')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps10085_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps10085_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps10085) == expectedRuns & length(time_Basic_steps10085) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps10085')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps10085')$time))))
	 if (result_RH3_steps10085_tTest | result_RH3_steps10085_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps10085')$time)){
	   	result_RH3_steps10085 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps10085 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps10085 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps10085 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps10085 = 5
	 	result_RH3_steps10085 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps10085')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps10085')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps10085')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps10085')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps10085')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps10085) != expectedRuns & length(time_Basic_steps10085) != expectedRuns){
 	result_object_RH3_steps10085 = 4
	result_RH3_steps10085 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps10085) == expectedRuns & length(time_Basic_steps10085) != expectedRuns){
	result_object_RH3_steps10085 = 2
	result_RH3_steps10085 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps10085) != expectedRuns & length(time_Basic_steps10085) == expectedRuns){
	result_object_RH3_steps10085 = 3
	result_RH3_steps10085 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.24: Object 13110 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps13110, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps13110 = subset(json_data, treatment == 'Basic' & object == 'steps13110' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps13110)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps13110')$time)
 
 if(length(time_Basic_steps13110) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps13110'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps13110')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps13110')$time))
 
 	shap_Basic_steps13110 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps13110')$time)
 	print(shap_Basic_steps13110)
 	if(shap_Basic_steps13110$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps13110$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps13110$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps13110, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps13110 = subset(json_data, treatment == 'Hylaa' & object == 'steps13110' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps13110)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time)
 
 if(length(time_Hylaa_steps13110) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps13110'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps13110')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time))
 
 	shap_Hylaa_steps13110 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time)
 	print(shap_Hylaa_steps13110)
 	if(shap_Hylaa_steps13110$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps13110$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps13110$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps13110, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps13110')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps13110 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 13110 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps13110
 if(length(time_Hylaa_steps13110) == expectedRuns & length(time_Basic_steps13110) == expectedRuns){
 	result_RH3_steps13110_tTest = FALSE
 	result_RH3_steps13110_wTest = FALSE
 	
 	if(shap_Hylaa_steps13110$p.value > alpha&shap_Basic_steps13110$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time, subset(json_data,treatment == 'Basic' & object == 'steps13110')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time, subset(json_data, treatment == 'Basic' & object == 'steps13110')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps13110_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps13110')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps13110_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps13110_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps13110) == expectedRuns & length(time_Basic_steps13110) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps13110')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps13110')$time))))
	 if (result_RH3_steps13110_tTest | result_RH3_steps13110_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps13110')$time)){
	   	result_RH3_steps13110 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps13110 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps13110 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps13110 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps13110 = 5
	 	result_RH3_steps13110 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps13110')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps13110')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps13110')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps13110')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps13110')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps13110) != expectedRuns & length(time_Basic_steps13110) != expectedRuns){
 	result_object_RH3_steps13110 = 4
	result_RH3_steps13110 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps13110) == expectedRuns & length(time_Basic_steps13110) != expectedRuns){
	result_object_RH3_steps13110 = 2
	result_RH3_steps13110 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps13110) != expectedRuns & length(time_Basic_steps13110) == expectedRuns){
	result_object_RH3_steps13110 = 3
	result_RH3_steps13110 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.25: Object 17043 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps17043, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps17043 = subset(json_data, treatment == 'Basic' & object == 'steps17043' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps17043)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps17043')$time)
 
 if(length(time_Basic_steps17043) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps17043'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps17043')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps17043')$time))
 
 	shap_Basic_steps17043 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps17043')$time)
 	print(shap_Basic_steps17043)
 	if(shap_Basic_steps17043$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps17043$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps17043$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps17043, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps17043 = subset(json_data, treatment == 'Hylaa' & object == 'steps17043' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps17043)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time)
 
 if(length(time_Hylaa_steps17043) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps17043'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps17043')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time))
 
 	shap_Hylaa_steps17043 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time)
 	print(shap_Hylaa_steps17043)
 	if(shap_Hylaa_steps17043$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps17043$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps17043$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps17043, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps17043')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps17043 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 17043 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps17043
 if(length(time_Hylaa_steps17043) == expectedRuns & length(time_Basic_steps17043) == expectedRuns){
 	result_RH3_steps17043_tTest = FALSE
 	result_RH3_steps17043_wTest = FALSE
 	
 	if(shap_Hylaa_steps17043$p.value > alpha&shap_Basic_steps17043$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time, subset(json_data,treatment == 'Basic' & object == 'steps17043')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time, subset(json_data, treatment == 'Basic' & object == 'steps17043')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps17043_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps17043')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps17043_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps17043_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps17043) == expectedRuns & length(time_Basic_steps17043) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps17043')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps17043')$time))))
	 if (result_RH3_steps17043_tTest | result_RH3_steps17043_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps17043')$time)){
	   	result_RH3_steps17043 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps17043 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps17043 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps17043 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps17043 = 5
	 	result_RH3_steps17043 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps17043')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps17043')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps17043')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps17043')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps17043')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps17043) != expectedRuns & length(time_Basic_steps17043) != expectedRuns){
 	result_object_RH3_steps17043 = 4
	result_RH3_steps17043 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps17043) == expectedRuns & length(time_Basic_steps17043) != expectedRuns){
	result_object_RH3_steps17043 = 2
	result_RH3_steps17043 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps17043) != expectedRuns & length(time_Basic_steps17043) == expectedRuns){
	result_object_RH3_steps17043 = 3
	result_RH3_steps17043 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.26: Object 22157 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps22157, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps22157 = subset(json_data, treatment == 'Basic' & object == 'steps22157' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps22157)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps22157')$time)
 
 if(length(time_Basic_steps22157) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps22157'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps22157')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps22157')$time))
 
 	shap_Basic_steps22157 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps22157')$time)
 	print(shap_Basic_steps22157)
 	if(shap_Basic_steps22157$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps22157$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps22157$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps22157, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps22157 = subset(json_data, treatment == 'Hylaa' & object == 'steps22157' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps22157)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time)
 
 if(length(time_Hylaa_steps22157) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps22157'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps22157')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time))
 
 	shap_Hylaa_steps22157 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time)
 	print(shap_Hylaa_steps22157)
 	if(shap_Hylaa_steps22157$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps22157$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps22157$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps22157, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps22157')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps22157 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 22157 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps22157
 if(length(time_Hylaa_steps22157) == expectedRuns & length(time_Basic_steps22157) == expectedRuns){
 	result_RH3_steps22157_tTest = FALSE
 	result_RH3_steps22157_wTest = FALSE
 	
 	if(shap_Hylaa_steps22157$p.value > alpha&shap_Basic_steps22157$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time, subset(json_data,treatment == 'Basic' & object == 'steps22157')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time, subset(json_data, treatment == 'Basic' & object == 'steps22157')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps22157_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps22157')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps22157_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps22157_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps22157) == expectedRuns & length(time_Basic_steps22157) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps22157')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps22157')$time))))
	 if (result_RH3_steps22157_tTest | result_RH3_steps22157_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps22157')$time)){
	   	result_RH3_steps22157 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps22157 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps22157 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps22157 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps22157 = 5
	 	result_RH3_steps22157 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps22157')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps22157')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps22157')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps22157')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps22157')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps22157) != expectedRuns & length(time_Basic_steps22157) != expectedRuns){
 	result_object_RH3_steps22157 = 4
	result_RH3_steps22157 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps22157) == expectedRuns & length(time_Basic_steps22157) != expectedRuns){
	result_object_RH3_steps22157 = 2
	result_RH3_steps22157 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps22157) != expectedRuns & length(time_Basic_steps22157) == expectedRuns){
	result_object_RH3_steps22157 = 3
	result_RH3_steps22157 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.27: Object 28804 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps28804, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps28804 = subset(json_data, treatment == 'Basic' & object == 'steps28804' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps28804)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps28804')$time)
 
 if(length(time_Basic_steps28804) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps28804'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps28804')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps28804')$time))
 
 	shap_Basic_steps28804 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps28804')$time)
 	print(shap_Basic_steps28804)
 	if(shap_Basic_steps28804$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps28804$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps28804$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps28804, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps28804 = subset(json_data, treatment == 'Hylaa' & object == 'steps28804' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps28804)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time)
 
 if(length(time_Hylaa_steps28804) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps28804'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps28804')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time))
 
 	shap_Hylaa_steps28804 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time)
 	print(shap_Hylaa_steps28804)
 	if(shap_Hylaa_steps28804$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps28804$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps28804$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps28804, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps28804')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps28804 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 28804 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps28804
 if(length(time_Hylaa_steps28804) == expectedRuns & length(time_Basic_steps28804) == expectedRuns){
 	result_RH3_steps28804_tTest = FALSE
 	result_RH3_steps28804_wTest = FALSE
 	
 	if(shap_Hylaa_steps28804$p.value > alpha&shap_Basic_steps28804$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time, subset(json_data,treatment == 'Basic' & object == 'steps28804')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time, subset(json_data, treatment == 'Basic' & object == 'steps28804')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps28804_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps28804')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps28804_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps28804_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps28804) == expectedRuns & length(time_Basic_steps28804) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps28804')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps28804')$time))))
	 if (result_RH3_steps28804_tTest | result_RH3_steps28804_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps28804')$time)){
	   	result_RH3_steps28804 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps28804 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps28804 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps28804 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps28804 = 5
	 	result_RH3_steps28804 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps28804')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps28804')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps28804')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps28804')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps28804')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps28804) != expectedRuns & length(time_Basic_steps28804) != expectedRuns){
 	result_object_RH3_steps28804 = 4
	result_RH3_steps28804 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps28804) == expectedRuns & length(time_Basic_steps28804) != expectedRuns){
	result_object_RH3_steps28804 = 2
	result_RH3_steps28804 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps28804) != expectedRuns & length(time_Basic_steps28804) == expectedRuns){
	result_object_RH3_steps28804 = 3
	result_RH3_steps28804 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.28: Object 37445 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps37445, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps37445 = subset(json_data, treatment == 'Basic' & object == 'steps37445' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps37445)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps37445')$time)
 
 if(length(time_Basic_steps37445) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps37445'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps37445')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps37445')$time))
 
 	shap_Basic_steps37445 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps37445')$time)
 	print(shap_Basic_steps37445)
 	if(shap_Basic_steps37445$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps37445$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps37445$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps37445, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps37445 = subset(json_data, treatment == 'Hylaa' & object == 'steps37445' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps37445)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time)
 
 if(length(time_Hylaa_steps37445) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps37445'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps37445')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time))
 
 	shap_Hylaa_steps37445 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time)
 	print(shap_Hylaa_steps37445)
 	if(shap_Hylaa_steps37445$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps37445$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps37445$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps37445, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps37445')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps37445 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 37445 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps37445
 if(length(time_Hylaa_steps37445) == expectedRuns & length(time_Basic_steps37445) == expectedRuns){
 	result_RH3_steps37445_tTest = FALSE
 	result_RH3_steps37445_wTest = FALSE
 	
 	if(shap_Hylaa_steps37445$p.value > alpha&shap_Basic_steps37445$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time, subset(json_data,treatment == 'Basic' & object == 'steps37445')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time, subset(json_data, treatment == 'Basic' & object == 'steps37445')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps37445_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps37445')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps37445_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps37445_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps37445) == expectedRuns & length(time_Basic_steps37445) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps37445')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps37445')$time))))
	 if (result_RH3_steps37445_tTest | result_RH3_steps37445_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps37445')$time)){
	   	result_RH3_steps37445 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps37445 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps37445 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps37445 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps37445 = 5
	 	result_RH3_steps37445 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps37445')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps37445')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps37445')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps37445')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps37445')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps37445) != expectedRuns & length(time_Basic_steps37445) != expectedRuns){
 	result_object_RH3_steps37445 = 4
	result_RH3_steps37445 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps37445) == expectedRuns & length(time_Basic_steps37445) != expectedRuns){
	result_object_RH3_steps37445 = 2
	result_RH3_steps37445 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps37445) != expectedRuns & length(time_Basic_steps37445) == expectedRuns){
	result_object_RH3_steps37445 = 3
	result_RH3_steps37445 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.29: Object 48679 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps48679, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps48679 = subset(json_data, treatment == 'Basic' & object == 'steps48679' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps48679)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps48679')$time)
 
 if(length(time_Basic_steps48679) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps48679'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps48679')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps48679')$time))
 
 	shap_Basic_steps48679 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps48679')$time)
 	print(shap_Basic_steps48679)
 	if(shap_Basic_steps48679$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps48679$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps48679$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps48679, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps48679 = subset(json_data, treatment == 'Hylaa' & object == 'steps48679' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps48679)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time)
 
 if(length(time_Hylaa_steps48679) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps48679'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps48679')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time))
 
 	shap_Hylaa_steps48679 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time)
 	print(shap_Hylaa_steps48679)
 	if(shap_Hylaa_steps48679$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps48679$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps48679$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps48679, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps48679')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps48679 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 48679 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps48679
 if(length(time_Hylaa_steps48679) == expectedRuns & length(time_Basic_steps48679) == expectedRuns){
 	result_RH3_steps48679_tTest = FALSE
 	result_RH3_steps48679_wTest = FALSE
 	
 	if(shap_Hylaa_steps48679$p.value > alpha&shap_Basic_steps48679$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time, subset(json_data,treatment == 'Basic' & object == 'steps48679')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time, subset(json_data, treatment == 'Basic' & object == 'steps48679')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps48679_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps48679')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps48679_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps48679_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps48679) == expectedRuns & length(time_Basic_steps48679) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps48679')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps48679')$time))))
	 if (result_RH3_steps48679_tTest | result_RH3_steps48679_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps48679')$time)){
	   	result_RH3_steps48679 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps48679 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps48679 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps48679 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps48679 = 5
	 	result_RH3_steps48679 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps48679')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps48679')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps48679')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps48679')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps48679')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps48679) != expectedRuns & length(time_Basic_steps48679) != expectedRuns){
 	result_object_RH3_steps48679 = 4
	result_RH3_steps48679 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps48679) == expectedRuns & length(time_Basic_steps48679) != expectedRuns){
	result_object_RH3_steps48679 = 2
	result_RH3_steps48679 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps48679) != expectedRuns & length(time_Basic_steps48679) == expectedRuns){
	result_object_RH3_steps48679 = 3
	result_RH3_steps48679 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.30: Object 63282 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps63282, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps63282 = subset(json_data, treatment == 'Basic' & object == 'steps63282' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps63282)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps63282')$time)
 
 if(length(time_Basic_steps63282) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps63282'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps63282')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps63282')$time))
 
 	shap_Basic_steps63282 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps63282')$time)
 	print(shap_Basic_steps63282)
 	if(shap_Basic_steps63282$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps63282$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps63282$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps63282, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps63282 = subset(json_data, treatment == 'Hylaa' & object == 'steps63282' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps63282)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time)
 
 if(length(time_Hylaa_steps63282) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps63282'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps63282')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time))
 
 	shap_Hylaa_steps63282 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time)
 	print(shap_Hylaa_steps63282)
 	if(shap_Hylaa_steps63282$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps63282$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps63282$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps63282, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps63282')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps63282 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 63282 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps63282
 if(length(time_Hylaa_steps63282) == expectedRuns & length(time_Basic_steps63282) == expectedRuns){
 	result_RH3_steps63282_tTest = FALSE
 	result_RH3_steps63282_wTest = FALSE
 	
 	if(shap_Hylaa_steps63282$p.value > alpha&shap_Basic_steps63282$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time, subset(json_data,treatment == 'Basic' & object == 'steps63282')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time, subset(json_data, treatment == 'Basic' & object == 'steps63282')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps63282_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps63282')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps63282_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps63282_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps63282) == expectedRuns & length(time_Basic_steps63282) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps63282')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps63282')$time))))
	 if (result_RH3_steps63282_tTest | result_RH3_steps63282_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps63282')$time)){
	   	result_RH3_steps63282 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps63282 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps63282 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps63282 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps63282 = 5
	 	result_RH3_steps63282 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps63282')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps63282')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps63282')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps63282')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps63282')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps63282) != expectedRuns & length(time_Basic_steps63282) != expectedRuns){
 	result_object_RH3_steps63282 = 4
	result_RH3_steps63282 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps63282) == expectedRuns & length(time_Basic_steps63282) != expectedRuns){
	result_object_RH3_steps63282 = 2
	result_RH3_steps63282 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps63282) != expectedRuns & length(time_Basic_steps63282) == expectedRuns){
	result_object_RH3_steps63282 = 3
	result_RH3_steps63282 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.31: Object 82267 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps82267, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps82267 = subset(json_data, treatment == 'Basic' & object == 'steps82267' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps82267)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps82267')$time)
 
 if(length(time_Basic_steps82267) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps82267'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps82267')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps82267')$time))
 
 	shap_Basic_steps82267 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps82267')$time)
 	print(shap_Basic_steps82267)
 	if(shap_Basic_steps82267$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps82267$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps82267$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps82267, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps82267 = subset(json_data, treatment == 'Hylaa' & object == 'steps82267' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps82267)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time)
 
 if(length(time_Hylaa_steps82267) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps82267'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps82267')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time))
 
 	shap_Hylaa_steps82267 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time)
 	print(shap_Hylaa_steps82267)
 	if(shap_Hylaa_steps82267$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps82267$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps82267$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps82267, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps82267')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps82267 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 82267 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps82267
 if(length(time_Hylaa_steps82267) == expectedRuns & length(time_Basic_steps82267) == expectedRuns){
 	result_RH3_steps82267_tTest = FALSE
 	result_RH3_steps82267_wTest = FALSE
 	
 	if(shap_Hylaa_steps82267$p.value > alpha&shap_Basic_steps82267$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time, subset(json_data,treatment == 'Basic' & object == 'steps82267')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time, subset(json_data, treatment == 'Basic' & object == 'steps82267')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps82267_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps82267')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps82267_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps82267_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps82267) == expectedRuns & length(time_Basic_steps82267) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps82267')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps82267')$time))))
	 if (result_RH3_steps82267_tTest | result_RH3_steps82267_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps82267')$time)){
	   	result_RH3_steps82267 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps82267 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps82267 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps82267 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps82267 = 5
	 	result_RH3_steps82267 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps82267')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps82267')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps82267')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps82267')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps82267')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps82267) != expectedRuns & length(time_Basic_steps82267) != expectedRuns){
 	result_object_RH3_steps82267 = 4
	result_RH3_steps82267 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps82267) == expectedRuns & length(time_Basic_steps82267) != expectedRuns){
	result_object_RH3_steps82267 = 2
	result_RH3_steps82267 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps82267) != expectedRuns & length(time_Basic_steps82267) == expectedRuns){
	result_object_RH3_steps82267 = 3
	result_RH3_steps82267 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.32: Object 106948 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps106948, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps106948 = subset(json_data, treatment == 'Basic' & object == 'steps106948' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps106948)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps106948')$time)
 
 if(length(time_Basic_steps106948) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps106948'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps106948')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps106948')$time))
 
 	shap_Basic_steps106948 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps106948')$time)
 	print(shap_Basic_steps106948)
 	if(shap_Basic_steps106948$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps106948$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps106948$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps106948, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps106948 = subset(json_data, treatment == 'Hylaa' & object == 'steps106948' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps106948)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time)
 
 if(length(time_Hylaa_steps106948) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps106948'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps106948')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time))
 
 	shap_Hylaa_steps106948 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time)
 	print(shap_Hylaa_steps106948)
 	if(shap_Hylaa_steps106948$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps106948$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps106948$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps106948, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps106948')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps106948 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 106948 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps106948
 if(length(time_Hylaa_steps106948) == expectedRuns & length(time_Basic_steps106948) == expectedRuns){
 	result_RH3_steps106948_tTest = FALSE
 	result_RH3_steps106948_wTest = FALSE
 	
 	if(shap_Hylaa_steps106948$p.value > alpha&shap_Basic_steps106948$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time, subset(json_data,treatment == 'Basic' & object == 'steps106948')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time, subset(json_data, treatment == 'Basic' & object == 'steps106948')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps106948_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps106948')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps106948_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps106948_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps106948) == expectedRuns & length(time_Basic_steps106948) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps106948')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps106948')$time))))
	 if (result_RH3_steps106948_tTest | result_RH3_steps106948_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps106948')$time)){
	   	result_RH3_steps106948 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps106948 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps106948 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps106948 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps106948 = 5
	 	result_RH3_steps106948 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps106948')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps106948')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps106948')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps106948')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps106948')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps106948) != expectedRuns & length(time_Basic_steps106948) != expectedRuns){
 	result_object_RH3_steps106948 = 4
	result_RH3_steps106948 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps106948) == expectedRuns & length(time_Basic_steps106948) != expectedRuns){
	result_object_RH3_steps106948 = 2
	result_RH3_steps106948 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps106948) != expectedRuns & length(time_Basic_steps106948) == expectedRuns){
	result_object_RH3_steps106948 = 3
	result_RH3_steps106948 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.33: Object 139032 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps139032, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps139032 = subset(json_data, treatment == 'Basic' & object == 'steps139032' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps139032)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps139032')$time)
 
 if(length(time_Basic_steps139032) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps139032'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps139032')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps139032')$time))
 
 	shap_Basic_steps139032 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps139032')$time)
 	print(shap_Basic_steps139032)
 	if(shap_Basic_steps139032$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps139032$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps139032$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps139032, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps139032 = subset(json_data, treatment == 'Hylaa' & object == 'steps139032' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps139032)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time)
 
 if(length(time_Hylaa_steps139032) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps139032'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps139032')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time))
 
 	shap_Hylaa_steps139032 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time)
 	print(shap_Hylaa_steps139032)
 	if(shap_Hylaa_steps139032$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps139032$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps139032$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps139032, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps139032')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps139032 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 139032 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps139032
 if(length(time_Hylaa_steps139032) == expectedRuns & length(time_Basic_steps139032) == expectedRuns){
 	result_RH3_steps139032_tTest = FALSE
 	result_RH3_steps139032_wTest = FALSE
 	
 	if(shap_Hylaa_steps139032$p.value > alpha&shap_Basic_steps139032$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time, subset(json_data,treatment == 'Basic' & object == 'steps139032')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time, subset(json_data, treatment == 'Basic' & object == 'steps139032')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps139032_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps139032')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps139032_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps139032_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps139032) == expectedRuns & length(time_Basic_steps139032) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps139032')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps139032')$time))))
	 if (result_RH3_steps139032_tTest | result_RH3_steps139032_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps139032')$time)){
	   	result_RH3_steps139032 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps139032 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps139032 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps139032 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps139032 = 5
	 	result_RH3_steps139032 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps139032')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps139032')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps139032')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps139032')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps139032')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps139032) != expectedRuns & length(time_Basic_steps139032) != expectedRuns){
 	result_object_RH3_steps139032 = 4
	result_RH3_steps139032 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps139032) == expectedRuns & length(time_Basic_steps139032) != expectedRuns){
	result_object_RH3_steps139032 = 2
	result_RH3_steps139032 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps139032) != expectedRuns & length(time_Basic_steps139032) == expectedRuns){
	result_object_RH3_steps139032 = 3
	result_RH3_steps139032 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


\subsubsection{RH3.34: Object 180742 steps}

 \textbf{Runtime for Basic}
 <<RH3_Basic_steps180742, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Basic_steps180742 = subset(json_data, treatment == 'Basic' & object == 'steps180742' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Basic_steps180742)))					
 summary(subset(json_data, treatment == 'Basic' & object == 'steps180742')$time)
 
 if(length(time_Basic_steps180742) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Basic' & object == 'steps180742'), "time", min(subset(json_data, treatment == 'Basic'& object == 'steps180742')$time), max(subset(json_data, treatment == 'Basic' & object == 'steps180742')$time))
 
 	shap_Basic_steps180742 = shapiro.test(subset(json_data, treatment == 'Basic' & object == 'steps180742')$time)
 	print(shap_Basic_steps180742)
 	if(shap_Basic_steps180742$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Basic_steps180742$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Basic_steps180742$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for Hylaa}
 <<RH3_Hylaa_steps180742, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps180742 = subset(json_data, treatment == 'Hylaa' & object == 'steps180742' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps180742)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time)
 
 if(length(time_Hylaa_steps180742) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps180742'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps180742')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time))
 
 	shap_Hylaa_steps180742 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time)
 	print(shap_Hylaa_steps180742)
 	if(shap_Hylaa_steps180742$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps180742$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps180742$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_steps180742, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps180742')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH3_steps180742 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 180742 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH3_steps180742
 if(length(time_Hylaa_steps180742) == expectedRuns & length(time_Basic_steps180742) == expectedRuns){
 	result_RH3_steps180742_tTest = FALSE
 	result_RH3_steps180742_wTest = FALSE
 	
 	if(shap_Hylaa_steps180742$p.value > alpha&shap_Basic_steps180742$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time, subset(json_data,treatment == 'Basic' & object == 'steps180742')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time, subset(json_data, treatment == 'Basic' & object == 'steps180742')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_steps180742_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'Basic') & object == 'steps180742')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps180742_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_steps180742_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps180742) == expectedRuns & length(time_Basic_steps180742) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time)))
	 print(paste("Mean Runtime for Basic: ", mean(subset(json_data, treatment == 'Basic' & object == 'steps180742')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time) - mean(subset(json_data, treatment == 'Basic' & object == 'steps180742')$time))))
	 if (result_RH3_steps180742_tTest | result_RH3_steps180742_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps180742')$time)){
	   	result_RH3_steps180742 = "Hylaa \\textgreater{} Basic"
	   	result_object_RH3_steps180742 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_steps180742 = "Hylaa \\textless{} Basic"
	   	result_object_RH3_steps180742 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_steps180742 = 5
	 	result_RH3_steps180742 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps180742')$time) > mean(subset(json_data, treatment == 'Basic' & object == 'steps180742')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps180742')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time)) / mean(subset(json_data, treatment == 'Basic' & object == 'steps180742')$time)), "% greater than \n Runtime for Basic"))				
	 }else{
	     cat(paste("Runtime for Basic is ", 100 * (abs(mean(subset(json_data, treatment == 'Basic' & object == 'steps180742')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps180742) != expectedRuns & length(time_Basic_steps180742) != expectedRuns){
 	result_object_RH3_steps180742 = 4
	result_RH3_steps180742 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(time_Hylaa_steps180742) == expectedRuns & length(time_Basic_steps180742) != expectedRuns){
	result_object_RH3_steps180742 = 2
	result_RH3_steps180742 = "Hylaa"
	result_RH3_Hylaa = result_RH3_Hylaa + 1			
}
if (length(time_Hylaa_steps180742) != expectedRuns & length(time_Basic_steps180742) == expectedRuns){
	result_object_RH3_steps180742 = 3
	result_RH3_steps180742 = "Basic"
	result_RH3_Basic = result_RH3_Basic + 1			
}
@  


 
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH3_result = list(hypothesis = "RH3", results = c(result_RH3_less / result_RH3_objects, result_RH3_greater / result_RH3_objects, result_RH3_Hylaa / result_RH3_objects, result_RH3_Basic / result_RH3_objects, result_RH3_none / result_RH3_objects, result_RH3_inconclusive / result_RH3_objects), objectResults = list( list(object = 'steps31', result = result_object_RH3_steps31),  list(object = 'steps40', result = result_object_RH3_steps40),  list(object = 'steps53', result = result_object_RH3_steps53),  list(object = 'steps68', result = result_object_RH3_steps68),  list(object = 'steps89', result = result_object_RH3_steps89),  list(object = 'steps116', result = result_object_RH3_steps116),  list(object = 'steps151', result = result_object_RH3_steps151),  list(object = 'steps197', result = result_object_RH3_steps197),  list(object = 'steps256', result = result_object_RH3_steps256),  list(object = 'steps332', result = result_object_RH3_steps332),  list(object = 'steps432', result = result_object_RH3_steps432),  list(object = 'steps562', result = result_object_RH3_steps562),  list(object = 'steps731', result = result_object_RH3_steps731),  list(object = 'steps951', result = result_object_RH3_steps951),  list(object = 'steps1236', result = result_object_RH3_steps1236),  list(object = 'steps1607', result = result_object_RH3_steps1607),  list(object = 'steps2089', result = result_object_RH3_steps2089),  list(object = 'steps2716', result = result_object_RH3_steps2716),  list(object = 'steps3531', result = result_object_RH3_steps3531),  list(object = 'steps4590', result = result_object_RH3_steps4590),  list(object = 'steps5967', result = result_object_RH3_steps5967),  list(object = 'steps7757', result = result_object_RH3_steps7757),  list(object = 'steps10085', result = result_object_RH3_steps10085),  list(object = 'steps13110', result = result_object_RH3_steps13110),  list(object = 'steps17043', result = result_object_RH3_steps17043),  list(object = 'steps22157', result = result_object_RH3_steps22157),  list(object = 'steps28804', result = result_object_RH3_steps28804),  list(object = 'steps37445', result = result_object_RH3_steps37445),  list(object = 'steps48679', result = result_object_RH3_steps48679),  list(object = 'steps63282', result = result_object_RH3_steps63282),  list(object = 'steps82267', result = result_object_RH3_steps82267),  list(object = 'steps106948', result = result_object_RH3_steps106948),  list(object = 'steps139032', result = result_object_RH3_steps139032),  list(object = 'steps180742', result = result_object_RH3_steps180742) ))	
	@
	
	\subsubsection{RH3 Results: Runtime Hylaa = Basic}
	
	
	\begin{table}[H]
	\centering
	\caption{RH3 Results per Object}
	\begin{tabular}{ll}
	\textbf{31 steps} & \Sexpr{result_RH3_steps31} \\
	\textbf{40 steps} & \Sexpr{result_RH3_steps40} \\
	\textbf{53 steps} & \Sexpr{result_RH3_steps53} \\
	\textbf{68 steps} & \Sexpr{result_RH3_steps68} \\
	\textbf{89 steps} & \Sexpr{result_RH3_steps89} \\
	\textbf{116 steps} & \Sexpr{result_RH3_steps116} \\
	\textbf{151 steps} & \Sexpr{result_RH3_steps151} \\
	\textbf{197 steps} & \Sexpr{result_RH3_steps197} \\
	\textbf{256 steps} & \Sexpr{result_RH3_steps256} \\
	\textbf{332 steps} & \Sexpr{result_RH3_steps332} \\
	\textbf{432 steps} & \Sexpr{result_RH3_steps432} \\
	\textbf{562 steps} & \Sexpr{result_RH3_steps562} \\
	\textbf{731 steps} & \Sexpr{result_RH3_steps731} \\
	\textbf{951 steps} & \Sexpr{result_RH3_steps951} \\
	\textbf{1236 steps} & \Sexpr{result_RH3_steps1236} \\
	\textbf{1607 steps} & \Sexpr{result_RH3_steps1607} \\
	\textbf{2089 steps} & \Sexpr{result_RH3_steps2089} \\
	\textbf{2716 steps} & \Sexpr{result_RH3_steps2716} \\
	\textbf{3531 steps} & \Sexpr{result_RH3_steps3531} \\
	\textbf{4590 steps} & \Sexpr{result_RH3_steps4590} \\
	\textbf{5967 steps} & \Sexpr{result_RH3_steps5967} \\
	\textbf{7757 steps} & \Sexpr{result_RH3_steps7757} \\
	\textbf{10085 steps} & \Sexpr{result_RH3_steps10085} \\
	\textbf{13110 steps} & \Sexpr{result_RH3_steps13110} \\
	\textbf{17043 steps} & \Sexpr{result_RH3_steps17043} \\
	\textbf{22157 steps} & \Sexpr{result_RH3_steps22157} \\
	\textbf{28804 steps} & \Sexpr{result_RH3_steps28804} \\
	\textbf{37445 steps} & \Sexpr{result_RH3_steps37445} \\
	\textbf{48679 steps} & \Sexpr{result_RH3_steps48679} \\
	\textbf{63282 steps} & \Sexpr{result_RH3_steps63282} \\
	\textbf{82267 steps} & \Sexpr{result_RH3_steps82267} \\
	\textbf{106948 steps} & \Sexpr{result_RH3_steps106948} \\
	\textbf{139032 steps} & \Sexpr{result_RH3_steps139032} \\
	\textbf{180742 steps} & \Sexpr{result_RH3_steps180742} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH3 Results Summary}
	\begin{tabular}{ll}
	\textbf{Hylaa \textless{} Basic:}& \Sexpr{100 * result_RH3_less / result_RH3_objects}\% \\
	\textbf{Hylaa \textgreater{} Basic:}& \Sexpr{100 * result_RH3_greater / result_RH3_objects}\%\\
	\textbf{Hylaa:} & \Sexpr{100 * result_RH3_Hylaa / result_RH3_objects}\%\\
	\textbf{Basic:} & \Sexpr{100 * result_RH3_Basic / result_RH3_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH3_none / result_RH3_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH3_inconclusive / result_RH3_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	



\subsection{RH4: Runtime time for Hylaa is equals than runtime time for NoInput}

 <<RH4, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 
 result_RH4_objects=34
 result_RH4_less=0
 result_RH4_greater=0
 result_RH4_Hylaa=0
 result_RH4_NoInput=0
 result_RH4_none=0
 result_RH4_inconclusive=0
 @
 
 <<overview_RH4, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 DF <- data_summary(subset(json_data, (object == 'steps31' |object == 'steps40' |object == 'steps53' |object == 'steps68' |object == 'steps89' |object == 'steps116' |object == 'steps151' |object == 'steps197' |object == 'steps256' |object == 'steps332' |object == 'steps432' |object == 'steps562' |object == 'steps731' |object == 'steps951' |object == 'steps1236' |object == 'steps1607' |object == 'steps2089' |object == 'steps2716' |object == 'steps3531' |object == 'steps4590' |object == 'steps5967' |object == 'steps7757' |object == 'steps10085' |object == 'steps13110' |object == 'steps17043' |object == 'steps22157' |object == 'steps28804' |object == 'steps37445' |object == 'steps48679' |object == 'steps63282' |object == 'steps82267' |object == 'steps106948' |object == 'steps139032' |object == 'steps180742' ) & (treatment == 'Hylaa' | treatment == 'NoInput')), varname = "time", groupnames = c("treatmentDescription", "objectLabel", "objectOrder"))
 		
 		ggplot(DF, aes(x=objectLabel, y=time, group=treatmentDescription, color=treatmentDescription)) + 
 		    geom_errorbar(aes(ymin=time-sd, ymax=time+sd), width=.1, linetype=3) +
 		    geom_line() + geom_point()+
 		   scale_color_brewer(palette="Paired") +
 		   theme_bw() +
 		  scale_x_log10(name = "Number of steps(log scale)", breaks_log(data=DF$objectLabel,steps=10))+
 		  
 		  scale_y_continuous(name = "Runtime (seconds)")+
 		  ggtitle("Runtime Overview") + 
 		  theme(legend.title = element_blank())	
 @
 	

\subsubsection{RH4.1: Object 31 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps31, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps31 = subset(json_data, treatment == 'Hylaa' & object == 'steps31' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps31)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time)
 
 if(length(time_Hylaa_steps31) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps31'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps31')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time))
 
 	shap_Hylaa_steps31 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time)
 	print(shap_Hylaa_steps31)
 	if(shap_Hylaa_steps31$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps31$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps31$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps31, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps31 = subset(json_data, treatment == 'NoInput' & object == 'steps31' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps31)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps31')$time)
 
 if(length(time_NoInput_steps31) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps31'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps31')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps31')$time))
 
 	shap_NoInput_steps31 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps31')$time)
 	print(shap_NoInput_steps31)
 	if(shap_NoInput_steps31$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps31$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps31$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps31, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps31')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps31 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 31 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps31
 if(length(time_Hylaa_steps31) == expectedRuns & length(time_NoInput_steps31) == expectedRuns){
 	result_RH4_steps31_tTest = FALSE
 	result_RH4_steps31_wTest = FALSE
 	
 	if(shap_Hylaa_steps31$p.value > alpha&shap_NoInput_steps31$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time, subset(json_data,treatment == 'NoInput' & object == 'steps31')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time, subset(json_data, treatment == 'NoInput' & object == 'steps31')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps31_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps31')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps31_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps31_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps31) == expectedRuns & length(time_NoInput_steps31) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps31')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps31')$time))))
	 if (result_RH4_steps31_tTest | result_RH4_steps31_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps31')$time)){
	   	result_RH4_steps31 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps31 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps31 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps31 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps31 = 5
	 	result_RH4_steps31 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps31')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps31')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps31')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps31')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps31')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps31')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps31) != expectedRuns & length(time_NoInput_steps31) != expectedRuns){
 	result_object_RH4_steps31 = 4
	result_RH4_steps31 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps31) == expectedRuns & length(time_NoInput_steps31) != expectedRuns){
	result_object_RH4_steps31 = 2
	result_RH4_steps31 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps31) != expectedRuns & length(time_NoInput_steps31) == expectedRuns){
	result_object_RH4_steps31 = 3
	result_RH4_steps31 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.2: Object 40 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps40, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps40 = subset(json_data, treatment == 'Hylaa' & object == 'steps40' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps40)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time)
 
 if(length(time_Hylaa_steps40) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps40'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps40')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time))
 
 	shap_Hylaa_steps40 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time)
 	print(shap_Hylaa_steps40)
 	if(shap_Hylaa_steps40$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps40$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps40$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps40, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps40 = subset(json_data, treatment == 'NoInput' & object == 'steps40' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps40)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps40')$time)
 
 if(length(time_NoInput_steps40) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps40'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps40')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps40')$time))
 
 	shap_NoInput_steps40 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps40')$time)
 	print(shap_NoInput_steps40)
 	if(shap_NoInput_steps40$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps40$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps40$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps40, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps40')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps40 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 40 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps40
 if(length(time_Hylaa_steps40) == expectedRuns & length(time_NoInput_steps40) == expectedRuns){
 	result_RH4_steps40_tTest = FALSE
 	result_RH4_steps40_wTest = FALSE
 	
 	if(shap_Hylaa_steps40$p.value > alpha&shap_NoInput_steps40$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time, subset(json_data,treatment == 'NoInput' & object == 'steps40')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time, subset(json_data, treatment == 'NoInput' & object == 'steps40')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps40_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps40')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps40_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps40_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps40) == expectedRuns & length(time_NoInput_steps40) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps40')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps40')$time))))
	 if (result_RH4_steps40_tTest | result_RH4_steps40_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps40')$time)){
	   	result_RH4_steps40 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps40 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps40 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps40 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps40 = 5
	 	result_RH4_steps40 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps40')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps40')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps40')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps40')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps40')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps40')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps40) != expectedRuns & length(time_NoInput_steps40) != expectedRuns){
 	result_object_RH4_steps40 = 4
	result_RH4_steps40 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps40) == expectedRuns & length(time_NoInput_steps40) != expectedRuns){
	result_object_RH4_steps40 = 2
	result_RH4_steps40 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps40) != expectedRuns & length(time_NoInput_steps40) == expectedRuns){
	result_object_RH4_steps40 = 3
	result_RH4_steps40 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.3: Object 53 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps53, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps53 = subset(json_data, treatment == 'Hylaa' & object == 'steps53' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps53)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time)
 
 if(length(time_Hylaa_steps53) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps53'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps53')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time))
 
 	shap_Hylaa_steps53 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time)
 	print(shap_Hylaa_steps53)
 	if(shap_Hylaa_steps53$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps53$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps53$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps53, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps53 = subset(json_data, treatment == 'NoInput' & object == 'steps53' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps53)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps53')$time)
 
 if(length(time_NoInput_steps53) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps53'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps53')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps53')$time))
 
 	shap_NoInput_steps53 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps53')$time)
 	print(shap_NoInput_steps53)
 	if(shap_NoInput_steps53$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps53$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps53$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps53, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps53')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps53 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 53 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps53
 if(length(time_Hylaa_steps53) == expectedRuns & length(time_NoInput_steps53) == expectedRuns){
 	result_RH4_steps53_tTest = FALSE
 	result_RH4_steps53_wTest = FALSE
 	
 	if(shap_Hylaa_steps53$p.value > alpha&shap_NoInput_steps53$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time, subset(json_data,treatment == 'NoInput' & object == 'steps53')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time, subset(json_data, treatment == 'NoInput' & object == 'steps53')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps53_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps53')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps53_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps53_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps53) == expectedRuns & length(time_NoInput_steps53) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps53')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps53')$time))))
	 if (result_RH4_steps53_tTest | result_RH4_steps53_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps53')$time)){
	   	result_RH4_steps53 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps53 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps53 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps53 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps53 = 5
	 	result_RH4_steps53 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps53')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps53')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps53')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps53')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps53')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps53')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps53) != expectedRuns & length(time_NoInput_steps53) != expectedRuns){
 	result_object_RH4_steps53 = 4
	result_RH4_steps53 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps53) == expectedRuns & length(time_NoInput_steps53) != expectedRuns){
	result_object_RH4_steps53 = 2
	result_RH4_steps53 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps53) != expectedRuns & length(time_NoInput_steps53) == expectedRuns){
	result_object_RH4_steps53 = 3
	result_RH4_steps53 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.4: Object 68 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps68, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps68 = subset(json_data, treatment == 'Hylaa' & object == 'steps68' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps68)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time)
 
 if(length(time_Hylaa_steps68) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps68'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps68')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time))
 
 	shap_Hylaa_steps68 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time)
 	print(shap_Hylaa_steps68)
 	if(shap_Hylaa_steps68$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps68$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps68$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps68, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps68 = subset(json_data, treatment == 'NoInput' & object == 'steps68' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps68)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps68')$time)
 
 if(length(time_NoInput_steps68) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps68'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps68')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps68')$time))
 
 	shap_NoInput_steps68 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps68')$time)
 	print(shap_NoInput_steps68)
 	if(shap_NoInput_steps68$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps68$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps68$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps68, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps68')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps68 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 68 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps68
 if(length(time_Hylaa_steps68) == expectedRuns & length(time_NoInput_steps68) == expectedRuns){
 	result_RH4_steps68_tTest = FALSE
 	result_RH4_steps68_wTest = FALSE
 	
 	if(shap_Hylaa_steps68$p.value > alpha&shap_NoInput_steps68$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time, subset(json_data,treatment == 'NoInput' & object == 'steps68')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time, subset(json_data, treatment == 'NoInput' & object == 'steps68')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps68_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps68')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps68_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps68_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps68) == expectedRuns & length(time_NoInput_steps68) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps68')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps68')$time))))
	 if (result_RH4_steps68_tTest | result_RH4_steps68_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps68')$time)){
	   	result_RH4_steps68 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps68 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps68 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps68 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps68 = 5
	 	result_RH4_steps68 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps68')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps68')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps68')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps68')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps68')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps68')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps68) != expectedRuns & length(time_NoInput_steps68) != expectedRuns){
 	result_object_RH4_steps68 = 4
	result_RH4_steps68 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps68) == expectedRuns & length(time_NoInput_steps68) != expectedRuns){
	result_object_RH4_steps68 = 2
	result_RH4_steps68 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps68) != expectedRuns & length(time_NoInput_steps68) == expectedRuns){
	result_object_RH4_steps68 = 3
	result_RH4_steps68 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.5: Object 89 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps89, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps89 = subset(json_data, treatment == 'Hylaa' & object == 'steps89' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps89)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time)
 
 if(length(time_Hylaa_steps89) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps89'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps89')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time))
 
 	shap_Hylaa_steps89 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time)
 	print(shap_Hylaa_steps89)
 	if(shap_Hylaa_steps89$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps89$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps89$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps89, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps89 = subset(json_data, treatment == 'NoInput' & object == 'steps89' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps89)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps89')$time)
 
 if(length(time_NoInput_steps89) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps89'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps89')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps89')$time))
 
 	shap_NoInput_steps89 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps89')$time)
 	print(shap_NoInput_steps89)
 	if(shap_NoInput_steps89$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps89$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps89$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps89, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps89')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps89 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 89 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps89
 if(length(time_Hylaa_steps89) == expectedRuns & length(time_NoInput_steps89) == expectedRuns){
 	result_RH4_steps89_tTest = FALSE
 	result_RH4_steps89_wTest = FALSE
 	
 	if(shap_Hylaa_steps89$p.value > alpha&shap_NoInput_steps89$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time, subset(json_data,treatment == 'NoInput' & object == 'steps89')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time, subset(json_data, treatment == 'NoInput' & object == 'steps89')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps89_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps89')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps89_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps89_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps89) == expectedRuns & length(time_NoInput_steps89) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps89')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps89')$time))))
	 if (result_RH4_steps89_tTest | result_RH4_steps89_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps89')$time)){
	   	result_RH4_steps89 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps89 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps89 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps89 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps89 = 5
	 	result_RH4_steps89 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps89')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps89')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps89')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps89')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps89')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps89')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps89) != expectedRuns & length(time_NoInput_steps89) != expectedRuns){
 	result_object_RH4_steps89 = 4
	result_RH4_steps89 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps89) == expectedRuns & length(time_NoInput_steps89) != expectedRuns){
	result_object_RH4_steps89 = 2
	result_RH4_steps89 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps89) != expectedRuns & length(time_NoInput_steps89) == expectedRuns){
	result_object_RH4_steps89 = 3
	result_RH4_steps89 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.6: Object 116 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps116, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps116 = subset(json_data, treatment == 'Hylaa' & object == 'steps116' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps116)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time)
 
 if(length(time_Hylaa_steps116) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps116'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps116')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time))
 
 	shap_Hylaa_steps116 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time)
 	print(shap_Hylaa_steps116)
 	if(shap_Hylaa_steps116$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps116$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps116$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps116, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps116 = subset(json_data, treatment == 'NoInput' & object == 'steps116' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps116)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps116')$time)
 
 if(length(time_NoInput_steps116) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps116'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps116')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps116')$time))
 
 	shap_NoInput_steps116 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps116')$time)
 	print(shap_NoInput_steps116)
 	if(shap_NoInput_steps116$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps116$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps116$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps116, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps116')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps116 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 116 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps116
 if(length(time_Hylaa_steps116) == expectedRuns & length(time_NoInput_steps116) == expectedRuns){
 	result_RH4_steps116_tTest = FALSE
 	result_RH4_steps116_wTest = FALSE
 	
 	if(shap_Hylaa_steps116$p.value > alpha&shap_NoInput_steps116$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time, subset(json_data,treatment == 'NoInput' & object == 'steps116')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time, subset(json_data, treatment == 'NoInput' & object == 'steps116')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps116_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps116')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps116_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps116_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps116) == expectedRuns & length(time_NoInput_steps116) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps116')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps116')$time))))
	 if (result_RH4_steps116_tTest | result_RH4_steps116_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps116')$time)){
	   	result_RH4_steps116 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps116 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps116 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps116 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps116 = 5
	 	result_RH4_steps116 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps116')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps116')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps116')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps116')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps116')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps116')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps116) != expectedRuns & length(time_NoInput_steps116) != expectedRuns){
 	result_object_RH4_steps116 = 4
	result_RH4_steps116 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps116) == expectedRuns & length(time_NoInput_steps116) != expectedRuns){
	result_object_RH4_steps116 = 2
	result_RH4_steps116 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps116) != expectedRuns & length(time_NoInput_steps116) == expectedRuns){
	result_object_RH4_steps116 = 3
	result_RH4_steps116 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.7: Object 151 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps151, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps151 = subset(json_data, treatment == 'Hylaa' & object == 'steps151' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps151)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time)
 
 if(length(time_Hylaa_steps151) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps151'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps151')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time))
 
 	shap_Hylaa_steps151 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time)
 	print(shap_Hylaa_steps151)
 	if(shap_Hylaa_steps151$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps151$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps151$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps151, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps151 = subset(json_data, treatment == 'NoInput' & object == 'steps151' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps151)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps151')$time)
 
 if(length(time_NoInput_steps151) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps151'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps151')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps151')$time))
 
 	shap_NoInput_steps151 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps151')$time)
 	print(shap_NoInput_steps151)
 	if(shap_NoInput_steps151$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps151$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps151$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps151, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps151')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps151 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 151 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps151
 if(length(time_Hylaa_steps151) == expectedRuns & length(time_NoInput_steps151) == expectedRuns){
 	result_RH4_steps151_tTest = FALSE
 	result_RH4_steps151_wTest = FALSE
 	
 	if(shap_Hylaa_steps151$p.value > alpha&shap_NoInput_steps151$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time, subset(json_data,treatment == 'NoInput' & object == 'steps151')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time, subset(json_data, treatment == 'NoInput' & object == 'steps151')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps151_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps151')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps151_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps151_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps151) == expectedRuns & length(time_NoInput_steps151) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps151')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps151')$time))))
	 if (result_RH4_steps151_tTest | result_RH4_steps151_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps151')$time)){
	   	result_RH4_steps151 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps151 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps151 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps151 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps151 = 5
	 	result_RH4_steps151 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps151')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps151')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps151')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps151')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps151')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps151')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps151) != expectedRuns & length(time_NoInput_steps151) != expectedRuns){
 	result_object_RH4_steps151 = 4
	result_RH4_steps151 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps151) == expectedRuns & length(time_NoInput_steps151) != expectedRuns){
	result_object_RH4_steps151 = 2
	result_RH4_steps151 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps151) != expectedRuns & length(time_NoInput_steps151) == expectedRuns){
	result_object_RH4_steps151 = 3
	result_RH4_steps151 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.8: Object 197 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps197, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps197 = subset(json_data, treatment == 'Hylaa' & object == 'steps197' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps197)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time)
 
 if(length(time_Hylaa_steps197) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps197'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps197')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time))
 
 	shap_Hylaa_steps197 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time)
 	print(shap_Hylaa_steps197)
 	if(shap_Hylaa_steps197$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps197$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps197$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps197, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps197 = subset(json_data, treatment == 'NoInput' & object == 'steps197' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps197)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps197')$time)
 
 if(length(time_NoInput_steps197) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps197'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps197')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps197')$time))
 
 	shap_NoInput_steps197 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps197')$time)
 	print(shap_NoInput_steps197)
 	if(shap_NoInput_steps197$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps197$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps197$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps197, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps197')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps197 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 197 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps197
 if(length(time_Hylaa_steps197) == expectedRuns & length(time_NoInput_steps197) == expectedRuns){
 	result_RH4_steps197_tTest = FALSE
 	result_RH4_steps197_wTest = FALSE
 	
 	if(shap_Hylaa_steps197$p.value > alpha&shap_NoInput_steps197$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time, subset(json_data,treatment == 'NoInput' & object == 'steps197')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time, subset(json_data, treatment == 'NoInput' & object == 'steps197')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps197_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps197')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps197_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps197_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps197) == expectedRuns & length(time_NoInput_steps197) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps197')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps197')$time))))
	 if (result_RH4_steps197_tTest | result_RH4_steps197_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps197')$time)){
	   	result_RH4_steps197 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps197 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps197 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps197 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps197 = 5
	 	result_RH4_steps197 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps197')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps197')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps197')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps197')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps197')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps197')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps197) != expectedRuns & length(time_NoInput_steps197) != expectedRuns){
 	result_object_RH4_steps197 = 4
	result_RH4_steps197 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps197) == expectedRuns & length(time_NoInput_steps197) != expectedRuns){
	result_object_RH4_steps197 = 2
	result_RH4_steps197 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps197) != expectedRuns & length(time_NoInput_steps197) == expectedRuns){
	result_object_RH4_steps197 = 3
	result_RH4_steps197 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.9: Object 256 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps256, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps256 = subset(json_data, treatment == 'Hylaa' & object == 'steps256' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps256)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time)
 
 if(length(time_Hylaa_steps256) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps256'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps256')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time))
 
 	shap_Hylaa_steps256 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time)
 	print(shap_Hylaa_steps256)
 	if(shap_Hylaa_steps256$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps256$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps256$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps256, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps256 = subset(json_data, treatment == 'NoInput' & object == 'steps256' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps256)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps256')$time)
 
 if(length(time_NoInput_steps256) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps256'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps256')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps256')$time))
 
 	shap_NoInput_steps256 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps256')$time)
 	print(shap_NoInput_steps256)
 	if(shap_NoInput_steps256$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps256$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps256$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps256, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps256')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps256 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 256 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps256
 if(length(time_Hylaa_steps256) == expectedRuns & length(time_NoInput_steps256) == expectedRuns){
 	result_RH4_steps256_tTest = FALSE
 	result_RH4_steps256_wTest = FALSE
 	
 	if(shap_Hylaa_steps256$p.value > alpha&shap_NoInput_steps256$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time, subset(json_data,treatment == 'NoInput' & object == 'steps256')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time, subset(json_data, treatment == 'NoInput' & object == 'steps256')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps256_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps256')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps256_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps256_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps256) == expectedRuns & length(time_NoInput_steps256) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps256')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps256')$time))))
	 if (result_RH4_steps256_tTest | result_RH4_steps256_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps256')$time)){
	   	result_RH4_steps256 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps256 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps256 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps256 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps256 = 5
	 	result_RH4_steps256 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps256')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps256')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps256')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps256')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps256')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps256')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps256) != expectedRuns & length(time_NoInput_steps256) != expectedRuns){
 	result_object_RH4_steps256 = 4
	result_RH4_steps256 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps256) == expectedRuns & length(time_NoInput_steps256) != expectedRuns){
	result_object_RH4_steps256 = 2
	result_RH4_steps256 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps256) != expectedRuns & length(time_NoInput_steps256) == expectedRuns){
	result_object_RH4_steps256 = 3
	result_RH4_steps256 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.10: Object 332 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps332, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps332 = subset(json_data, treatment == 'Hylaa' & object == 'steps332' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps332)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time)
 
 if(length(time_Hylaa_steps332) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps332'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps332')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time))
 
 	shap_Hylaa_steps332 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time)
 	print(shap_Hylaa_steps332)
 	if(shap_Hylaa_steps332$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps332$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps332$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps332, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps332 = subset(json_data, treatment == 'NoInput' & object == 'steps332' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps332)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps332')$time)
 
 if(length(time_NoInput_steps332) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps332'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps332')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps332')$time))
 
 	shap_NoInput_steps332 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps332')$time)
 	print(shap_NoInput_steps332)
 	if(shap_NoInput_steps332$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps332$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps332$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps332, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps332')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps332 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 332 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps332
 if(length(time_Hylaa_steps332) == expectedRuns & length(time_NoInput_steps332) == expectedRuns){
 	result_RH4_steps332_tTest = FALSE
 	result_RH4_steps332_wTest = FALSE
 	
 	if(shap_Hylaa_steps332$p.value > alpha&shap_NoInput_steps332$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time, subset(json_data,treatment == 'NoInput' & object == 'steps332')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time, subset(json_data, treatment == 'NoInput' & object == 'steps332')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps332_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps332')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps332_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps332_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps332) == expectedRuns & length(time_NoInput_steps332) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps332')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps332')$time))))
	 if (result_RH4_steps332_tTest | result_RH4_steps332_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps332')$time)){
	   	result_RH4_steps332 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps332 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps332 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps332 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps332 = 5
	 	result_RH4_steps332 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps332')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps332')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps332')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps332')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps332')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps332')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps332) != expectedRuns & length(time_NoInput_steps332) != expectedRuns){
 	result_object_RH4_steps332 = 4
	result_RH4_steps332 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps332) == expectedRuns & length(time_NoInput_steps332) != expectedRuns){
	result_object_RH4_steps332 = 2
	result_RH4_steps332 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps332) != expectedRuns & length(time_NoInput_steps332) == expectedRuns){
	result_object_RH4_steps332 = 3
	result_RH4_steps332 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.11: Object 432 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps432, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps432 = subset(json_data, treatment == 'Hylaa' & object == 'steps432' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps432)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time)
 
 if(length(time_Hylaa_steps432) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps432'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps432')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time))
 
 	shap_Hylaa_steps432 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time)
 	print(shap_Hylaa_steps432)
 	if(shap_Hylaa_steps432$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps432$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps432$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps432, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps432 = subset(json_data, treatment == 'NoInput' & object == 'steps432' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps432)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps432')$time)
 
 if(length(time_NoInput_steps432) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps432'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps432')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps432')$time))
 
 	shap_NoInput_steps432 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps432')$time)
 	print(shap_NoInput_steps432)
 	if(shap_NoInput_steps432$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps432$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps432$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps432, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps432')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps432 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 432 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps432
 if(length(time_Hylaa_steps432) == expectedRuns & length(time_NoInput_steps432) == expectedRuns){
 	result_RH4_steps432_tTest = FALSE
 	result_RH4_steps432_wTest = FALSE
 	
 	if(shap_Hylaa_steps432$p.value > alpha&shap_NoInput_steps432$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time, subset(json_data,treatment == 'NoInput' & object == 'steps432')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time, subset(json_data, treatment == 'NoInput' & object == 'steps432')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps432_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps432')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps432_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps432_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps432) == expectedRuns & length(time_NoInput_steps432) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps432')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps432')$time))))
	 if (result_RH4_steps432_tTest | result_RH4_steps432_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps432')$time)){
	   	result_RH4_steps432 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps432 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps432 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps432 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps432 = 5
	 	result_RH4_steps432 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps432')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps432')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps432')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps432')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps432')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps432')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps432) != expectedRuns & length(time_NoInput_steps432) != expectedRuns){
 	result_object_RH4_steps432 = 4
	result_RH4_steps432 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps432) == expectedRuns & length(time_NoInput_steps432) != expectedRuns){
	result_object_RH4_steps432 = 2
	result_RH4_steps432 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps432) != expectedRuns & length(time_NoInput_steps432) == expectedRuns){
	result_object_RH4_steps432 = 3
	result_RH4_steps432 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.12: Object 562 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps562, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps562 = subset(json_data, treatment == 'Hylaa' & object == 'steps562' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps562)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time)
 
 if(length(time_Hylaa_steps562) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps562'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps562')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time))
 
 	shap_Hylaa_steps562 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time)
 	print(shap_Hylaa_steps562)
 	if(shap_Hylaa_steps562$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps562$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps562$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps562, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps562 = subset(json_data, treatment == 'NoInput' & object == 'steps562' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps562)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps562')$time)
 
 if(length(time_NoInput_steps562) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps562'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps562')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps562')$time))
 
 	shap_NoInput_steps562 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps562')$time)
 	print(shap_NoInput_steps562)
 	if(shap_NoInput_steps562$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps562$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps562$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps562, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps562')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps562 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 562 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps562
 if(length(time_Hylaa_steps562) == expectedRuns & length(time_NoInput_steps562) == expectedRuns){
 	result_RH4_steps562_tTest = FALSE
 	result_RH4_steps562_wTest = FALSE
 	
 	if(shap_Hylaa_steps562$p.value > alpha&shap_NoInput_steps562$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time, subset(json_data,treatment == 'NoInput' & object == 'steps562')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time, subset(json_data, treatment == 'NoInput' & object == 'steps562')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps562_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps562')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps562_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps562_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps562) == expectedRuns & length(time_NoInput_steps562) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps562')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps562')$time))))
	 if (result_RH4_steps562_tTest | result_RH4_steps562_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps562')$time)){
	   	result_RH4_steps562 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps562 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps562 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps562 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps562 = 5
	 	result_RH4_steps562 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps562')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps562')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps562')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps562')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps562')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps562')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps562) != expectedRuns & length(time_NoInput_steps562) != expectedRuns){
 	result_object_RH4_steps562 = 4
	result_RH4_steps562 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps562) == expectedRuns & length(time_NoInput_steps562) != expectedRuns){
	result_object_RH4_steps562 = 2
	result_RH4_steps562 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps562) != expectedRuns & length(time_NoInput_steps562) == expectedRuns){
	result_object_RH4_steps562 = 3
	result_RH4_steps562 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.13: Object 731 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps731, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps731 = subset(json_data, treatment == 'Hylaa' & object == 'steps731' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps731)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time)
 
 if(length(time_Hylaa_steps731) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps731'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps731')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time))
 
 	shap_Hylaa_steps731 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time)
 	print(shap_Hylaa_steps731)
 	if(shap_Hylaa_steps731$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps731$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps731$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps731, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps731 = subset(json_data, treatment == 'NoInput' & object == 'steps731' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps731)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps731')$time)
 
 if(length(time_NoInput_steps731) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps731'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps731')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps731')$time))
 
 	shap_NoInput_steps731 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps731')$time)
 	print(shap_NoInput_steps731)
 	if(shap_NoInput_steps731$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps731$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps731$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps731, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps731')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps731 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 731 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps731
 if(length(time_Hylaa_steps731) == expectedRuns & length(time_NoInput_steps731) == expectedRuns){
 	result_RH4_steps731_tTest = FALSE
 	result_RH4_steps731_wTest = FALSE
 	
 	if(shap_Hylaa_steps731$p.value > alpha&shap_NoInput_steps731$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time, subset(json_data,treatment == 'NoInput' & object == 'steps731')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time, subset(json_data, treatment == 'NoInput' & object == 'steps731')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps731_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps731')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps731_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps731_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps731) == expectedRuns & length(time_NoInput_steps731) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps731')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps731')$time))))
	 if (result_RH4_steps731_tTest | result_RH4_steps731_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps731')$time)){
	   	result_RH4_steps731 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps731 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps731 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps731 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps731 = 5
	 	result_RH4_steps731 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps731')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps731')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps731')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps731')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps731')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps731')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps731) != expectedRuns & length(time_NoInput_steps731) != expectedRuns){
 	result_object_RH4_steps731 = 4
	result_RH4_steps731 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps731) == expectedRuns & length(time_NoInput_steps731) != expectedRuns){
	result_object_RH4_steps731 = 2
	result_RH4_steps731 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps731) != expectedRuns & length(time_NoInput_steps731) == expectedRuns){
	result_object_RH4_steps731 = 3
	result_RH4_steps731 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.14: Object 951 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps951, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps951 = subset(json_data, treatment == 'Hylaa' & object == 'steps951' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps951)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time)
 
 if(length(time_Hylaa_steps951) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps951'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps951')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time))
 
 	shap_Hylaa_steps951 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time)
 	print(shap_Hylaa_steps951)
 	if(shap_Hylaa_steps951$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps951$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps951$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps951, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps951 = subset(json_data, treatment == 'NoInput' & object == 'steps951' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps951)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps951')$time)
 
 if(length(time_NoInput_steps951) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps951'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps951')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps951')$time))
 
 	shap_NoInput_steps951 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps951')$time)
 	print(shap_NoInput_steps951)
 	if(shap_NoInput_steps951$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps951$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps951$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps951, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps951')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps951 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 951 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps951
 if(length(time_Hylaa_steps951) == expectedRuns & length(time_NoInput_steps951) == expectedRuns){
 	result_RH4_steps951_tTest = FALSE
 	result_RH4_steps951_wTest = FALSE
 	
 	if(shap_Hylaa_steps951$p.value > alpha&shap_NoInput_steps951$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time, subset(json_data,treatment == 'NoInput' & object == 'steps951')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time, subset(json_data, treatment == 'NoInput' & object == 'steps951')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps951_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps951')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps951_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps951_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps951) == expectedRuns & length(time_NoInput_steps951) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps951')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps951')$time))))
	 if (result_RH4_steps951_tTest | result_RH4_steps951_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps951')$time)){
	   	result_RH4_steps951 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps951 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps951 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps951 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps951 = 5
	 	result_RH4_steps951 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps951')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps951')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps951')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps951')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps951')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps951')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps951) != expectedRuns & length(time_NoInput_steps951) != expectedRuns){
 	result_object_RH4_steps951 = 4
	result_RH4_steps951 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps951) == expectedRuns & length(time_NoInput_steps951) != expectedRuns){
	result_object_RH4_steps951 = 2
	result_RH4_steps951 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps951) != expectedRuns & length(time_NoInput_steps951) == expectedRuns){
	result_object_RH4_steps951 = 3
	result_RH4_steps951 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.15: Object 1236 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps1236, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps1236 = subset(json_data, treatment == 'Hylaa' & object == 'steps1236' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps1236)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time)
 
 if(length(time_Hylaa_steps1236) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps1236'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps1236')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time))
 
 	shap_Hylaa_steps1236 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time)
 	print(shap_Hylaa_steps1236)
 	if(shap_Hylaa_steps1236$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps1236$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps1236$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps1236, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps1236 = subset(json_data, treatment == 'NoInput' & object == 'steps1236' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps1236)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps1236')$time)
 
 if(length(time_NoInput_steps1236) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps1236'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps1236')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps1236')$time))
 
 	shap_NoInput_steps1236 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps1236')$time)
 	print(shap_NoInput_steps1236)
 	if(shap_NoInput_steps1236$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps1236$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps1236$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps1236, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps1236')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps1236 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 1236 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps1236
 if(length(time_Hylaa_steps1236) == expectedRuns & length(time_NoInput_steps1236) == expectedRuns){
 	result_RH4_steps1236_tTest = FALSE
 	result_RH4_steps1236_wTest = FALSE
 	
 	if(shap_Hylaa_steps1236$p.value > alpha&shap_NoInput_steps1236$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time, subset(json_data,treatment == 'NoInput' & object == 'steps1236')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time, subset(json_data, treatment == 'NoInput' & object == 'steps1236')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps1236_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps1236')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps1236_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps1236_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps1236) == expectedRuns & length(time_NoInput_steps1236) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps1236')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps1236')$time))))
	 if (result_RH4_steps1236_tTest | result_RH4_steps1236_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps1236')$time)){
	   	result_RH4_steps1236 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps1236 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps1236 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps1236 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps1236 = 5
	 	result_RH4_steps1236 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps1236')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps1236')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps1236')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps1236')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps1236')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1236')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps1236) != expectedRuns & length(time_NoInput_steps1236) != expectedRuns){
 	result_object_RH4_steps1236 = 4
	result_RH4_steps1236 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps1236) == expectedRuns & length(time_NoInput_steps1236) != expectedRuns){
	result_object_RH4_steps1236 = 2
	result_RH4_steps1236 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps1236) != expectedRuns & length(time_NoInput_steps1236) == expectedRuns){
	result_object_RH4_steps1236 = 3
	result_RH4_steps1236 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.16: Object 1607 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps1607, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps1607 = subset(json_data, treatment == 'Hylaa' & object == 'steps1607' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps1607)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time)
 
 if(length(time_Hylaa_steps1607) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps1607'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps1607')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time))
 
 	shap_Hylaa_steps1607 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time)
 	print(shap_Hylaa_steps1607)
 	if(shap_Hylaa_steps1607$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps1607$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps1607$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps1607, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps1607 = subset(json_data, treatment == 'NoInput' & object == 'steps1607' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps1607)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps1607')$time)
 
 if(length(time_NoInput_steps1607) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps1607'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps1607')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps1607')$time))
 
 	shap_NoInput_steps1607 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps1607')$time)
 	print(shap_NoInput_steps1607)
 	if(shap_NoInput_steps1607$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps1607$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps1607$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps1607, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps1607')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps1607 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 1607 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps1607
 if(length(time_Hylaa_steps1607) == expectedRuns & length(time_NoInput_steps1607) == expectedRuns){
 	result_RH4_steps1607_tTest = FALSE
 	result_RH4_steps1607_wTest = FALSE
 	
 	if(shap_Hylaa_steps1607$p.value > alpha&shap_NoInput_steps1607$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time, subset(json_data,treatment == 'NoInput' & object == 'steps1607')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time, subset(json_data, treatment == 'NoInput' & object == 'steps1607')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps1607_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps1607')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps1607_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps1607_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps1607) == expectedRuns & length(time_NoInput_steps1607) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps1607')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps1607')$time))))
	 if (result_RH4_steps1607_tTest | result_RH4_steps1607_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps1607')$time)){
	   	result_RH4_steps1607 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps1607 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps1607 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps1607 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps1607 = 5
	 	result_RH4_steps1607 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps1607')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps1607')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps1607')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps1607')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps1607')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps1607')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps1607) != expectedRuns & length(time_NoInput_steps1607) != expectedRuns){
 	result_object_RH4_steps1607 = 4
	result_RH4_steps1607 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps1607) == expectedRuns & length(time_NoInput_steps1607) != expectedRuns){
	result_object_RH4_steps1607 = 2
	result_RH4_steps1607 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps1607) != expectedRuns & length(time_NoInput_steps1607) == expectedRuns){
	result_object_RH4_steps1607 = 3
	result_RH4_steps1607 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.17: Object 2089 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps2089, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps2089 = subset(json_data, treatment == 'Hylaa' & object == 'steps2089' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps2089)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time)
 
 if(length(time_Hylaa_steps2089) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps2089'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps2089')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time))
 
 	shap_Hylaa_steps2089 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time)
 	print(shap_Hylaa_steps2089)
 	if(shap_Hylaa_steps2089$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps2089$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps2089$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps2089, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps2089 = subset(json_data, treatment == 'NoInput' & object == 'steps2089' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps2089)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps2089')$time)
 
 if(length(time_NoInput_steps2089) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps2089'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps2089')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps2089')$time))
 
 	shap_NoInput_steps2089 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps2089')$time)
 	print(shap_NoInput_steps2089)
 	if(shap_NoInput_steps2089$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps2089$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps2089$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps2089, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps2089')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps2089 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 2089 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps2089
 if(length(time_Hylaa_steps2089) == expectedRuns & length(time_NoInput_steps2089) == expectedRuns){
 	result_RH4_steps2089_tTest = FALSE
 	result_RH4_steps2089_wTest = FALSE
 	
 	if(shap_Hylaa_steps2089$p.value > alpha&shap_NoInput_steps2089$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time, subset(json_data,treatment == 'NoInput' & object == 'steps2089')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time, subset(json_data, treatment == 'NoInput' & object == 'steps2089')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps2089_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps2089')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps2089_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps2089_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps2089) == expectedRuns & length(time_NoInput_steps2089) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps2089')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps2089')$time))))
	 if (result_RH4_steps2089_tTest | result_RH4_steps2089_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps2089')$time)){
	   	result_RH4_steps2089 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps2089 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps2089 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps2089 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps2089 = 5
	 	result_RH4_steps2089 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps2089')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps2089')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps2089')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps2089')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps2089')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2089')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps2089) != expectedRuns & length(time_NoInput_steps2089) != expectedRuns){
 	result_object_RH4_steps2089 = 4
	result_RH4_steps2089 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps2089) == expectedRuns & length(time_NoInput_steps2089) != expectedRuns){
	result_object_RH4_steps2089 = 2
	result_RH4_steps2089 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps2089) != expectedRuns & length(time_NoInput_steps2089) == expectedRuns){
	result_object_RH4_steps2089 = 3
	result_RH4_steps2089 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.18: Object 2716 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps2716, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps2716 = subset(json_data, treatment == 'Hylaa' & object == 'steps2716' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps2716)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time)
 
 if(length(time_Hylaa_steps2716) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps2716'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps2716')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time))
 
 	shap_Hylaa_steps2716 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time)
 	print(shap_Hylaa_steps2716)
 	if(shap_Hylaa_steps2716$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps2716$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps2716$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps2716, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps2716 = subset(json_data, treatment == 'NoInput' & object == 'steps2716' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps2716)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps2716')$time)
 
 if(length(time_NoInput_steps2716) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps2716'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps2716')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps2716')$time))
 
 	shap_NoInput_steps2716 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps2716')$time)
 	print(shap_NoInput_steps2716)
 	if(shap_NoInput_steps2716$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps2716$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps2716$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps2716, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps2716')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps2716 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 2716 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps2716
 if(length(time_Hylaa_steps2716) == expectedRuns & length(time_NoInput_steps2716) == expectedRuns){
 	result_RH4_steps2716_tTest = FALSE
 	result_RH4_steps2716_wTest = FALSE
 	
 	if(shap_Hylaa_steps2716$p.value > alpha&shap_NoInput_steps2716$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time, subset(json_data,treatment == 'NoInput' & object == 'steps2716')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time, subset(json_data, treatment == 'NoInput' & object == 'steps2716')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps2716_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps2716')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps2716_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps2716_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps2716) == expectedRuns & length(time_NoInput_steps2716) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps2716')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps2716')$time))))
	 if (result_RH4_steps2716_tTest | result_RH4_steps2716_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps2716')$time)){
	   	result_RH4_steps2716 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps2716 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps2716 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps2716 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps2716 = 5
	 	result_RH4_steps2716 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps2716')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps2716')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps2716')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps2716')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps2716')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps2716')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps2716) != expectedRuns & length(time_NoInput_steps2716) != expectedRuns){
 	result_object_RH4_steps2716 = 4
	result_RH4_steps2716 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps2716) == expectedRuns & length(time_NoInput_steps2716) != expectedRuns){
	result_object_RH4_steps2716 = 2
	result_RH4_steps2716 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps2716) != expectedRuns & length(time_NoInput_steps2716) == expectedRuns){
	result_object_RH4_steps2716 = 3
	result_RH4_steps2716 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.19: Object 3531 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps3531, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps3531 = subset(json_data, treatment == 'Hylaa' & object == 'steps3531' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps3531)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time)
 
 if(length(time_Hylaa_steps3531) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps3531'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps3531')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time))
 
 	shap_Hylaa_steps3531 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time)
 	print(shap_Hylaa_steps3531)
 	if(shap_Hylaa_steps3531$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps3531$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps3531$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps3531, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps3531 = subset(json_data, treatment == 'NoInput' & object == 'steps3531' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps3531)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps3531')$time)
 
 if(length(time_NoInput_steps3531) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps3531'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps3531')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps3531')$time))
 
 	shap_NoInput_steps3531 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps3531')$time)
 	print(shap_NoInput_steps3531)
 	if(shap_NoInput_steps3531$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps3531$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps3531$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps3531, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps3531')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps3531 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 3531 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps3531
 if(length(time_Hylaa_steps3531) == expectedRuns & length(time_NoInput_steps3531) == expectedRuns){
 	result_RH4_steps3531_tTest = FALSE
 	result_RH4_steps3531_wTest = FALSE
 	
 	if(shap_Hylaa_steps3531$p.value > alpha&shap_NoInput_steps3531$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time, subset(json_data,treatment == 'NoInput' & object == 'steps3531')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time, subset(json_data, treatment == 'NoInput' & object == 'steps3531')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps3531_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps3531')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps3531_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps3531_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps3531) == expectedRuns & length(time_NoInput_steps3531) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps3531')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps3531')$time))))
	 if (result_RH4_steps3531_tTest | result_RH4_steps3531_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps3531')$time)){
	   	result_RH4_steps3531 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps3531 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps3531 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps3531 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps3531 = 5
	 	result_RH4_steps3531 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps3531')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps3531')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps3531')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps3531')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps3531')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps3531')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps3531) != expectedRuns & length(time_NoInput_steps3531) != expectedRuns){
 	result_object_RH4_steps3531 = 4
	result_RH4_steps3531 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps3531) == expectedRuns & length(time_NoInput_steps3531) != expectedRuns){
	result_object_RH4_steps3531 = 2
	result_RH4_steps3531 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps3531) != expectedRuns & length(time_NoInput_steps3531) == expectedRuns){
	result_object_RH4_steps3531 = 3
	result_RH4_steps3531 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.20: Object 4590 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps4590, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps4590 = subset(json_data, treatment == 'Hylaa' & object == 'steps4590' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps4590)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time)
 
 if(length(time_Hylaa_steps4590) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps4590'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps4590')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time))
 
 	shap_Hylaa_steps4590 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time)
 	print(shap_Hylaa_steps4590)
 	if(shap_Hylaa_steps4590$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps4590$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps4590$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps4590, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps4590 = subset(json_data, treatment == 'NoInput' & object == 'steps4590' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps4590)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps4590')$time)
 
 if(length(time_NoInput_steps4590) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps4590'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps4590')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps4590')$time))
 
 	shap_NoInput_steps4590 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps4590')$time)
 	print(shap_NoInput_steps4590)
 	if(shap_NoInput_steps4590$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps4590$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps4590$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps4590, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps4590')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps4590 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 4590 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps4590
 if(length(time_Hylaa_steps4590) == expectedRuns & length(time_NoInput_steps4590) == expectedRuns){
 	result_RH4_steps4590_tTest = FALSE
 	result_RH4_steps4590_wTest = FALSE
 	
 	if(shap_Hylaa_steps4590$p.value > alpha&shap_NoInput_steps4590$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time, subset(json_data,treatment == 'NoInput' & object == 'steps4590')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time, subset(json_data, treatment == 'NoInput' & object == 'steps4590')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps4590_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps4590')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps4590_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps4590_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps4590) == expectedRuns & length(time_NoInput_steps4590) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps4590')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps4590')$time))))
	 if (result_RH4_steps4590_tTest | result_RH4_steps4590_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps4590')$time)){
	   	result_RH4_steps4590 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps4590 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps4590 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps4590 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps4590 = 5
	 	result_RH4_steps4590 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps4590')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps4590')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps4590')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps4590')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps4590')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps4590')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps4590) != expectedRuns & length(time_NoInput_steps4590) != expectedRuns){
 	result_object_RH4_steps4590 = 4
	result_RH4_steps4590 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps4590) == expectedRuns & length(time_NoInput_steps4590) != expectedRuns){
	result_object_RH4_steps4590 = 2
	result_RH4_steps4590 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps4590) != expectedRuns & length(time_NoInput_steps4590) == expectedRuns){
	result_object_RH4_steps4590 = 3
	result_RH4_steps4590 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.21: Object 5967 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps5967, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps5967 = subset(json_data, treatment == 'Hylaa' & object == 'steps5967' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps5967)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time)
 
 if(length(time_Hylaa_steps5967) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps5967'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps5967')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time))
 
 	shap_Hylaa_steps5967 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time)
 	print(shap_Hylaa_steps5967)
 	if(shap_Hylaa_steps5967$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps5967$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps5967$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps5967, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps5967 = subset(json_data, treatment == 'NoInput' & object == 'steps5967' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps5967)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps5967')$time)
 
 if(length(time_NoInput_steps5967) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps5967'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps5967')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps5967')$time))
 
 	shap_NoInput_steps5967 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps5967')$time)
 	print(shap_NoInput_steps5967)
 	if(shap_NoInput_steps5967$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps5967$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps5967$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps5967, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps5967')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps5967 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 5967 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps5967
 if(length(time_Hylaa_steps5967) == expectedRuns & length(time_NoInput_steps5967) == expectedRuns){
 	result_RH4_steps5967_tTest = FALSE
 	result_RH4_steps5967_wTest = FALSE
 	
 	if(shap_Hylaa_steps5967$p.value > alpha&shap_NoInput_steps5967$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time, subset(json_data,treatment == 'NoInput' & object == 'steps5967')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time, subset(json_data, treatment == 'NoInput' & object == 'steps5967')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps5967_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps5967')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps5967_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps5967_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps5967) == expectedRuns & length(time_NoInput_steps5967) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps5967')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps5967')$time))))
	 if (result_RH4_steps5967_tTest | result_RH4_steps5967_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps5967')$time)){
	   	result_RH4_steps5967 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps5967 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps5967 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps5967 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps5967 = 5
	 	result_RH4_steps5967 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps5967')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps5967')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps5967')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps5967')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps5967')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps5967')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps5967) != expectedRuns & length(time_NoInput_steps5967) != expectedRuns){
 	result_object_RH4_steps5967 = 4
	result_RH4_steps5967 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps5967) == expectedRuns & length(time_NoInput_steps5967) != expectedRuns){
	result_object_RH4_steps5967 = 2
	result_RH4_steps5967 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps5967) != expectedRuns & length(time_NoInput_steps5967) == expectedRuns){
	result_object_RH4_steps5967 = 3
	result_RH4_steps5967 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.22: Object 7757 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps7757, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps7757 = subset(json_data, treatment == 'Hylaa' & object == 'steps7757' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps7757)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time)
 
 if(length(time_Hylaa_steps7757) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps7757'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps7757')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time))
 
 	shap_Hylaa_steps7757 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time)
 	print(shap_Hylaa_steps7757)
 	if(shap_Hylaa_steps7757$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps7757$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps7757$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps7757, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps7757 = subset(json_data, treatment == 'NoInput' & object == 'steps7757' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps7757)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps7757')$time)
 
 if(length(time_NoInput_steps7757) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps7757'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps7757')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps7757')$time))
 
 	shap_NoInput_steps7757 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps7757')$time)
 	print(shap_NoInput_steps7757)
 	if(shap_NoInput_steps7757$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps7757$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps7757$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps7757, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps7757')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps7757 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 7757 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps7757
 if(length(time_Hylaa_steps7757) == expectedRuns & length(time_NoInput_steps7757) == expectedRuns){
 	result_RH4_steps7757_tTest = FALSE
 	result_RH4_steps7757_wTest = FALSE
 	
 	if(shap_Hylaa_steps7757$p.value > alpha&shap_NoInput_steps7757$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time, subset(json_data,treatment == 'NoInput' & object == 'steps7757')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time, subset(json_data, treatment == 'NoInput' & object == 'steps7757')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps7757_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps7757')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps7757_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps7757_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps7757) == expectedRuns & length(time_NoInput_steps7757) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps7757')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps7757')$time))))
	 if (result_RH4_steps7757_tTest | result_RH4_steps7757_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps7757')$time)){
	   	result_RH4_steps7757 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps7757 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps7757 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps7757 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps7757 = 5
	 	result_RH4_steps7757 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps7757')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps7757')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps7757')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps7757')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps7757')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps7757')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps7757) != expectedRuns & length(time_NoInput_steps7757) != expectedRuns){
 	result_object_RH4_steps7757 = 4
	result_RH4_steps7757 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps7757) == expectedRuns & length(time_NoInput_steps7757) != expectedRuns){
	result_object_RH4_steps7757 = 2
	result_RH4_steps7757 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps7757) != expectedRuns & length(time_NoInput_steps7757) == expectedRuns){
	result_object_RH4_steps7757 = 3
	result_RH4_steps7757 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.23: Object 10085 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps10085, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps10085 = subset(json_data, treatment == 'Hylaa' & object == 'steps10085' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps10085)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time)
 
 if(length(time_Hylaa_steps10085) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps10085'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps10085')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time))
 
 	shap_Hylaa_steps10085 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time)
 	print(shap_Hylaa_steps10085)
 	if(shap_Hylaa_steps10085$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps10085$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps10085$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps10085, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps10085 = subset(json_data, treatment == 'NoInput' & object == 'steps10085' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps10085)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps10085')$time)
 
 if(length(time_NoInput_steps10085) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps10085'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps10085')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps10085')$time))
 
 	shap_NoInput_steps10085 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps10085')$time)
 	print(shap_NoInput_steps10085)
 	if(shap_NoInput_steps10085$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps10085$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps10085$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps10085, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps10085')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps10085 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 10085 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps10085
 if(length(time_Hylaa_steps10085) == expectedRuns & length(time_NoInput_steps10085) == expectedRuns){
 	result_RH4_steps10085_tTest = FALSE
 	result_RH4_steps10085_wTest = FALSE
 	
 	if(shap_Hylaa_steps10085$p.value > alpha&shap_NoInput_steps10085$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time, subset(json_data,treatment == 'NoInput' & object == 'steps10085')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time, subset(json_data, treatment == 'NoInput' & object == 'steps10085')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps10085_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps10085')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps10085_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps10085_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps10085) == expectedRuns & length(time_NoInput_steps10085) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps10085')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps10085')$time))))
	 if (result_RH4_steps10085_tTest | result_RH4_steps10085_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps10085')$time)){
	   	result_RH4_steps10085 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps10085 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps10085 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps10085 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps10085 = 5
	 	result_RH4_steps10085 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps10085')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps10085')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps10085')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps10085')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps10085')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps10085')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps10085) != expectedRuns & length(time_NoInput_steps10085) != expectedRuns){
 	result_object_RH4_steps10085 = 4
	result_RH4_steps10085 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps10085) == expectedRuns & length(time_NoInput_steps10085) != expectedRuns){
	result_object_RH4_steps10085 = 2
	result_RH4_steps10085 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps10085) != expectedRuns & length(time_NoInput_steps10085) == expectedRuns){
	result_object_RH4_steps10085 = 3
	result_RH4_steps10085 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.24: Object 13110 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps13110, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps13110 = subset(json_data, treatment == 'Hylaa' & object == 'steps13110' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps13110)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time)
 
 if(length(time_Hylaa_steps13110) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps13110'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps13110')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time))
 
 	shap_Hylaa_steps13110 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time)
 	print(shap_Hylaa_steps13110)
 	if(shap_Hylaa_steps13110$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps13110$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps13110$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps13110, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps13110 = subset(json_data, treatment == 'NoInput' & object == 'steps13110' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps13110)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps13110')$time)
 
 if(length(time_NoInput_steps13110) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps13110'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps13110')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps13110')$time))
 
 	shap_NoInput_steps13110 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps13110')$time)
 	print(shap_NoInput_steps13110)
 	if(shap_NoInput_steps13110$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps13110$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps13110$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps13110, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps13110')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps13110 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 13110 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps13110
 if(length(time_Hylaa_steps13110) == expectedRuns & length(time_NoInput_steps13110) == expectedRuns){
 	result_RH4_steps13110_tTest = FALSE
 	result_RH4_steps13110_wTest = FALSE
 	
 	if(shap_Hylaa_steps13110$p.value > alpha&shap_NoInput_steps13110$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time, subset(json_data,treatment == 'NoInput' & object == 'steps13110')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time, subset(json_data, treatment == 'NoInput' & object == 'steps13110')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps13110_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps13110')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps13110_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps13110_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps13110) == expectedRuns & length(time_NoInput_steps13110) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps13110')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps13110')$time))))
	 if (result_RH4_steps13110_tTest | result_RH4_steps13110_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps13110')$time)){
	   	result_RH4_steps13110 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps13110 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps13110 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps13110 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps13110 = 5
	 	result_RH4_steps13110 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps13110')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps13110')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps13110')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps13110')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps13110')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps13110')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps13110) != expectedRuns & length(time_NoInput_steps13110) != expectedRuns){
 	result_object_RH4_steps13110 = 4
	result_RH4_steps13110 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps13110) == expectedRuns & length(time_NoInput_steps13110) != expectedRuns){
	result_object_RH4_steps13110 = 2
	result_RH4_steps13110 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps13110) != expectedRuns & length(time_NoInput_steps13110) == expectedRuns){
	result_object_RH4_steps13110 = 3
	result_RH4_steps13110 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.25: Object 17043 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps17043, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps17043 = subset(json_data, treatment == 'Hylaa' & object == 'steps17043' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps17043)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time)
 
 if(length(time_Hylaa_steps17043) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps17043'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps17043')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time))
 
 	shap_Hylaa_steps17043 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time)
 	print(shap_Hylaa_steps17043)
 	if(shap_Hylaa_steps17043$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps17043$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps17043$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps17043, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps17043 = subset(json_data, treatment == 'NoInput' & object == 'steps17043' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps17043)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps17043')$time)
 
 if(length(time_NoInput_steps17043) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps17043'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps17043')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps17043')$time))
 
 	shap_NoInput_steps17043 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps17043')$time)
 	print(shap_NoInput_steps17043)
 	if(shap_NoInput_steps17043$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps17043$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps17043$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps17043, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps17043')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps17043 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 17043 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps17043
 if(length(time_Hylaa_steps17043) == expectedRuns & length(time_NoInput_steps17043) == expectedRuns){
 	result_RH4_steps17043_tTest = FALSE
 	result_RH4_steps17043_wTest = FALSE
 	
 	if(shap_Hylaa_steps17043$p.value > alpha&shap_NoInput_steps17043$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time, subset(json_data,treatment == 'NoInput' & object == 'steps17043')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time, subset(json_data, treatment == 'NoInput' & object == 'steps17043')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps17043_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps17043')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps17043_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps17043_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps17043) == expectedRuns & length(time_NoInput_steps17043) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps17043')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps17043')$time))))
	 if (result_RH4_steps17043_tTest | result_RH4_steps17043_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps17043')$time)){
	   	result_RH4_steps17043 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps17043 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps17043 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps17043 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps17043 = 5
	 	result_RH4_steps17043 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps17043')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps17043')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps17043')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps17043')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps17043')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps17043')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps17043) != expectedRuns & length(time_NoInput_steps17043) != expectedRuns){
 	result_object_RH4_steps17043 = 4
	result_RH4_steps17043 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps17043) == expectedRuns & length(time_NoInput_steps17043) != expectedRuns){
	result_object_RH4_steps17043 = 2
	result_RH4_steps17043 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps17043) != expectedRuns & length(time_NoInput_steps17043) == expectedRuns){
	result_object_RH4_steps17043 = 3
	result_RH4_steps17043 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.26: Object 22157 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps22157, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps22157 = subset(json_data, treatment == 'Hylaa' & object == 'steps22157' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps22157)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time)
 
 if(length(time_Hylaa_steps22157) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps22157'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps22157')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time))
 
 	shap_Hylaa_steps22157 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time)
 	print(shap_Hylaa_steps22157)
 	if(shap_Hylaa_steps22157$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps22157$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps22157$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps22157, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps22157 = subset(json_data, treatment == 'NoInput' & object == 'steps22157' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps22157)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps22157')$time)
 
 if(length(time_NoInput_steps22157) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps22157'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps22157')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps22157')$time))
 
 	shap_NoInput_steps22157 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps22157')$time)
 	print(shap_NoInput_steps22157)
 	if(shap_NoInput_steps22157$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps22157$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps22157$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps22157, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps22157')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps22157 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 22157 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps22157
 if(length(time_Hylaa_steps22157) == expectedRuns & length(time_NoInput_steps22157) == expectedRuns){
 	result_RH4_steps22157_tTest = FALSE
 	result_RH4_steps22157_wTest = FALSE
 	
 	if(shap_Hylaa_steps22157$p.value > alpha&shap_NoInput_steps22157$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time, subset(json_data,treatment == 'NoInput' & object == 'steps22157')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time, subset(json_data, treatment == 'NoInput' & object == 'steps22157')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps22157_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps22157')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps22157_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps22157_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps22157) == expectedRuns & length(time_NoInput_steps22157) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps22157')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps22157')$time))))
	 if (result_RH4_steps22157_tTest | result_RH4_steps22157_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps22157')$time)){
	   	result_RH4_steps22157 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps22157 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps22157 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps22157 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps22157 = 5
	 	result_RH4_steps22157 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps22157')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps22157')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps22157')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps22157')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps22157')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps22157')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps22157) != expectedRuns & length(time_NoInput_steps22157) != expectedRuns){
 	result_object_RH4_steps22157 = 4
	result_RH4_steps22157 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps22157) == expectedRuns & length(time_NoInput_steps22157) != expectedRuns){
	result_object_RH4_steps22157 = 2
	result_RH4_steps22157 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps22157) != expectedRuns & length(time_NoInput_steps22157) == expectedRuns){
	result_object_RH4_steps22157 = 3
	result_RH4_steps22157 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.27: Object 28804 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps28804, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps28804 = subset(json_data, treatment == 'Hylaa' & object == 'steps28804' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps28804)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time)
 
 if(length(time_Hylaa_steps28804) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps28804'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps28804')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time))
 
 	shap_Hylaa_steps28804 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time)
 	print(shap_Hylaa_steps28804)
 	if(shap_Hylaa_steps28804$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps28804$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps28804$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps28804, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps28804 = subset(json_data, treatment == 'NoInput' & object == 'steps28804' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps28804)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps28804')$time)
 
 if(length(time_NoInput_steps28804) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps28804'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps28804')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps28804')$time))
 
 	shap_NoInput_steps28804 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps28804')$time)
 	print(shap_NoInput_steps28804)
 	if(shap_NoInput_steps28804$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps28804$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps28804$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps28804, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps28804')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps28804 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 28804 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps28804
 if(length(time_Hylaa_steps28804) == expectedRuns & length(time_NoInput_steps28804) == expectedRuns){
 	result_RH4_steps28804_tTest = FALSE
 	result_RH4_steps28804_wTest = FALSE
 	
 	if(shap_Hylaa_steps28804$p.value > alpha&shap_NoInput_steps28804$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time, subset(json_data,treatment == 'NoInput' & object == 'steps28804')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time, subset(json_data, treatment == 'NoInput' & object == 'steps28804')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps28804_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps28804')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps28804_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps28804_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps28804) == expectedRuns & length(time_NoInput_steps28804) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps28804')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps28804')$time))))
	 if (result_RH4_steps28804_tTest | result_RH4_steps28804_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps28804')$time)){
	   	result_RH4_steps28804 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps28804 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps28804 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps28804 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps28804 = 5
	 	result_RH4_steps28804 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps28804')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps28804')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps28804')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps28804')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps28804')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps28804')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps28804) != expectedRuns & length(time_NoInput_steps28804) != expectedRuns){
 	result_object_RH4_steps28804 = 4
	result_RH4_steps28804 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps28804) == expectedRuns & length(time_NoInput_steps28804) != expectedRuns){
	result_object_RH4_steps28804 = 2
	result_RH4_steps28804 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps28804) != expectedRuns & length(time_NoInput_steps28804) == expectedRuns){
	result_object_RH4_steps28804 = 3
	result_RH4_steps28804 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.28: Object 37445 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps37445, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps37445 = subset(json_data, treatment == 'Hylaa' & object == 'steps37445' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps37445)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time)
 
 if(length(time_Hylaa_steps37445) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps37445'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps37445')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time))
 
 	shap_Hylaa_steps37445 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time)
 	print(shap_Hylaa_steps37445)
 	if(shap_Hylaa_steps37445$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps37445$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps37445$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps37445, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps37445 = subset(json_data, treatment == 'NoInput' & object == 'steps37445' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps37445)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps37445')$time)
 
 if(length(time_NoInput_steps37445) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps37445'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps37445')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps37445')$time))
 
 	shap_NoInput_steps37445 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps37445')$time)
 	print(shap_NoInput_steps37445)
 	if(shap_NoInput_steps37445$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps37445$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps37445$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps37445, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps37445')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps37445 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 37445 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps37445
 if(length(time_Hylaa_steps37445) == expectedRuns & length(time_NoInput_steps37445) == expectedRuns){
 	result_RH4_steps37445_tTest = FALSE
 	result_RH4_steps37445_wTest = FALSE
 	
 	if(shap_Hylaa_steps37445$p.value > alpha&shap_NoInput_steps37445$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time, subset(json_data,treatment == 'NoInput' & object == 'steps37445')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time, subset(json_data, treatment == 'NoInput' & object == 'steps37445')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps37445_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps37445')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps37445_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps37445_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps37445) == expectedRuns & length(time_NoInput_steps37445) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps37445')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps37445')$time))))
	 if (result_RH4_steps37445_tTest | result_RH4_steps37445_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps37445')$time)){
	   	result_RH4_steps37445 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps37445 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps37445 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps37445 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps37445 = 5
	 	result_RH4_steps37445 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps37445')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps37445')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps37445')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps37445')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps37445')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps37445')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps37445) != expectedRuns & length(time_NoInput_steps37445) != expectedRuns){
 	result_object_RH4_steps37445 = 4
	result_RH4_steps37445 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps37445) == expectedRuns & length(time_NoInput_steps37445) != expectedRuns){
	result_object_RH4_steps37445 = 2
	result_RH4_steps37445 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps37445) != expectedRuns & length(time_NoInput_steps37445) == expectedRuns){
	result_object_RH4_steps37445 = 3
	result_RH4_steps37445 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.29: Object 48679 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps48679, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps48679 = subset(json_data, treatment == 'Hylaa' & object == 'steps48679' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps48679)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time)
 
 if(length(time_Hylaa_steps48679) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps48679'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps48679')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time))
 
 	shap_Hylaa_steps48679 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time)
 	print(shap_Hylaa_steps48679)
 	if(shap_Hylaa_steps48679$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps48679$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps48679$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps48679, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps48679 = subset(json_data, treatment == 'NoInput' & object == 'steps48679' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps48679)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps48679')$time)
 
 if(length(time_NoInput_steps48679) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps48679'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps48679')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps48679')$time))
 
 	shap_NoInput_steps48679 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps48679')$time)
 	print(shap_NoInput_steps48679)
 	if(shap_NoInput_steps48679$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps48679$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps48679$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps48679, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps48679')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps48679 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 48679 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps48679
 if(length(time_Hylaa_steps48679) == expectedRuns & length(time_NoInput_steps48679) == expectedRuns){
 	result_RH4_steps48679_tTest = FALSE
 	result_RH4_steps48679_wTest = FALSE
 	
 	if(shap_Hylaa_steps48679$p.value > alpha&shap_NoInput_steps48679$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time, subset(json_data,treatment == 'NoInput' & object == 'steps48679')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time, subset(json_data, treatment == 'NoInput' & object == 'steps48679')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps48679_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps48679')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps48679_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps48679_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps48679) == expectedRuns & length(time_NoInput_steps48679) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps48679')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps48679')$time))))
	 if (result_RH4_steps48679_tTest | result_RH4_steps48679_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps48679')$time)){
	   	result_RH4_steps48679 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps48679 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps48679 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps48679 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps48679 = 5
	 	result_RH4_steps48679 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps48679')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps48679')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps48679')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps48679')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps48679')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps48679')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps48679) != expectedRuns & length(time_NoInput_steps48679) != expectedRuns){
 	result_object_RH4_steps48679 = 4
	result_RH4_steps48679 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps48679) == expectedRuns & length(time_NoInput_steps48679) != expectedRuns){
	result_object_RH4_steps48679 = 2
	result_RH4_steps48679 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps48679) != expectedRuns & length(time_NoInput_steps48679) == expectedRuns){
	result_object_RH4_steps48679 = 3
	result_RH4_steps48679 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.30: Object 63282 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps63282, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps63282 = subset(json_data, treatment == 'Hylaa' & object == 'steps63282' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps63282)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time)
 
 if(length(time_Hylaa_steps63282) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps63282'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps63282')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time))
 
 	shap_Hylaa_steps63282 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time)
 	print(shap_Hylaa_steps63282)
 	if(shap_Hylaa_steps63282$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps63282$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps63282$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps63282, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps63282 = subset(json_data, treatment == 'NoInput' & object == 'steps63282' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps63282)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps63282')$time)
 
 if(length(time_NoInput_steps63282) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps63282'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps63282')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps63282')$time))
 
 	shap_NoInput_steps63282 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps63282')$time)
 	print(shap_NoInput_steps63282)
 	if(shap_NoInput_steps63282$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps63282$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps63282$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps63282, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps63282')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps63282 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 63282 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps63282
 if(length(time_Hylaa_steps63282) == expectedRuns & length(time_NoInput_steps63282) == expectedRuns){
 	result_RH4_steps63282_tTest = FALSE
 	result_RH4_steps63282_wTest = FALSE
 	
 	if(shap_Hylaa_steps63282$p.value > alpha&shap_NoInput_steps63282$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time, subset(json_data,treatment == 'NoInput' & object == 'steps63282')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time, subset(json_data, treatment == 'NoInput' & object == 'steps63282')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps63282_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps63282')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps63282_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps63282_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps63282) == expectedRuns & length(time_NoInput_steps63282) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps63282')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps63282')$time))))
	 if (result_RH4_steps63282_tTest | result_RH4_steps63282_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps63282')$time)){
	   	result_RH4_steps63282 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps63282 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps63282 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps63282 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps63282 = 5
	 	result_RH4_steps63282 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps63282')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps63282')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps63282')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps63282')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps63282')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps63282')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps63282) != expectedRuns & length(time_NoInput_steps63282) != expectedRuns){
 	result_object_RH4_steps63282 = 4
	result_RH4_steps63282 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps63282) == expectedRuns & length(time_NoInput_steps63282) != expectedRuns){
	result_object_RH4_steps63282 = 2
	result_RH4_steps63282 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps63282) != expectedRuns & length(time_NoInput_steps63282) == expectedRuns){
	result_object_RH4_steps63282 = 3
	result_RH4_steps63282 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.31: Object 82267 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps82267, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps82267 = subset(json_data, treatment == 'Hylaa' & object == 'steps82267' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps82267)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time)
 
 if(length(time_Hylaa_steps82267) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps82267'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps82267')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time))
 
 	shap_Hylaa_steps82267 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time)
 	print(shap_Hylaa_steps82267)
 	if(shap_Hylaa_steps82267$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps82267$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps82267$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps82267, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps82267 = subset(json_data, treatment == 'NoInput' & object == 'steps82267' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps82267)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps82267')$time)
 
 if(length(time_NoInput_steps82267) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps82267'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps82267')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps82267')$time))
 
 	shap_NoInput_steps82267 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps82267')$time)
 	print(shap_NoInput_steps82267)
 	if(shap_NoInput_steps82267$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps82267$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps82267$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps82267, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps82267')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps82267 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 82267 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps82267
 if(length(time_Hylaa_steps82267) == expectedRuns & length(time_NoInput_steps82267) == expectedRuns){
 	result_RH4_steps82267_tTest = FALSE
 	result_RH4_steps82267_wTest = FALSE
 	
 	if(shap_Hylaa_steps82267$p.value > alpha&shap_NoInput_steps82267$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time, subset(json_data,treatment == 'NoInput' & object == 'steps82267')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time, subset(json_data, treatment == 'NoInput' & object == 'steps82267')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps82267_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps82267')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps82267_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps82267_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps82267) == expectedRuns & length(time_NoInput_steps82267) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps82267')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps82267')$time))))
	 if (result_RH4_steps82267_tTest | result_RH4_steps82267_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps82267')$time)){
	   	result_RH4_steps82267 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps82267 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps82267 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps82267 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps82267 = 5
	 	result_RH4_steps82267 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps82267')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps82267')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps82267')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps82267')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps82267')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps82267')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps82267) != expectedRuns & length(time_NoInput_steps82267) != expectedRuns){
 	result_object_RH4_steps82267 = 4
	result_RH4_steps82267 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps82267) == expectedRuns & length(time_NoInput_steps82267) != expectedRuns){
	result_object_RH4_steps82267 = 2
	result_RH4_steps82267 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps82267) != expectedRuns & length(time_NoInput_steps82267) == expectedRuns){
	result_object_RH4_steps82267 = 3
	result_RH4_steps82267 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.32: Object 106948 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps106948, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps106948 = subset(json_data, treatment == 'Hylaa' & object == 'steps106948' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps106948)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time)
 
 if(length(time_Hylaa_steps106948) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps106948'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps106948')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time))
 
 	shap_Hylaa_steps106948 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time)
 	print(shap_Hylaa_steps106948)
 	if(shap_Hylaa_steps106948$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps106948$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps106948$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps106948, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps106948 = subset(json_data, treatment == 'NoInput' & object == 'steps106948' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps106948)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps106948')$time)
 
 if(length(time_NoInput_steps106948) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps106948'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps106948')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps106948')$time))
 
 	shap_NoInput_steps106948 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps106948')$time)
 	print(shap_NoInput_steps106948)
 	if(shap_NoInput_steps106948$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps106948$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps106948$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps106948, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps106948')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps106948 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 106948 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps106948
 if(length(time_Hylaa_steps106948) == expectedRuns & length(time_NoInput_steps106948) == expectedRuns){
 	result_RH4_steps106948_tTest = FALSE
 	result_RH4_steps106948_wTest = FALSE
 	
 	if(shap_Hylaa_steps106948$p.value > alpha&shap_NoInput_steps106948$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time, subset(json_data,treatment == 'NoInput' & object == 'steps106948')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time, subset(json_data, treatment == 'NoInput' & object == 'steps106948')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps106948_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps106948')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps106948_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps106948_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps106948) == expectedRuns & length(time_NoInput_steps106948) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps106948')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps106948')$time))))
	 if (result_RH4_steps106948_tTest | result_RH4_steps106948_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps106948')$time)){
	   	result_RH4_steps106948 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps106948 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps106948 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps106948 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps106948 = 5
	 	result_RH4_steps106948 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps106948')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps106948')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps106948')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps106948')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps106948')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps106948')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps106948) != expectedRuns & length(time_NoInput_steps106948) != expectedRuns){
 	result_object_RH4_steps106948 = 4
	result_RH4_steps106948 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps106948) == expectedRuns & length(time_NoInput_steps106948) != expectedRuns){
	result_object_RH4_steps106948 = 2
	result_RH4_steps106948 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps106948) != expectedRuns & length(time_NoInput_steps106948) == expectedRuns){
	result_object_RH4_steps106948 = 3
	result_RH4_steps106948 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.33: Object 139032 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps139032, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps139032 = subset(json_data, treatment == 'Hylaa' & object == 'steps139032' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps139032)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time)
 
 if(length(time_Hylaa_steps139032) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps139032'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps139032')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time))
 
 	shap_Hylaa_steps139032 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time)
 	print(shap_Hylaa_steps139032)
 	if(shap_Hylaa_steps139032$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps139032$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps139032$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps139032, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps139032 = subset(json_data, treatment == 'NoInput' & object == 'steps139032' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps139032)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps139032')$time)
 
 if(length(time_NoInput_steps139032) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps139032'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps139032')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps139032')$time))
 
 	shap_NoInput_steps139032 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps139032')$time)
 	print(shap_NoInput_steps139032)
 	if(shap_NoInput_steps139032$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps139032$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps139032$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps139032, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps139032')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps139032 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 139032 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps139032
 if(length(time_Hylaa_steps139032) == expectedRuns & length(time_NoInput_steps139032) == expectedRuns){
 	result_RH4_steps139032_tTest = FALSE
 	result_RH4_steps139032_wTest = FALSE
 	
 	if(shap_Hylaa_steps139032$p.value > alpha&shap_NoInput_steps139032$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time, subset(json_data,treatment == 'NoInput' & object == 'steps139032')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time, subset(json_data, treatment == 'NoInput' & object == 'steps139032')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps139032_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps139032')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps139032_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps139032_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps139032) == expectedRuns & length(time_NoInput_steps139032) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps139032')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps139032')$time))))
	 if (result_RH4_steps139032_tTest | result_RH4_steps139032_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps139032')$time)){
	   	result_RH4_steps139032 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps139032 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps139032 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps139032 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps139032 = 5
	 	result_RH4_steps139032 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps139032')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps139032')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps139032')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps139032')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps139032')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps139032')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps139032) != expectedRuns & length(time_NoInput_steps139032) != expectedRuns){
 	result_object_RH4_steps139032 = 4
	result_RH4_steps139032 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps139032) == expectedRuns & length(time_NoInput_steps139032) != expectedRuns){
	result_object_RH4_steps139032 = 2
	result_RH4_steps139032 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps139032) != expectedRuns & length(time_NoInput_steps139032) == expectedRuns){
	result_object_RH4_steps139032 = 3
	result_RH4_steps139032 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


\subsubsection{RH4.34: Object 180742 steps}

 \textbf{Runtime for Hylaa}
 <<RH4_Hylaa_steps180742, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_Hylaa_steps180742 = subset(json_data, treatment == 'Hylaa' & object == 'steps180742' & !is.na(time))$time
 print(paste("Sample size: ", length(time_Hylaa_steps180742)))					
 summary(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time)
 
 if(length(time_Hylaa_steps180742) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'Hylaa' & object == 'steps180742'), "time", min(subset(json_data, treatment == 'Hylaa'& object == 'steps180742')$time), max(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time))
 
 	shap_Hylaa_steps180742 = shapiro.test(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time)
 	print(shap_Hylaa_steps180742)
 	if(shap_Hylaa_steps180742$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_Hylaa_steps180742$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_Hylaa_steps180742$p.value, sep = " "))
 	}
 }
 @
 \textbf{Runtime for No Input}
 <<RH4_NoInput_steps180742, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 time_NoInput_steps180742 = subset(json_data, treatment == 'NoInput' & object == 'steps180742' & !is.na(time))$time
 print(paste("Sample size: ", length(time_NoInput_steps180742)))					
 summary(subset(json_data, treatment == 'NoInput' & object == 'steps180742')$time)
 
 if(length(time_NoInput_steps180742) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'NoInput' & object == 'steps180742'), "time", min(subset(json_data, treatment == 'NoInput'& object == 'steps180742')$time), max(subset(json_data, treatment == 'NoInput' & object == 'steps180742')$time))
 
 	shap_NoInput_steps180742 = shapiro.test(subset(json_data, treatment == 'NoInput' & object == 'steps180742')$time)
 	print(shap_NoInput_steps180742)
 	if(shap_NoInput_steps180742$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_NoInput_steps180742$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_NoInput_steps180742$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_steps180742, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps180742')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$time, DF$treatmentDescription, mean)))])
 boxplot_RH4_steps180742 = ggplot(DF, aes(x =treatmentDescription , y = time)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Optimization")+
 	ggtitle("Runtime by Optimization for 180742 steps") + 
 	ylab("Runtime (seconds)")			   
 boxplot_RH4_steps180742
 if(length(time_Hylaa_steps180742) == expectedRuns & length(time_NoInput_steps180742) == expectedRuns){
 	result_RH4_steps180742_tTest = FALSE
 	result_RH4_steps180742_wTest = FALSE
 	
 	if(shap_Hylaa_steps180742$p.value > alpha&shap_NoInput_steps180742$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time, subset(json_data,treatment == 'NoInput' & object == 'steps180742')$time)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time, subset(json_data, treatment == 'NoInput' & object == 'steps180742')$time, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_steps180742_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(time~treatment, data=subset(json_data, (treatment == 'Hylaa' | treatment == 'NoInput') & object == 'steps180742')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps180742_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_steps180742_wTest = TRUE
 		}
 	}				
 }
if(length(time_Hylaa_steps180742) == expectedRuns & length(time_NoInput_steps180742) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Runtime for Hylaa: ", mean(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time)))
	 print(paste("Mean Runtime for No Input: ", mean(subset(json_data, treatment == 'NoInput' & object == 'steps180742')$time)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time) - mean(subset(json_data, treatment == 'NoInput' & object == 'steps180742')$time))))
	 if (result_RH4_steps180742_tTest | result_RH4_steps180742_wTest){
	 	if(mean(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps180742')$time)){
	   	result_RH4_steps180742 = "Hylaa \\textgreater{} No Input"
	   	result_object_RH4_steps180742 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_steps180742 = "Hylaa \\textless{} No Input"
	   	result_object_RH4_steps180742 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_steps180742 = 5
	 	result_RH4_steps180742 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'Hylaa' & object == 'steps180742')$time) > mean(subset(json_data, treatment == 'NoInput' & object == 'steps180742')$time)){
	 	cat(paste("Runtime for Hylaa is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps180742')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time)) / mean(subset(json_data, treatment == 'NoInput' & object == 'steps180742')$time)), "% greater than \n Runtime for No Input"))				
	 }else{
	     cat(paste("Runtime for No Input is ", 100 * (abs(mean(subset(json_data, treatment == 'NoInput' & object == 'steps180742')$time) - mean(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time)) / mean(subset(json_data, treatment == 'Hylaa' & object == 'steps180742')$time)), "% greater than \nRuntime for Hylaa"))			    
	 }	
} 
if (length(time_Hylaa_steps180742) != expectedRuns & length(time_NoInput_steps180742) != expectedRuns){
 	result_object_RH4_steps180742 = 4
	result_RH4_steps180742 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(time_Hylaa_steps180742) == expectedRuns & length(time_NoInput_steps180742) != expectedRuns){
	result_object_RH4_steps180742 = 2
	result_RH4_steps180742 = "Hylaa"
	result_RH4_Hylaa = result_RH4_Hylaa + 1			
}
if (length(time_Hylaa_steps180742) != expectedRuns & length(time_NoInput_steps180742) == expectedRuns){
	result_object_RH4_steps180742 = 3
	result_RH4_steps180742 = "No Input"
	result_RH4_NoInput = result_RH4_NoInput + 1			
}
@  


 
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH4_result = list(hypothesis = "RH4", results = c(result_RH4_less / result_RH4_objects, result_RH4_greater / result_RH4_objects, result_RH4_Hylaa / result_RH4_objects, result_RH4_NoInput / result_RH4_objects, result_RH4_none / result_RH4_objects, result_RH4_inconclusive / result_RH4_objects), objectResults = list( list(object = 'steps31', result = result_object_RH4_steps31),  list(object = 'steps40', result = result_object_RH4_steps40),  list(object = 'steps53', result = result_object_RH4_steps53),  list(object = 'steps68', result = result_object_RH4_steps68),  list(object = 'steps89', result = result_object_RH4_steps89),  list(object = 'steps116', result = result_object_RH4_steps116),  list(object = 'steps151', result = result_object_RH4_steps151),  list(object = 'steps197', result = result_object_RH4_steps197),  list(object = 'steps256', result = result_object_RH4_steps256),  list(object = 'steps332', result = result_object_RH4_steps332),  list(object = 'steps432', result = result_object_RH4_steps432),  list(object = 'steps562', result = result_object_RH4_steps562),  list(object = 'steps731', result = result_object_RH4_steps731),  list(object = 'steps951', result = result_object_RH4_steps951),  list(object = 'steps1236', result = result_object_RH4_steps1236),  list(object = 'steps1607', result = result_object_RH4_steps1607),  list(object = 'steps2089', result = result_object_RH4_steps2089),  list(object = 'steps2716', result = result_object_RH4_steps2716),  list(object = 'steps3531', result = result_object_RH4_steps3531),  list(object = 'steps4590', result = result_object_RH4_steps4590),  list(object = 'steps5967', result = result_object_RH4_steps5967),  list(object = 'steps7757', result = result_object_RH4_steps7757),  list(object = 'steps10085', result = result_object_RH4_steps10085),  list(object = 'steps13110', result = result_object_RH4_steps13110),  list(object = 'steps17043', result = result_object_RH4_steps17043),  list(object = 'steps22157', result = result_object_RH4_steps22157),  list(object = 'steps28804', result = result_object_RH4_steps28804),  list(object = 'steps37445', result = result_object_RH4_steps37445),  list(object = 'steps48679', result = result_object_RH4_steps48679),  list(object = 'steps63282', result = result_object_RH4_steps63282),  list(object = 'steps82267', result = result_object_RH4_steps82267),  list(object = 'steps106948', result = result_object_RH4_steps106948),  list(object = 'steps139032', result = result_object_RH4_steps139032),  list(object = 'steps180742', result = result_object_RH4_steps180742) ))	
	@
	
	\subsubsection{RH4 Results: Runtime Hylaa = No Input}
	
	
	\begin{table}[H]
	\centering
	\caption{RH4 Results per Object}
	\begin{tabular}{ll}
	\textbf{31 steps} & \Sexpr{result_RH4_steps31} \\
	\textbf{40 steps} & \Sexpr{result_RH4_steps40} \\
	\textbf{53 steps} & \Sexpr{result_RH4_steps53} \\
	\textbf{68 steps} & \Sexpr{result_RH4_steps68} \\
	\textbf{89 steps} & \Sexpr{result_RH4_steps89} \\
	\textbf{116 steps} & \Sexpr{result_RH4_steps116} \\
	\textbf{151 steps} & \Sexpr{result_RH4_steps151} \\
	\textbf{197 steps} & \Sexpr{result_RH4_steps197} \\
	\textbf{256 steps} & \Sexpr{result_RH4_steps256} \\
	\textbf{332 steps} & \Sexpr{result_RH4_steps332} \\
	\textbf{432 steps} & \Sexpr{result_RH4_steps432} \\
	\textbf{562 steps} & \Sexpr{result_RH4_steps562} \\
	\textbf{731 steps} & \Sexpr{result_RH4_steps731} \\
	\textbf{951 steps} & \Sexpr{result_RH4_steps951} \\
	\textbf{1236 steps} & \Sexpr{result_RH4_steps1236} \\
	\textbf{1607 steps} & \Sexpr{result_RH4_steps1607} \\
	\textbf{2089 steps} & \Sexpr{result_RH4_steps2089} \\
	\textbf{2716 steps} & \Sexpr{result_RH4_steps2716} \\
	\textbf{3531 steps} & \Sexpr{result_RH4_steps3531} \\
	\textbf{4590 steps} & \Sexpr{result_RH4_steps4590} \\
	\textbf{5967 steps} & \Sexpr{result_RH4_steps5967} \\
	\textbf{7757 steps} & \Sexpr{result_RH4_steps7757} \\
	\textbf{10085 steps} & \Sexpr{result_RH4_steps10085} \\
	\textbf{13110 steps} & \Sexpr{result_RH4_steps13110} \\
	\textbf{17043 steps} & \Sexpr{result_RH4_steps17043} \\
	\textbf{22157 steps} & \Sexpr{result_RH4_steps22157} \\
	\textbf{28804 steps} & \Sexpr{result_RH4_steps28804} \\
	\textbf{37445 steps} & \Sexpr{result_RH4_steps37445} \\
	\textbf{48679 steps} & \Sexpr{result_RH4_steps48679} \\
	\textbf{63282 steps} & \Sexpr{result_RH4_steps63282} \\
	\textbf{82267 steps} & \Sexpr{result_RH4_steps82267} \\
	\textbf{106948 steps} & \Sexpr{result_RH4_steps106948} \\
	\textbf{139032 steps} & \Sexpr{result_RH4_steps139032} \\
	\textbf{180742 steps} & \Sexpr{result_RH4_steps180742} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH4 Results Summary}
	\begin{tabular}{ll}
	\textbf{Hylaa \textless{} No Input:}& \Sexpr{100 * result_RH4_less / result_RH4_objects}\% \\
	\textbf{Hylaa \textgreater{} No Input:}& \Sexpr{100 * result_RH4_greater / result_RH4_objects}\%\\
	\textbf{Hylaa:} & \Sexpr{100 * result_RH4_Hylaa / result_RH4_objects}\%\\
	\textbf{No Input:} & \Sexpr{100 * result_RH4_NoInput / result_RH4_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH4_none / result_RH4_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH4_inconclusive / result_RH4_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	



\section{Result Summary}
\subsection{Research Hypotheses}

	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH1_result = list(hypothesis = "RH1", results = c(result_RH1_less / result_RH1_objects, result_RH1_greater / result_RH1_objects, result_RH1_Hylaa / result_RH1_objects, result_RH1_Warm / result_RH1_objects, result_RH1_none / result_RH1_objects, result_RH1_inconclusive / result_RH1_objects), objectResults = list( list(object = 'steps31', result = result_object_RH1_steps31),  list(object = 'steps40', result = result_object_RH1_steps40),  list(object = 'steps53', result = result_object_RH1_steps53),  list(object = 'steps68', result = result_object_RH1_steps68),  list(object = 'steps89', result = result_object_RH1_steps89),  list(object = 'steps116', result = result_object_RH1_steps116),  list(object = 'steps151', result = result_object_RH1_steps151),  list(object = 'steps197', result = result_object_RH1_steps197),  list(object = 'steps256', result = result_object_RH1_steps256),  list(object = 'steps332', result = result_object_RH1_steps332),  list(object = 'steps432', result = result_object_RH1_steps432),  list(object = 'steps562', result = result_object_RH1_steps562),  list(object = 'steps731', result = result_object_RH1_steps731),  list(object = 'steps951', result = result_object_RH1_steps951),  list(object = 'steps1236', result = result_object_RH1_steps1236),  list(object = 'steps1607', result = result_object_RH1_steps1607),  list(object = 'steps2089', result = result_object_RH1_steps2089),  list(object = 'steps2716', result = result_object_RH1_steps2716),  list(object = 'steps3531', result = result_object_RH1_steps3531),  list(object = 'steps4590', result = result_object_RH1_steps4590),  list(object = 'steps5967', result = result_object_RH1_steps5967),  list(object = 'steps7757', result = result_object_RH1_steps7757),  list(object = 'steps10085', result = result_object_RH1_steps10085),  list(object = 'steps13110', result = result_object_RH1_steps13110),  list(object = 'steps17043', result = result_object_RH1_steps17043),  list(object = 'steps22157', result = result_object_RH1_steps22157),  list(object = 'steps28804', result = result_object_RH1_steps28804),  list(object = 'steps37445', result = result_object_RH1_steps37445),  list(object = 'steps48679', result = result_object_RH1_steps48679),  list(object = 'steps63282', result = result_object_RH1_steps63282),  list(object = 'steps82267', result = result_object_RH1_steps82267),  list(object = 'steps106948', result = result_object_RH1_steps106948),  list(object = 'steps139032', result = result_object_RH1_steps139032),  list(object = 'steps180742', result = result_object_RH1_steps180742) ))	
	@
	
	\subsubsection{RH1 Results: Runtime Hylaa = Warm}
	
	
	\begin{table}[H]
	\centering
	\caption{RH1 Results per Object}
	\begin{tabular}{ll}
	\textbf{31 steps} & \Sexpr{result_RH1_steps31} \\
	\textbf{40 steps} & \Sexpr{result_RH1_steps40} \\
	\textbf{53 steps} & \Sexpr{result_RH1_steps53} \\
	\textbf{68 steps} & \Sexpr{result_RH1_steps68} \\
	\textbf{89 steps} & \Sexpr{result_RH1_steps89} \\
	\textbf{116 steps} & \Sexpr{result_RH1_steps116} \\
	\textbf{151 steps} & \Sexpr{result_RH1_steps151} \\
	\textbf{197 steps} & \Sexpr{result_RH1_steps197} \\
	\textbf{256 steps} & \Sexpr{result_RH1_steps256} \\
	\textbf{332 steps} & \Sexpr{result_RH1_steps332} \\
	\textbf{432 steps} & \Sexpr{result_RH1_steps432} \\
	\textbf{562 steps} & \Sexpr{result_RH1_steps562} \\
	\textbf{731 steps} & \Sexpr{result_RH1_steps731} \\
	\textbf{951 steps} & \Sexpr{result_RH1_steps951} \\
	\textbf{1236 steps} & \Sexpr{result_RH1_steps1236} \\
	\textbf{1607 steps} & \Sexpr{result_RH1_steps1607} \\
	\textbf{2089 steps} & \Sexpr{result_RH1_steps2089} \\
	\textbf{2716 steps} & \Sexpr{result_RH1_steps2716} \\
	\textbf{3531 steps} & \Sexpr{result_RH1_steps3531} \\
	\textbf{4590 steps} & \Sexpr{result_RH1_steps4590} \\
	\textbf{5967 steps} & \Sexpr{result_RH1_steps5967} \\
	\textbf{7757 steps} & \Sexpr{result_RH1_steps7757} \\
	\textbf{10085 steps} & \Sexpr{result_RH1_steps10085} \\
	\textbf{13110 steps} & \Sexpr{result_RH1_steps13110} \\
	\textbf{17043 steps} & \Sexpr{result_RH1_steps17043} \\
	\textbf{22157 steps} & \Sexpr{result_RH1_steps22157} \\
	\textbf{28804 steps} & \Sexpr{result_RH1_steps28804} \\
	\textbf{37445 steps} & \Sexpr{result_RH1_steps37445} \\
	\textbf{48679 steps} & \Sexpr{result_RH1_steps48679} \\
	\textbf{63282 steps} & \Sexpr{result_RH1_steps63282} \\
	\textbf{82267 steps} & \Sexpr{result_RH1_steps82267} \\
	\textbf{106948 steps} & \Sexpr{result_RH1_steps106948} \\
	\textbf{139032 steps} & \Sexpr{result_RH1_steps139032} \\
	\textbf{180742 steps} & \Sexpr{result_RH1_steps180742} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH1 Results Summary}
	\begin{tabular}{ll}
	\textbf{Hylaa \textless{} Warm:}& \Sexpr{100 * result_RH1_less / result_RH1_objects}\% \\
	\textbf{Hylaa \textgreater{} Warm:}& \Sexpr{100 * result_RH1_greater / result_RH1_objects}\%\\
	\textbf{Hylaa:} & \Sexpr{100 * result_RH1_Hylaa / result_RH1_objects}\%\\
	\textbf{Warm:} & \Sexpr{100 * result_RH1_Warm / result_RH1_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH1_none / result_RH1_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH1_inconclusive / result_RH1_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH2_result = list(hypothesis = "RH2", results = c(result_RH2_less / result_RH2_objects, result_RH2_greater / result_RH2_objects, result_RH2_Hylaa / result_RH2_objects, result_RH2_Decomp / result_RH2_objects, result_RH2_none / result_RH2_objects, result_RH2_inconclusive / result_RH2_objects), objectResults = list( list(object = 'steps31', result = result_object_RH2_steps31),  list(object = 'steps40', result = result_object_RH2_steps40),  list(object = 'steps53', result = result_object_RH2_steps53),  list(object = 'steps68', result = result_object_RH2_steps68),  list(object = 'steps89', result = result_object_RH2_steps89),  list(object = 'steps116', result = result_object_RH2_steps116),  list(object = 'steps151', result = result_object_RH2_steps151),  list(object = 'steps197', result = result_object_RH2_steps197),  list(object = 'steps256', result = result_object_RH2_steps256),  list(object = 'steps332', result = result_object_RH2_steps332),  list(object = 'steps432', result = result_object_RH2_steps432),  list(object = 'steps562', result = result_object_RH2_steps562),  list(object = 'steps731', result = result_object_RH2_steps731),  list(object = 'steps951', result = result_object_RH2_steps951),  list(object = 'steps1236', result = result_object_RH2_steps1236),  list(object = 'steps1607', result = result_object_RH2_steps1607),  list(object = 'steps2089', result = result_object_RH2_steps2089),  list(object = 'steps2716', result = result_object_RH2_steps2716),  list(object = 'steps3531', result = result_object_RH2_steps3531),  list(object = 'steps4590', result = result_object_RH2_steps4590),  list(object = 'steps5967', result = result_object_RH2_steps5967),  list(object = 'steps7757', result = result_object_RH2_steps7757),  list(object = 'steps10085', result = result_object_RH2_steps10085),  list(object = 'steps13110', result = result_object_RH2_steps13110),  list(object = 'steps17043', result = result_object_RH2_steps17043),  list(object = 'steps22157', result = result_object_RH2_steps22157),  list(object = 'steps28804', result = result_object_RH2_steps28804),  list(object = 'steps37445', result = result_object_RH2_steps37445),  list(object = 'steps48679', result = result_object_RH2_steps48679),  list(object = 'steps63282', result = result_object_RH2_steps63282),  list(object = 'steps82267', result = result_object_RH2_steps82267),  list(object = 'steps106948', result = result_object_RH2_steps106948),  list(object = 'steps139032', result = result_object_RH2_steps139032),  list(object = 'steps180742', result = result_object_RH2_steps180742) ))	
	@
	
	\subsubsection{RH2 Results: Runtime Hylaa = Decomp}
	
	
	\begin{table}[H]
	\centering
	\caption{RH2 Results per Object}
	\begin{tabular}{ll}
	\textbf{31 steps} & \Sexpr{result_RH2_steps31} \\
	\textbf{40 steps} & \Sexpr{result_RH2_steps40} \\
	\textbf{53 steps} & \Sexpr{result_RH2_steps53} \\
	\textbf{68 steps} & \Sexpr{result_RH2_steps68} \\
	\textbf{89 steps} & \Sexpr{result_RH2_steps89} \\
	\textbf{116 steps} & \Sexpr{result_RH2_steps116} \\
	\textbf{151 steps} & \Sexpr{result_RH2_steps151} \\
	\textbf{197 steps} & \Sexpr{result_RH2_steps197} \\
	\textbf{256 steps} & \Sexpr{result_RH2_steps256} \\
	\textbf{332 steps} & \Sexpr{result_RH2_steps332} \\
	\textbf{432 steps} & \Sexpr{result_RH2_steps432} \\
	\textbf{562 steps} & \Sexpr{result_RH2_steps562} \\
	\textbf{731 steps} & \Sexpr{result_RH2_steps731} \\
	\textbf{951 steps} & \Sexpr{result_RH2_steps951} \\
	\textbf{1236 steps} & \Sexpr{result_RH2_steps1236} \\
	\textbf{1607 steps} & \Sexpr{result_RH2_steps1607} \\
	\textbf{2089 steps} & \Sexpr{result_RH2_steps2089} \\
	\textbf{2716 steps} & \Sexpr{result_RH2_steps2716} \\
	\textbf{3531 steps} & \Sexpr{result_RH2_steps3531} \\
	\textbf{4590 steps} & \Sexpr{result_RH2_steps4590} \\
	\textbf{5967 steps} & \Sexpr{result_RH2_steps5967} \\
	\textbf{7757 steps} & \Sexpr{result_RH2_steps7757} \\
	\textbf{10085 steps} & \Sexpr{result_RH2_steps10085} \\
	\textbf{13110 steps} & \Sexpr{result_RH2_steps13110} \\
	\textbf{17043 steps} & \Sexpr{result_RH2_steps17043} \\
	\textbf{22157 steps} & \Sexpr{result_RH2_steps22157} \\
	\textbf{28804 steps} & \Sexpr{result_RH2_steps28804} \\
	\textbf{37445 steps} & \Sexpr{result_RH2_steps37445} \\
	\textbf{48679 steps} & \Sexpr{result_RH2_steps48679} \\
	\textbf{63282 steps} & \Sexpr{result_RH2_steps63282} \\
	\textbf{82267 steps} & \Sexpr{result_RH2_steps82267} \\
	\textbf{106948 steps} & \Sexpr{result_RH2_steps106948} \\
	\textbf{139032 steps} & \Sexpr{result_RH2_steps139032} \\
	\textbf{180742 steps} & \Sexpr{result_RH2_steps180742} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH2 Results Summary}
	\begin{tabular}{ll}
	\textbf{Hylaa \textless{} Decomp:}& \Sexpr{100 * result_RH2_less / result_RH2_objects}\% \\
	\textbf{Hylaa \textgreater{} Decomp:}& \Sexpr{100 * result_RH2_greater / result_RH2_objects}\%\\
	\textbf{Hylaa:} & \Sexpr{100 * result_RH2_Hylaa / result_RH2_objects}\%\\
	\textbf{Decomp:} & \Sexpr{100 * result_RH2_Decomp / result_RH2_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH2_none / result_RH2_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH2_inconclusive / result_RH2_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH3_result = list(hypothesis = "RH3", results = c(result_RH3_less / result_RH3_objects, result_RH3_greater / result_RH3_objects, result_RH3_Hylaa / result_RH3_objects, result_RH3_Basic / result_RH3_objects, result_RH3_none / result_RH3_objects, result_RH3_inconclusive / result_RH3_objects), objectResults = list( list(object = 'steps31', result = result_object_RH3_steps31),  list(object = 'steps40', result = result_object_RH3_steps40),  list(object = 'steps53', result = result_object_RH3_steps53),  list(object = 'steps68', result = result_object_RH3_steps68),  list(object = 'steps89', result = result_object_RH3_steps89),  list(object = 'steps116', result = result_object_RH3_steps116),  list(object = 'steps151', result = result_object_RH3_steps151),  list(object = 'steps197', result = result_object_RH3_steps197),  list(object = 'steps256', result = result_object_RH3_steps256),  list(object = 'steps332', result = result_object_RH3_steps332),  list(object = 'steps432', result = result_object_RH3_steps432),  list(object = 'steps562', result = result_object_RH3_steps562),  list(object = 'steps731', result = result_object_RH3_steps731),  list(object = 'steps951', result = result_object_RH3_steps951),  list(object = 'steps1236', result = result_object_RH3_steps1236),  list(object = 'steps1607', result = result_object_RH3_steps1607),  list(object = 'steps2089', result = result_object_RH3_steps2089),  list(object = 'steps2716', result = result_object_RH3_steps2716),  list(object = 'steps3531', result = result_object_RH3_steps3531),  list(object = 'steps4590', result = result_object_RH3_steps4590),  list(object = 'steps5967', result = result_object_RH3_steps5967),  list(object = 'steps7757', result = result_object_RH3_steps7757),  list(object = 'steps10085', result = result_object_RH3_steps10085),  list(object = 'steps13110', result = result_object_RH3_steps13110),  list(object = 'steps17043', result = result_object_RH3_steps17043),  list(object = 'steps22157', result = result_object_RH3_steps22157),  list(object = 'steps28804', result = result_object_RH3_steps28804),  list(object = 'steps37445', result = result_object_RH3_steps37445),  list(object = 'steps48679', result = result_object_RH3_steps48679),  list(object = 'steps63282', result = result_object_RH3_steps63282),  list(object = 'steps82267', result = result_object_RH3_steps82267),  list(object = 'steps106948', result = result_object_RH3_steps106948),  list(object = 'steps139032', result = result_object_RH3_steps139032),  list(object = 'steps180742', result = result_object_RH3_steps180742) ))	
	@
	
	\subsubsection{RH3 Results: Runtime Hylaa = Basic}
	
	
	\begin{table}[H]
	\centering
	\caption{RH3 Results per Object}
	\begin{tabular}{ll}
	\textbf{31 steps} & \Sexpr{result_RH3_steps31} \\
	\textbf{40 steps} & \Sexpr{result_RH3_steps40} \\
	\textbf{53 steps} & \Sexpr{result_RH3_steps53} \\
	\textbf{68 steps} & \Sexpr{result_RH3_steps68} \\
	\textbf{89 steps} & \Sexpr{result_RH3_steps89} \\
	\textbf{116 steps} & \Sexpr{result_RH3_steps116} \\
	\textbf{151 steps} & \Sexpr{result_RH3_steps151} \\
	\textbf{197 steps} & \Sexpr{result_RH3_steps197} \\
	\textbf{256 steps} & \Sexpr{result_RH3_steps256} \\
	\textbf{332 steps} & \Sexpr{result_RH3_steps332} \\
	\textbf{432 steps} & \Sexpr{result_RH3_steps432} \\
	\textbf{562 steps} & \Sexpr{result_RH3_steps562} \\
	\textbf{731 steps} & \Sexpr{result_RH3_steps731} \\
	\textbf{951 steps} & \Sexpr{result_RH3_steps951} \\
	\textbf{1236 steps} & \Sexpr{result_RH3_steps1236} \\
	\textbf{1607 steps} & \Sexpr{result_RH3_steps1607} \\
	\textbf{2089 steps} & \Sexpr{result_RH3_steps2089} \\
	\textbf{2716 steps} & \Sexpr{result_RH3_steps2716} \\
	\textbf{3531 steps} & \Sexpr{result_RH3_steps3531} \\
	\textbf{4590 steps} & \Sexpr{result_RH3_steps4590} \\
	\textbf{5967 steps} & \Sexpr{result_RH3_steps5967} \\
	\textbf{7757 steps} & \Sexpr{result_RH3_steps7757} \\
	\textbf{10085 steps} & \Sexpr{result_RH3_steps10085} \\
	\textbf{13110 steps} & \Sexpr{result_RH3_steps13110} \\
	\textbf{17043 steps} & \Sexpr{result_RH3_steps17043} \\
	\textbf{22157 steps} & \Sexpr{result_RH3_steps22157} \\
	\textbf{28804 steps} & \Sexpr{result_RH3_steps28804} \\
	\textbf{37445 steps} & \Sexpr{result_RH3_steps37445} \\
	\textbf{48679 steps} & \Sexpr{result_RH3_steps48679} \\
	\textbf{63282 steps} & \Sexpr{result_RH3_steps63282} \\
	\textbf{82267 steps} & \Sexpr{result_RH3_steps82267} \\
	\textbf{106948 steps} & \Sexpr{result_RH3_steps106948} \\
	\textbf{139032 steps} & \Sexpr{result_RH3_steps139032} \\
	\textbf{180742 steps} & \Sexpr{result_RH3_steps180742} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH3 Results Summary}
	\begin{tabular}{ll}
	\textbf{Hylaa \textless{} Basic:}& \Sexpr{100 * result_RH3_less / result_RH3_objects}\% \\
	\textbf{Hylaa \textgreater{} Basic:}& \Sexpr{100 * result_RH3_greater / result_RH3_objects}\%\\
	\textbf{Hylaa:} & \Sexpr{100 * result_RH3_Hylaa / result_RH3_objects}\%\\
	\textbf{Basic:} & \Sexpr{100 * result_RH3_Basic / result_RH3_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH3_none / result_RH3_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH3_inconclusive / result_RH3_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH4_result = list(hypothesis = "RH4", results = c(result_RH4_less / result_RH4_objects, result_RH4_greater / result_RH4_objects, result_RH4_Hylaa / result_RH4_objects, result_RH4_NoInput / result_RH4_objects, result_RH4_none / result_RH4_objects, result_RH4_inconclusive / result_RH4_objects), objectResults = list( list(object = 'steps31', result = result_object_RH4_steps31),  list(object = 'steps40', result = result_object_RH4_steps40),  list(object = 'steps53', result = result_object_RH4_steps53),  list(object = 'steps68', result = result_object_RH4_steps68),  list(object = 'steps89', result = result_object_RH4_steps89),  list(object = 'steps116', result = result_object_RH4_steps116),  list(object = 'steps151', result = result_object_RH4_steps151),  list(object = 'steps197', result = result_object_RH4_steps197),  list(object = 'steps256', result = result_object_RH4_steps256),  list(object = 'steps332', result = result_object_RH4_steps332),  list(object = 'steps432', result = result_object_RH4_steps432),  list(object = 'steps562', result = result_object_RH4_steps562),  list(object = 'steps731', result = result_object_RH4_steps731),  list(object = 'steps951', result = result_object_RH4_steps951),  list(object = 'steps1236', result = result_object_RH4_steps1236),  list(object = 'steps1607', result = result_object_RH4_steps1607),  list(object = 'steps2089', result = result_object_RH4_steps2089),  list(object = 'steps2716', result = result_object_RH4_steps2716),  list(object = 'steps3531', result = result_object_RH4_steps3531),  list(object = 'steps4590', result = result_object_RH4_steps4590),  list(object = 'steps5967', result = result_object_RH4_steps5967),  list(object = 'steps7757', result = result_object_RH4_steps7757),  list(object = 'steps10085', result = result_object_RH4_steps10085),  list(object = 'steps13110', result = result_object_RH4_steps13110),  list(object = 'steps17043', result = result_object_RH4_steps17043),  list(object = 'steps22157', result = result_object_RH4_steps22157),  list(object = 'steps28804', result = result_object_RH4_steps28804),  list(object = 'steps37445', result = result_object_RH4_steps37445),  list(object = 'steps48679', result = result_object_RH4_steps48679),  list(object = 'steps63282', result = result_object_RH4_steps63282),  list(object = 'steps82267', result = result_object_RH4_steps82267),  list(object = 'steps106948', result = result_object_RH4_steps106948),  list(object = 'steps139032', result = result_object_RH4_steps139032),  list(object = 'steps180742', result = result_object_RH4_steps180742) ))	
	@
	
	\subsubsection{RH4 Results: Runtime Hylaa = No Input}
	
	
	\begin{table}[H]
	\centering
	\caption{RH4 Results per Object}
	\begin{tabular}{ll}
	\textbf{31 steps} & \Sexpr{result_RH4_steps31} \\
	\textbf{40 steps} & \Sexpr{result_RH4_steps40} \\
	\textbf{53 steps} & \Sexpr{result_RH4_steps53} \\
	\textbf{68 steps} & \Sexpr{result_RH4_steps68} \\
	\textbf{89 steps} & \Sexpr{result_RH4_steps89} \\
	\textbf{116 steps} & \Sexpr{result_RH4_steps116} \\
	\textbf{151 steps} & \Sexpr{result_RH4_steps151} \\
	\textbf{197 steps} & \Sexpr{result_RH4_steps197} \\
	\textbf{256 steps} & \Sexpr{result_RH4_steps256} \\
	\textbf{332 steps} & \Sexpr{result_RH4_steps332} \\
	\textbf{432 steps} & \Sexpr{result_RH4_steps432} \\
	\textbf{562 steps} & \Sexpr{result_RH4_steps562} \\
	\textbf{731 steps} & \Sexpr{result_RH4_steps731} \\
	\textbf{951 steps} & \Sexpr{result_RH4_steps951} \\
	\textbf{1236 steps} & \Sexpr{result_RH4_steps1236} \\
	\textbf{1607 steps} & \Sexpr{result_RH4_steps1607} \\
	\textbf{2089 steps} & \Sexpr{result_RH4_steps2089} \\
	\textbf{2716 steps} & \Sexpr{result_RH4_steps2716} \\
	\textbf{3531 steps} & \Sexpr{result_RH4_steps3531} \\
	\textbf{4590 steps} & \Sexpr{result_RH4_steps4590} \\
	\textbf{5967 steps} & \Sexpr{result_RH4_steps5967} \\
	\textbf{7757 steps} & \Sexpr{result_RH4_steps7757} \\
	\textbf{10085 steps} & \Sexpr{result_RH4_steps10085} \\
	\textbf{13110 steps} & \Sexpr{result_RH4_steps13110} \\
	\textbf{17043 steps} & \Sexpr{result_RH4_steps17043} \\
	\textbf{22157 steps} & \Sexpr{result_RH4_steps22157} \\
	\textbf{28804 steps} & \Sexpr{result_RH4_steps28804} \\
	\textbf{37445 steps} & \Sexpr{result_RH4_steps37445} \\
	\textbf{48679 steps} & \Sexpr{result_RH4_steps48679} \\
	\textbf{63282 steps} & \Sexpr{result_RH4_steps63282} \\
	\textbf{82267 steps} & \Sexpr{result_RH4_steps82267} \\
	\textbf{106948 steps} & \Sexpr{result_RH4_steps106948} \\
	\textbf{139032 steps} & \Sexpr{result_RH4_steps139032} \\
	\textbf{180742 steps} & \Sexpr{result_RH4_steps180742} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH4 Results Summary}
	\begin{tabular}{ll}
	\textbf{Hylaa \textless{} No Input:}& \Sexpr{100 * result_RH4_less / result_RH4_objects}\% \\
	\textbf{Hylaa \textgreater{} No Input:}& \Sexpr{100 * result_RH4_greater / result_RH4_objects}\%\\
	\textbf{Hylaa:} & \Sexpr{100 * result_RH4_Hylaa / result_RH4_objects}\%\\
	\textbf{No Input:} & \Sexpr{100 * result_RH4_NoInput / result_RH4_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH4_none / result_RH4_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH4_inconclusive / result_RH4_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	
		

<<echo=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
experimentResults = list( RH1_result, RH2_result, RH3_result, RH4_result)
write(toJSON(experimentResults, pretty = TRUE, auto_unbox = TRUE), "experimentResults.json")

@
	
\clearpage
\appendix
\section{Session Information}
<<echo=FALSE, warning=FALSE , message=FALSE >>=
sessionInfo()
@

\end{document}
