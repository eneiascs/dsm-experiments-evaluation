\documentclass{article}
\usepackage{authblk}
\usepackage{float}
\usepackage{multirow}
\usepackage[utf8]{inputenc}
\begin{document}
\title{Constraint Normalization and Parameterized Caching for Quantitative Program Analysis}
\author{}
\maketitle



<<setup, include=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
library(reproducer) # R package incl. software engineering data sets
library(ggplot2) # R package to create high-quality graphics
library(jsonlite)

alpha = 0.05
 
json_data = fromJSON("data.json")

json_data$objectOrder[json_data$object == 'password'] = 1
json_data$objectOrder[json_data$object == 'password2'] = 2
json_data$objectOrder[json_data$object == 'obscure'] = 3
json_data$objectOrder[json_data$object == 'crime'] = 4

json_data$treatmentDescription[json_data$treatment == 'cashew'] = 'Cashew'
json_data$treatmentDescription[json_data$treatment == 'nocache'] = 'No cache'
json_data$treatmentDescription[json_data$treatment == 'trivialcaching'] = 'No Normalization'
json_data$objectLabel[json_data$object == 'password'] = 'Password1'
json_data$objectLabel[json_data$object == 'password2'] = 'Password2'
json_data$objectLabel[json_data$object == 'obscure'] = 'Obscure'
json_data$objectLabel[json_data$object == 'crime'] = 'CRIME'

expectedRuns = 1
json_data$sumTime[json_data$executionStatus!='FINISHED']=NA
if (length(json_data$sumTime[json_data$treatment == 'cashew' & json_data$object == 'password' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'cashew' & json_data$object == 'password']=NA
}
if (length(json_data$sumTime[json_data$treatment == 'cashew' & json_data$object == 'password2' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'cashew' & json_data$object == 'password2']=NA
}
if (length(json_data$sumTime[json_data$treatment == 'cashew' & json_data$object == 'obscure' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'cashew' & json_data$object == 'obscure']=NA
}
if (length(json_data$sumTime[json_data$treatment == 'cashew' & json_data$object == 'crime' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'cashew' & json_data$object == 'crime']=NA
}
if (length(json_data$sumTime[json_data$treatment == 'nocache' & json_data$object == 'password' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'nocache' & json_data$object == 'password']=NA
}
if (length(json_data$sumTime[json_data$treatment == 'nocache' & json_data$object == 'password2' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'nocache' & json_data$object == 'password2']=NA
}
if (length(json_data$sumTime[json_data$treatment == 'nocache' & json_data$object == 'obscure' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'nocache' & json_data$object == 'obscure']=NA
}
if (length(json_data$sumTime[json_data$treatment == 'nocache' & json_data$object == 'crime' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'nocache' & json_data$object == 'crime']=NA
}
if (length(json_data$sumTime[json_data$treatment == 'trivialcaching' & json_data$object == 'password' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'trivialcaching' & json_data$object == 'password']=NA
}
if (length(json_data$sumTime[json_data$treatment == 'trivialcaching' & json_data$object == 'password2' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'trivialcaching' & json_data$object == 'password2']=NA
}
if (length(json_data$sumTime[json_data$treatment == 'trivialcaching' & json_data$object == 'obscure' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'trivialcaching' & json_data$object == 'obscure']=NA
}
if (length(json_data$sumTime[json_data$treatment == 'trivialcaching' & json_data$object == 'crime' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'trivialcaching' & json_data$object == 'crime']=NA
}
json_data$hits[json_data$executionStatus!='FINISHED']=NA
if (length(json_data$hits[json_data$treatment == 'cashew' & json_data$object == 'password' & !is.na(json_data$hits)])!=expectedRuns){
	json_data$hits[json_data$treatment == 'cashew' & json_data$object == 'password']=NA
}
if (length(json_data$hits[json_data$treatment == 'cashew' & json_data$object == 'password2' & !is.na(json_data$hits)])!=expectedRuns){
	json_data$hits[json_data$treatment == 'cashew' & json_data$object == 'password2']=NA
}
if (length(json_data$hits[json_data$treatment == 'cashew' & json_data$object == 'obscure' & !is.na(json_data$hits)])!=expectedRuns){
	json_data$hits[json_data$treatment == 'cashew' & json_data$object == 'obscure']=NA
}
if (length(json_data$hits[json_data$treatment == 'cashew' & json_data$object == 'crime' & !is.na(json_data$hits)])!=expectedRuns){
	json_data$hits[json_data$treatment == 'cashew' & json_data$object == 'crime']=NA
}
if (length(json_data$hits[json_data$treatment == 'nocache' & json_data$object == 'password' & !is.na(json_data$hits)])!=expectedRuns){
	json_data$hits[json_data$treatment == 'nocache' & json_data$object == 'password']=NA
}
if (length(json_data$hits[json_data$treatment == 'nocache' & json_data$object == 'password2' & !is.na(json_data$hits)])!=expectedRuns){
	json_data$hits[json_data$treatment == 'nocache' & json_data$object == 'password2']=NA
}
if (length(json_data$hits[json_data$treatment == 'nocache' & json_data$object == 'obscure' & !is.na(json_data$hits)])!=expectedRuns){
	json_data$hits[json_data$treatment == 'nocache' & json_data$object == 'obscure']=NA
}
if (length(json_data$hits[json_data$treatment == 'nocache' & json_data$object == 'crime' & !is.na(json_data$hits)])!=expectedRuns){
	json_data$hits[json_data$treatment == 'nocache' & json_data$object == 'crime']=NA
}
if (length(json_data$hits[json_data$treatment == 'trivialcaching' & json_data$object == 'password' & !is.na(json_data$hits)])!=expectedRuns){
	json_data$hits[json_data$treatment == 'trivialcaching' & json_data$object == 'password']=NA
}
if (length(json_data$hits[json_data$treatment == 'trivialcaching' & json_data$object == 'password2' & !is.na(json_data$hits)])!=expectedRuns){
	json_data$hits[json_data$treatment == 'trivialcaching' & json_data$object == 'password2']=NA
}
if (length(json_data$hits[json_data$treatment == 'trivialcaching' & json_data$object == 'obscure' & !is.na(json_data$hits)])!=expectedRuns){
	json_data$hits[json_data$treatment == 'trivialcaching' & json_data$object == 'obscure']=NA
}
if (length(json_data$hits[json_data$treatment == 'trivialcaching' & json_data$object == 'crime' & !is.na(json_data$hits)])!=expectedRuns){
	json_data$hits[json_data$treatment == 'trivialcaching' & json_data$object == 'crime']=NA
}
json_data$misses[json_data$executionStatus!='FINISHED']=NA
if (length(json_data$misses[json_data$treatment == 'cashew' & json_data$object == 'password' & !is.na(json_data$misses)])!=expectedRuns){
	json_data$misses[json_data$treatment == 'cashew' & json_data$object == 'password']=NA
}
if (length(json_data$misses[json_data$treatment == 'cashew' & json_data$object == 'password2' & !is.na(json_data$misses)])!=expectedRuns){
	json_data$misses[json_data$treatment == 'cashew' & json_data$object == 'password2']=NA
}
if (length(json_data$misses[json_data$treatment == 'cashew' & json_data$object == 'obscure' & !is.na(json_data$misses)])!=expectedRuns){
	json_data$misses[json_data$treatment == 'cashew' & json_data$object == 'obscure']=NA
}
if (length(json_data$misses[json_data$treatment == 'cashew' & json_data$object == 'crime' & !is.na(json_data$misses)])!=expectedRuns){
	json_data$misses[json_data$treatment == 'cashew' & json_data$object == 'crime']=NA
}
if (length(json_data$misses[json_data$treatment == 'nocache' & json_data$object == 'password' & !is.na(json_data$misses)])!=expectedRuns){
	json_data$misses[json_data$treatment == 'nocache' & json_data$object == 'password']=NA
}
if (length(json_data$misses[json_data$treatment == 'nocache' & json_data$object == 'password2' & !is.na(json_data$misses)])!=expectedRuns){
	json_data$misses[json_data$treatment == 'nocache' & json_data$object == 'password2']=NA
}
if (length(json_data$misses[json_data$treatment == 'nocache' & json_data$object == 'obscure' & !is.na(json_data$misses)])!=expectedRuns){
	json_data$misses[json_data$treatment == 'nocache' & json_data$object == 'obscure']=NA
}
if (length(json_data$misses[json_data$treatment == 'nocache' & json_data$object == 'crime' & !is.na(json_data$misses)])!=expectedRuns){
	json_data$misses[json_data$treatment == 'nocache' & json_data$object == 'crime']=NA
}
if (length(json_data$misses[json_data$treatment == 'trivialcaching' & json_data$object == 'password' & !is.na(json_data$misses)])!=expectedRuns){
	json_data$misses[json_data$treatment == 'trivialcaching' & json_data$object == 'password']=NA
}
if (length(json_data$misses[json_data$treatment == 'trivialcaching' & json_data$object == 'password2' & !is.na(json_data$misses)])!=expectedRuns){
	json_data$misses[json_data$treatment == 'trivialcaching' & json_data$object == 'password2']=NA
}
if (length(json_data$misses[json_data$treatment == 'trivialcaching' & json_data$object == 'obscure' & !is.na(json_data$misses)])!=expectedRuns){
	json_data$misses[json_data$treatment == 'trivialcaching' & json_data$object == 'obscure']=NA
}
if (length(json_data$misses[json_data$treatment == 'trivialcaching' & json_data$object == 'crime' & !is.na(json_data$misses)])!=expectedRuns){
	json_data$misses[json_data$treatment == 'trivialcaching' & json_data$object == 'crime']=NA
}
json_data$hitsMissesRatio[json_data$executionStatus!='FINISHED']=NA
if (length(json_data$hitsMissesRatio[json_data$treatment == 'cashew' & json_data$object == 'password' & !is.na(json_data$hitsMissesRatio)])!=expectedRuns){
	json_data$hitsMissesRatio[json_data$treatment == 'cashew' & json_data$object == 'password']=NA
}
if (length(json_data$hitsMissesRatio[json_data$treatment == 'cashew' & json_data$object == 'password2' & !is.na(json_data$hitsMissesRatio)])!=expectedRuns){
	json_data$hitsMissesRatio[json_data$treatment == 'cashew' & json_data$object == 'password2']=NA
}
if (length(json_data$hitsMissesRatio[json_data$treatment == 'cashew' & json_data$object == 'obscure' & !is.na(json_data$hitsMissesRatio)])!=expectedRuns){
	json_data$hitsMissesRatio[json_data$treatment == 'cashew' & json_data$object == 'obscure']=NA
}
if (length(json_data$hitsMissesRatio[json_data$treatment == 'cashew' & json_data$object == 'crime' & !is.na(json_data$hitsMissesRatio)])!=expectedRuns){
	json_data$hitsMissesRatio[json_data$treatment == 'cashew' & json_data$object == 'crime']=NA
}
if (length(json_data$hitsMissesRatio[json_data$treatment == 'nocache' & json_data$object == 'password' & !is.na(json_data$hitsMissesRatio)])!=expectedRuns){
	json_data$hitsMissesRatio[json_data$treatment == 'nocache' & json_data$object == 'password']=NA
}
if (length(json_data$hitsMissesRatio[json_data$treatment == 'nocache' & json_data$object == 'password2' & !is.na(json_data$hitsMissesRatio)])!=expectedRuns){
	json_data$hitsMissesRatio[json_data$treatment == 'nocache' & json_data$object == 'password2']=NA
}
if (length(json_data$hitsMissesRatio[json_data$treatment == 'nocache' & json_data$object == 'obscure' & !is.na(json_data$hitsMissesRatio)])!=expectedRuns){
	json_data$hitsMissesRatio[json_data$treatment == 'nocache' & json_data$object == 'obscure']=NA
}
if (length(json_data$hitsMissesRatio[json_data$treatment == 'nocache' & json_data$object == 'crime' & !is.na(json_data$hitsMissesRatio)])!=expectedRuns){
	json_data$hitsMissesRatio[json_data$treatment == 'nocache' & json_data$object == 'crime']=NA
}
if (length(json_data$hitsMissesRatio[json_data$treatment == 'trivialcaching' & json_data$object == 'password' & !is.na(json_data$hitsMissesRatio)])!=expectedRuns){
	json_data$hitsMissesRatio[json_data$treatment == 'trivialcaching' & json_data$object == 'password']=NA
}
if (length(json_data$hitsMissesRatio[json_data$treatment == 'trivialcaching' & json_data$object == 'password2' & !is.na(json_data$hitsMissesRatio)])!=expectedRuns){
	json_data$hitsMissesRatio[json_data$treatment == 'trivialcaching' & json_data$object == 'password2']=NA
}
if (length(json_data$hitsMissesRatio[json_data$treatment == 'trivialcaching' & json_data$object == 'obscure' & !is.na(json_data$hitsMissesRatio)])!=expectedRuns){
	json_data$hitsMissesRatio[json_data$treatment == 'trivialcaching' & json_data$object == 'obscure']=NA
}
if (length(json_data$hitsMissesRatio[json_data$treatment == 'trivialcaching' & json_data$object == 'crime' & !is.na(json_data$hitsMissesRatio)])!=expectedRuns){
	json_data$hitsMissesRatio[json_data$treatment == 'trivialcaching' & json_data$object == 'crime']=NA
}

json_data$treatment = as.factor(json_data$treatment)
json_data$treatmentDescription = as.factor(json_data$treatmentDescription)
json_data$object = as.factor(json_data$object)		
json_data$objectLabel = as.factor(json_data$objectLabel)
data_summary <- function(data, varname, groupnames){
  require(plyr)
  summary_func <- function(x, col){
    c(mean = mean(x[[col]], na.rm=TRUE),
      sd = sd(x[[col]], na.rm=TRUE))
  }
  data_sum<-ddply(data, groupnames, .fun=summary_func,
                  varname)
  data_sum <- rename(data_sum, c("mean" = varname))
 return(data_sum)
}
breaks_continuous <- function(data, steps){
  diff<-max(data)-min(data) 
  step_size<-diff/steps
  step<-min(data)
  breaks<-c(step)
  for (i in 1:steps){
    step<-step+step_size
    breaks<-c(breaks,step)
  }
  return(breaks)
}  
breaks_log <- function(data, steps){
  diff<-max(data)/min(data) 
  base<-diff^(1/steps)
  exp<-log(min(data),base)
  breaks<-c(round(base^exp))
  for (i in 1:steps){
    exp<-exp+1
    breaks<-c(breaks,round(base^exp))
  }
  return(breaks)
}  
@
\section{Description}
Constraint Normalization and Parameterized Caching for Quantitative Program Analysis



\section{Overview}


<<overview_sumTime, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF<-data_summary(subset(json_data,(object=='password'|object=='password2'|object=='obscure'|object=='crime') & !is.na(sumTime)), varname="sumTime", groupnames=c("treatmentDescription", "objectLabel", "objectOrder"))
DF$objectLabel <- factor(DF$objectLabel, levels=c("Password1","Password2","Obscure","CRIME"))
		
		ggplot(DF, aes(x=objectLabel, y=sumTime, group=treatmentDescription, color=treatmentDescription)) + 
		    geom_errorbar(aes(ymin=sumTime-sd, ymax=sumTime+sd), width=.1, linetype=3) +
		    geom_line() + geom_point()+
		   scale_color_brewer(palette="Paired") +
		   theme_bw() +
		  scale_x_discrete(name = "Constraints")+
		  
		  scale_y_continuous(name = "Total time (s)")+
		  ggtitle("Total time Overview") + 
		  theme(legend.title = element_blank())	
@
<<overview_hits, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF<-data_summary(subset(json_data,(object=='password'|object=='password2'|object=='obscure'|object=='crime') & !is.na(hits)), varname="hits", groupnames=c("treatmentDescription", "objectLabel", "objectOrder"))
DF$objectLabel <- factor(DF$objectLabel, levels=c("Password1","Password2","Obscure","CRIME"))
		
		ggplot(DF, aes(x=objectLabel, y=hits, group=treatmentDescription, color=treatmentDescription)) + 
		    geom_errorbar(aes(ymin=hits-sd, ymax=hits+sd), width=.1, linetype=3) +
		    geom_line() + geom_point()+
		   scale_color_brewer(palette="Paired") +
		   theme_bw() +
		  scale_x_discrete(name = "Constraints")+
		  
		  scale_y_continuous(name = "Hits ")+
		  ggtitle("Hits Overview") + 
		  theme(legend.title = element_blank())	
@
<<overview_misses, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF<-data_summary(subset(json_data,(object=='password'|object=='password2'|object=='obscure'|object=='crime') & !is.na(misses)), varname="misses", groupnames=c("treatmentDescription", "objectLabel", "objectOrder"))
DF$objectLabel <- factor(DF$objectLabel, levels=c("Password1","Password2","Obscure","CRIME"))
		
		ggplot(DF, aes(x=objectLabel, y=misses, group=treatmentDescription, color=treatmentDescription)) + 
		    geom_errorbar(aes(ymin=misses-sd, ymax=misses+sd), width=.1, linetype=3) +
		    geom_line() + geom_point()+
		   scale_color_brewer(palette="Paired") +
		   theme_bw() +
		  scale_x_discrete(name = "Constraints")+
		  
		  scale_y_continuous(name = "Misses ")+
		  ggtitle("Misses Overview") + 
		  theme(legend.title = element_blank())	
@
<<overview_hitsMissesRatio, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF<-data_summary(subset(json_data,(object=='password'|object=='password2'|object=='obscure'|object=='crime') & !is.na(hitsMissesRatio)), varname="hitsMissesRatio", groupnames=c("treatmentDescription", "objectLabel", "objectOrder"))
DF$objectLabel <- factor(DF$objectLabel, levels=c("Password1","Password2","Obscure","CRIME"))
		
		ggplot(DF, aes(x=objectLabel, y=hitsMissesRatio, group=treatmentDescription, color=treatmentDescription)) + 
		    geom_errorbar(aes(ymin=hitsMissesRatio-sd, ymax=hitsMissesRatio+sd), width=.1, linetype=3) +
		    geom_line() + geom_point()+
		   scale_color_brewer(palette="Paired") +
		   theme_bw() +
		  scale_x_discrete(name = "Constraints")+
		  
		  scale_y_continuous(name = "Hits/Misses ratio ")+
		  ggtitle("Hits/Misses ratio Overview") + 
		  theme(legend.title = element_blank())	
@



\subsection{Objects Overview}
\subsubsection{Overview for Password1}
<<password, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='cashew'|treatment=='nocache'|treatment=='trivialcaching')& object=='password')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$sumTime, DF$treatmentDescription, mean)))])   
boxplot_password_sumTime = ggplot(DF, aes(x =treatmentDescription , y = sumTime)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Transformations enabled")+
	ggtitle("Total time by Transformations enabled for Password1") + 
	ylab("Total time (s)")   
	boxplot_password_sumTime
	
DF=subset(json_data,(treatment=='cashew'|treatment=='nocache'|treatment=='trivialcaching')& object=='password')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$hits, DF$treatmentDescription, mean)))])   
boxplot_password_hits = ggplot(DF, aes(x =treatmentDescription , y = hits)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Transformations enabled")+
	ggtitle("Hits by Transformations enabled for Password1") + 
	ylab("Hits ")   
	boxplot_password_hits
	
DF=subset(json_data,(treatment=='cashew'|treatment=='nocache'|treatment=='trivialcaching')& object=='password')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$misses, DF$treatmentDescription, mean)))])   
boxplot_password_misses = ggplot(DF, aes(x =treatmentDescription , y = misses)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Transformations enabled")+
	ggtitle("Misses by Transformations enabled for Password1") + 
	ylab("Misses ")   
	boxplot_password_misses
	
DF=subset(json_data,(treatment=='cashew'|treatment=='nocache'|treatment=='trivialcaching')& object=='password')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$hitsMissesRatio, DF$treatmentDescription, mean)))])   
boxplot_password_hitsMissesRatio = ggplot(DF, aes(x =treatmentDescription , y = hitsMissesRatio)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Transformations enabled")+
	ggtitle("Hits/Misses ratio by Transformations enabled for Password1") + 
	ylab("Hits/Misses ratio ")   
	boxplot_password_hitsMissesRatio
	



@	
\subsubsection{Overview for Password2}
<<password2, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='cashew'|treatment=='nocache'|treatment=='trivialcaching')& object=='password2')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$sumTime, DF$treatmentDescription, mean)))])   
boxplot_password2_sumTime = ggplot(DF, aes(x =treatmentDescription , y = sumTime)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Transformations enabled")+
	ggtitle("Total time by Transformations enabled for Password2") + 
	ylab("Total time (s)")   
	boxplot_password2_sumTime
	
DF=subset(json_data,(treatment=='cashew'|treatment=='nocache'|treatment=='trivialcaching')& object=='password2')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$hits, DF$treatmentDescription, mean)))])   
boxplot_password2_hits = ggplot(DF, aes(x =treatmentDescription , y = hits)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Transformations enabled")+
	ggtitle("Hits by Transformations enabled for Password2") + 
	ylab("Hits ")   
	boxplot_password2_hits
	
DF=subset(json_data,(treatment=='cashew'|treatment=='nocache'|treatment=='trivialcaching')& object=='password2')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$misses, DF$treatmentDescription, mean)))])   
boxplot_password2_misses = ggplot(DF, aes(x =treatmentDescription , y = misses)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Transformations enabled")+
	ggtitle("Misses by Transformations enabled for Password2") + 
	ylab("Misses ")   
	boxplot_password2_misses
	
DF=subset(json_data,(treatment=='cashew'|treatment=='nocache'|treatment=='trivialcaching')& object=='password2')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$hitsMissesRatio, DF$treatmentDescription, mean)))])   
boxplot_password2_hitsMissesRatio = ggplot(DF, aes(x =treatmentDescription , y = hitsMissesRatio)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Transformations enabled")+
	ggtitle("Hits/Misses ratio by Transformations enabled for Password2") + 
	ylab("Hits/Misses ratio ")   
	boxplot_password2_hitsMissesRatio
	



@	
\subsubsection{Overview for Obscure}
<<obscure, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='cashew'|treatment=='nocache'|treatment=='trivialcaching')& object=='obscure')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$sumTime, DF$treatmentDescription, mean)))])   
boxplot_obscure_sumTime = ggplot(DF, aes(x =treatmentDescription , y = sumTime)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Transformations enabled")+
	ggtitle("Total time by Transformations enabled for Obscure") + 
	ylab("Total time (s)")   
	boxplot_obscure_sumTime
	
DF=subset(json_data,(treatment=='cashew'|treatment=='nocache'|treatment=='trivialcaching')& object=='obscure')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$hits, DF$treatmentDescription, mean)))])   
boxplot_obscure_hits = ggplot(DF, aes(x =treatmentDescription , y = hits)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Transformations enabled")+
	ggtitle("Hits by Transformations enabled for Obscure") + 
	ylab("Hits ")   
	boxplot_obscure_hits
	
DF=subset(json_data,(treatment=='cashew'|treatment=='nocache'|treatment=='trivialcaching')& object=='obscure')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$misses, DF$treatmentDescription, mean)))])   
boxplot_obscure_misses = ggplot(DF, aes(x =treatmentDescription , y = misses)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Transformations enabled")+
	ggtitle("Misses by Transformations enabled for Obscure") + 
	ylab("Misses ")   
	boxplot_obscure_misses
	
DF=subset(json_data,(treatment=='cashew'|treatment=='nocache'|treatment=='trivialcaching')& object=='obscure')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$hitsMissesRatio, DF$treatmentDescription, mean)))])   
boxplot_obscure_hitsMissesRatio = ggplot(DF, aes(x =treatmentDescription , y = hitsMissesRatio)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Transformations enabled")+
	ggtitle("Hits/Misses ratio by Transformations enabled for Obscure") + 
	ylab("Hits/Misses ratio ")   
	boxplot_obscure_hitsMissesRatio
	



@	
\subsubsection{Overview for CRIME}
<<crime, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='cashew'|treatment=='nocache'|treatment=='trivialcaching')& object=='crime')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$sumTime, DF$treatmentDescription, mean)))])   
boxplot_crime_sumTime = ggplot(DF, aes(x =treatmentDescription , y = sumTime)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Transformations enabled")+
	ggtitle("Total time by Transformations enabled for CRIME") + 
	ylab("Total time (s)")   
	boxplot_crime_sumTime
	
DF=subset(json_data,(treatment=='cashew'|treatment=='nocache'|treatment=='trivialcaching')& object=='crime')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$hits, DF$treatmentDescription, mean)))])   
boxplot_crime_hits = ggplot(DF, aes(x =treatmentDescription , y = hits)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Transformations enabled")+
	ggtitle("Hits by Transformations enabled for CRIME") + 
	ylab("Hits ")   
	boxplot_crime_hits
	
DF=subset(json_data,(treatment=='cashew'|treatment=='nocache'|treatment=='trivialcaching')& object=='crime')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$misses, DF$treatmentDescription, mean)))])   
boxplot_crime_misses = ggplot(DF, aes(x =treatmentDescription , y = misses)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Transformations enabled")+
	ggtitle("Misses by Transformations enabled for CRIME") + 
	ylab("Misses ")   
	boxplot_crime_misses
	
DF=subset(json_data,(treatment=='cashew'|treatment=='nocache'|treatment=='trivialcaching')& object=='crime')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$hitsMissesRatio, DF$treatmentDescription, mean)))])   
boxplot_crime_hitsMissesRatio = ggplot(DF, aes(x =treatmentDescription , y = hitsMissesRatio)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Transformations enabled")+
	ggtitle("Hits/Misses ratio by Transformations enabled for CRIME") + 
	ylab("Hits/Misses ratio ")   
	boxplot_crime_hitsMissesRatio
	



@	

\section{Research Hypotheses}

\subsection{RH1: Total time for Cashew is equals than Total time for No Cache}

 <<RH1, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 
 result_RH1_objects=4
 result_RH1_less=0
 result_RH1_greater=0
 result_RH1_cashew=0
 result_RH1_nocache=0
 result_RH1_none=0
 result_RH1_inconclusive=0
 @
 
 <<overview_RH1, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 DF <- data_summary(subset(json_data, (object == 'password' |object == 'password2' |object == 'obscure' |object == 'crime' ) & (treatment == 'cashew' | treatment == 'nocache')), varname = "sumTime", groupnames = c("treatmentDescription", "objectLabel", "objectOrder"))
 DF$objectLabel <- factor(DF$objectLabel, levels=c("Password1","Password2","Obscure","CRIME"))
 		
 		ggplot(DF, aes(x=objectLabel, y=sumTime, group=treatmentDescription, color=treatmentDescription)) + 
 		    geom_errorbar(aes(ymin=sumTime-sd, ymax=sumTime+sd), width=.1, linetype=3) +
 		    geom_line() + geom_point()+
 		   scale_color_brewer(palette="Paired") +
 		   theme_bw() +
 		  scale_x_discrete(name = "Constraints")+
 		  
 		  scale_y_continuous(name = "Total time (s)")+
 		  ggtitle("Total time Overview") + 
 		  theme(legend.title = element_blank())	
 @
 	

\subsubsection{RH1.1: Object Password1}

 \textbf{Total time for Cashew}
 <<RH1_cashew_password, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 sumTime_cashew_password = subset(json_data, treatment == 'cashew' & object == 'password' & !is.na(sumTime))$sumTime
 print(paste("Sample size: ", length(sumTime_cashew_password)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'password')$sumTime)
 
 if(length(sumTime_cashew_password) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'password'), "sumTime", min(subset(json_data, treatment == 'cashew'& object == 'password')$sumTime), max(subset(json_data, treatment == 'cashew' & object == 'password')$sumTime))
 
 	shap_cashew_password = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'password')$sumTime)
 	print(shap_cashew_password)
 	if(shap_cashew_password$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_password$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_password$p.value, sep = " "))
 	}
 }
 @
 \textbf{Total time for No cache}
 <<RH1_nocache_password, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 sumTime_nocache_password = subset(json_data, treatment == 'nocache' & object == 'password' & !is.na(sumTime))$sumTime
 print(paste("Sample size: ", length(sumTime_nocache_password)))					
 summary(subset(json_data, treatment == 'nocache' & object == 'password')$sumTime)
 
 if(length(sumTime_nocache_password) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'nocache' & object == 'password'), "sumTime", min(subset(json_data, treatment == 'nocache'& object == 'password')$sumTime), max(subset(json_data, treatment == 'nocache' & object == 'password')$sumTime))
 
 	shap_nocache_password = shapiro.test(subset(json_data, treatment == 'nocache' & object == 'password')$sumTime)
 	print(shap_nocache_password)
 	if(shap_nocache_password$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_nocache_password$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_nocache_password$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_password, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'nocache') & object == 'password')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$sumTime, DF$treatmentDescription, mean)))])
 boxplot_RH1_password = ggplot(DF, aes(x =treatmentDescription , y = sumTime)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Total time by Transformations enabled for Password1") + 
 	ylab("Total time (s)")			   
 boxplot_RH1_password
 if(length(sumTime_cashew_password) == expectedRuns & length(sumTime_nocache_password) == expectedRuns){
 	result_RH1_password_tTest = FALSE
 	result_RH1_password_wTest = FALSE
 	
 	if(shap_cashew_password$p.value > alpha&shap_nocache_password$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'password')$sumTime, subset(json_data,treatment == 'nocache' & object == 'password')$sumTime)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'password')$sumTime, subset(json_data, treatment == 'nocache' & object == 'password')$sumTime, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_password_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(sumTime~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'nocache') & object == 'password')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_password_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_password_wTest = TRUE
 		}
 	}				
 }
if(length(sumTime_cashew_password) == expectedRuns & length(sumTime_nocache_password) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Total time for Cashew: ", mean(subset(json_data, treatment == 'cashew' & object == 'password')$sumTime)))
	 print(paste("Mean Total time for No cache: ", mean(subset(json_data, treatment == 'nocache' & object == 'password')$sumTime)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'password')$sumTime) - mean(subset(json_data, treatment == 'nocache' & object == 'password')$sumTime))))
	 if (result_RH1_password_tTest | result_RH1_password_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'password')$sumTime) > mean(subset(json_data, treatment == 'nocache' & object == 'password')$sumTime)){
	   	result_RH1_password = "Cashew \\textgreater{} No cache"
	   	result_object_RH1_password = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_password = "Cashew \\textless{} No cache"
	   	result_object_RH1_password = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_password = 5
	 	result_RH1_password = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'password')$sumTime) > mean(subset(json_data, treatment == 'nocache' & object == 'password')$sumTime)){
	 	cat(paste("Total time for Cashew is ", 100 * (abs(mean(subset(json_data, treatment == 'nocache' & object == 'password')$sumTime) - mean(subset(json_data, treatment == 'cashew' & object == 'password')$sumTime)) / mean(subset(json_data, treatment == 'nocache' & object == 'password')$sumTime)), "% greater than \n Total time for No cache"))				
	 }else{
	     cat(paste("Total time for No cache is ", 100 * (abs(mean(subset(json_data, treatment == 'nocache' & object == 'password')$sumTime) - mean(subset(json_data, treatment == 'cashew' & object == 'password')$sumTime)) / mean(subset(json_data, treatment == 'cashew' & object == 'password')$sumTime)), "% greater than \nTotal time for Cashew"))			    
	 }	
} 
if (length(sumTime_cashew_password) != expectedRuns & length(sumTime_nocache_password) != expectedRuns){
 	result_object_RH1_password = 4
	result_RH1_password = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(sumTime_cashew_password) == expectedRuns & length(sumTime_nocache_password) != expectedRuns){
	result_object_RH1_password = 2
	result_RH1_password = "Cashew"
	result_RH1_cashew = result_RH1_cashew + 1			
}
if (length(sumTime_cashew_password) != expectedRuns & length(sumTime_nocache_password) == expectedRuns){
	result_object_RH1_password = 3
	result_RH1_password = "No cache"
	result_RH1_nocache = result_RH1_nocache + 1			
}
@  


\subsubsection{RH1.2: Object Password2}

 \textbf{Total time for Cashew}
 <<RH1_cashew_password2, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 sumTime_cashew_password2 = subset(json_data, treatment == 'cashew' & object == 'password2' & !is.na(sumTime))$sumTime
 print(paste("Sample size: ", length(sumTime_cashew_password2)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'password2')$sumTime)
 
 if(length(sumTime_cashew_password2) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'password2'), "sumTime", min(subset(json_data, treatment == 'cashew'& object == 'password2')$sumTime), max(subset(json_data, treatment == 'cashew' & object == 'password2')$sumTime))
 
 	shap_cashew_password2 = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'password2')$sumTime)
 	print(shap_cashew_password2)
 	if(shap_cashew_password2$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_password2$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_password2$p.value, sep = " "))
 	}
 }
 @
 \textbf{Total time for No cache}
 <<RH1_nocache_password2, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 sumTime_nocache_password2 = subset(json_data, treatment == 'nocache' & object == 'password2' & !is.na(sumTime))$sumTime
 print(paste("Sample size: ", length(sumTime_nocache_password2)))					
 summary(subset(json_data, treatment == 'nocache' & object == 'password2')$sumTime)
 
 if(length(sumTime_nocache_password2) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'nocache' & object == 'password2'), "sumTime", min(subset(json_data, treatment == 'nocache'& object == 'password2')$sumTime), max(subset(json_data, treatment == 'nocache' & object == 'password2')$sumTime))
 
 	shap_nocache_password2 = shapiro.test(subset(json_data, treatment == 'nocache' & object == 'password2')$sumTime)
 	print(shap_nocache_password2)
 	if(shap_nocache_password2$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_nocache_password2$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_nocache_password2$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_password2, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'nocache') & object == 'password2')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$sumTime, DF$treatmentDescription, mean)))])
 boxplot_RH1_password2 = ggplot(DF, aes(x =treatmentDescription , y = sumTime)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Total time by Transformations enabled for Password2") + 
 	ylab("Total time (s)")			   
 boxplot_RH1_password2
 if(length(sumTime_cashew_password2) == expectedRuns & length(sumTime_nocache_password2) == expectedRuns){
 	result_RH1_password2_tTest = FALSE
 	result_RH1_password2_wTest = FALSE
 	
 	if(shap_cashew_password2$p.value > alpha&shap_nocache_password2$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'password2')$sumTime, subset(json_data,treatment == 'nocache' & object == 'password2')$sumTime)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'password2')$sumTime, subset(json_data, treatment == 'nocache' & object == 'password2')$sumTime, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_password2_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(sumTime~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'nocache') & object == 'password2')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_password2_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_password2_wTest = TRUE
 		}
 	}				
 }
if(length(sumTime_cashew_password2) == expectedRuns & length(sumTime_nocache_password2) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Total time for Cashew: ", mean(subset(json_data, treatment == 'cashew' & object == 'password2')$sumTime)))
	 print(paste("Mean Total time for No cache: ", mean(subset(json_data, treatment == 'nocache' & object == 'password2')$sumTime)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'password2')$sumTime) - mean(subset(json_data, treatment == 'nocache' & object == 'password2')$sumTime))))
	 if (result_RH1_password2_tTest | result_RH1_password2_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'password2')$sumTime) > mean(subset(json_data, treatment == 'nocache' & object == 'password2')$sumTime)){
	   	result_RH1_password2 = "Cashew \\textgreater{} No cache"
	   	result_object_RH1_password2 = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_password2 = "Cashew \\textless{} No cache"
	   	result_object_RH1_password2 = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_password2 = 5
	 	result_RH1_password2 = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'password2')$sumTime) > mean(subset(json_data, treatment == 'nocache' & object == 'password2')$sumTime)){
	 	cat(paste("Total time for Cashew is ", 100 * (abs(mean(subset(json_data, treatment == 'nocache' & object == 'password2')$sumTime) - mean(subset(json_data, treatment == 'cashew' & object == 'password2')$sumTime)) / mean(subset(json_data, treatment == 'nocache' & object == 'password2')$sumTime)), "% greater than \n Total time for No cache"))				
	 }else{
	     cat(paste("Total time for No cache is ", 100 * (abs(mean(subset(json_data, treatment == 'nocache' & object == 'password2')$sumTime) - mean(subset(json_data, treatment == 'cashew' & object == 'password2')$sumTime)) / mean(subset(json_data, treatment == 'cashew' & object == 'password2')$sumTime)), "% greater than \nTotal time for Cashew"))			    
	 }	
} 
if (length(sumTime_cashew_password2) != expectedRuns & length(sumTime_nocache_password2) != expectedRuns){
 	result_object_RH1_password2 = 4
	result_RH1_password2 = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(sumTime_cashew_password2) == expectedRuns & length(sumTime_nocache_password2) != expectedRuns){
	result_object_RH1_password2 = 2
	result_RH1_password2 = "Cashew"
	result_RH1_cashew = result_RH1_cashew + 1			
}
if (length(sumTime_cashew_password2) != expectedRuns & length(sumTime_nocache_password2) == expectedRuns){
	result_object_RH1_password2 = 3
	result_RH1_password2 = "No cache"
	result_RH1_nocache = result_RH1_nocache + 1			
}
@  


\subsubsection{RH1.3: Object Obscure}

 \textbf{Total time for Cashew}
 <<RH1_cashew_obscure, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 sumTime_cashew_obscure = subset(json_data, treatment == 'cashew' & object == 'obscure' & !is.na(sumTime))$sumTime
 print(paste("Sample size: ", length(sumTime_cashew_obscure)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'obscure')$sumTime)
 
 if(length(sumTime_cashew_obscure) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'obscure'), "sumTime", min(subset(json_data, treatment == 'cashew'& object == 'obscure')$sumTime), max(subset(json_data, treatment == 'cashew' & object == 'obscure')$sumTime))
 
 	shap_cashew_obscure = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'obscure')$sumTime)
 	print(shap_cashew_obscure)
 	if(shap_cashew_obscure$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_obscure$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_obscure$p.value, sep = " "))
 	}
 }
 @
 \textbf{Total time for No cache}
 <<RH1_nocache_obscure, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 sumTime_nocache_obscure = subset(json_data, treatment == 'nocache' & object == 'obscure' & !is.na(sumTime))$sumTime
 print(paste("Sample size: ", length(sumTime_nocache_obscure)))					
 summary(subset(json_data, treatment == 'nocache' & object == 'obscure')$sumTime)
 
 if(length(sumTime_nocache_obscure) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'nocache' & object == 'obscure'), "sumTime", min(subset(json_data, treatment == 'nocache'& object == 'obscure')$sumTime), max(subset(json_data, treatment == 'nocache' & object == 'obscure')$sumTime))
 
 	shap_nocache_obscure = shapiro.test(subset(json_data, treatment == 'nocache' & object == 'obscure')$sumTime)
 	print(shap_nocache_obscure)
 	if(shap_nocache_obscure$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_nocache_obscure$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_nocache_obscure$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_obscure, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'nocache') & object == 'obscure')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$sumTime, DF$treatmentDescription, mean)))])
 boxplot_RH1_obscure = ggplot(DF, aes(x =treatmentDescription , y = sumTime)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Total time by Transformations enabled for Obscure") + 
 	ylab("Total time (s)")			   
 boxplot_RH1_obscure
 if(length(sumTime_cashew_obscure) == expectedRuns & length(sumTime_nocache_obscure) == expectedRuns){
 	result_RH1_obscure_tTest = FALSE
 	result_RH1_obscure_wTest = FALSE
 	
 	if(shap_cashew_obscure$p.value > alpha&shap_nocache_obscure$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'obscure')$sumTime, subset(json_data,treatment == 'nocache' & object == 'obscure')$sumTime)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'obscure')$sumTime, subset(json_data, treatment == 'nocache' & object == 'obscure')$sumTime, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_obscure_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(sumTime~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'nocache') & object == 'obscure')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_obscure_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_obscure_wTest = TRUE
 		}
 	}				
 }
if(length(sumTime_cashew_obscure) == expectedRuns & length(sumTime_nocache_obscure) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Total time for Cashew: ", mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$sumTime)))
	 print(paste("Mean Total time for No cache: ", mean(subset(json_data, treatment == 'nocache' & object == 'obscure')$sumTime)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$sumTime) - mean(subset(json_data, treatment == 'nocache' & object == 'obscure')$sumTime))))
	 if (result_RH1_obscure_tTest | result_RH1_obscure_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$sumTime) > mean(subset(json_data, treatment == 'nocache' & object == 'obscure')$sumTime)){
	   	result_RH1_obscure = "Cashew \\textgreater{} No cache"
	   	result_object_RH1_obscure = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_obscure = "Cashew \\textless{} No cache"
	   	result_object_RH1_obscure = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_obscure = 5
	 	result_RH1_obscure = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'obscure')$sumTime) > mean(subset(json_data, treatment == 'nocache' & object == 'obscure')$sumTime)){
	 	cat(paste("Total time for Cashew is ", 100 * (abs(mean(subset(json_data, treatment == 'nocache' & object == 'obscure')$sumTime) - mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$sumTime)) / mean(subset(json_data, treatment == 'nocache' & object == 'obscure')$sumTime)), "% greater than \n Total time for No cache"))				
	 }else{
	     cat(paste("Total time for No cache is ", 100 * (abs(mean(subset(json_data, treatment == 'nocache' & object == 'obscure')$sumTime) - mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$sumTime)) / mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$sumTime)), "% greater than \nTotal time for Cashew"))			    
	 }	
} 
if (length(sumTime_cashew_obscure) != expectedRuns & length(sumTime_nocache_obscure) != expectedRuns){
 	result_object_RH1_obscure = 4
	result_RH1_obscure = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(sumTime_cashew_obscure) == expectedRuns & length(sumTime_nocache_obscure) != expectedRuns){
	result_object_RH1_obscure = 2
	result_RH1_obscure = "Cashew"
	result_RH1_cashew = result_RH1_cashew + 1			
}
if (length(sumTime_cashew_obscure) != expectedRuns & length(sumTime_nocache_obscure) == expectedRuns){
	result_object_RH1_obscure = 3
	result_RH1_obscure = "No cache"
	result_RH1_nocache = result_RH1_nocache + 1			
}
@  


\subsubsection{RH1.4: Object CRIME}

 \textbf{Total time for Cashew}
 <<RH1_cashew_crime, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 sumTime_cashew_crime = subset(json_data, treatment == 'cashew' & object == 'crime' & !is.na(sumTime))$sumTime
 print(paste("Sample size: ", length(sumTime_cashew_crime)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'crime')$sumTime)
 
 if(length(sumTime_cashew_crime) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'crime'), "sumTime", min(subset(json_data, treatment == 'cashew'& object == 'crime')$sumTime), max(subset(json_data, treatment == 'cashew' & object == 'crime')$sumTime))
 
 	shap_cashew_crime = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'crime')$sumTime)
 	print(shap_cashew_crime)
 	if(shap_cashew_crime$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_crime$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_crime$p.value, sep = " "))
 	}
 }
 @
 \textbf{Total time for No cache}
 <<RH1_nocache_crime, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 sumTime_nocache_crime = subset(json_data, treatment == 'nocache' & object == 'crime' & !is.na(sumTime))$sumTime
 print(paste("Sample size: ", length(sumTime_nocache_crime)))					
 summary(subset(json_data, treatment == 'nocache' & object == 'crime')$sumTime)
 
 if(length(sumTime_nocache_crime) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'nocache' & object == 'crime'), "sumTime", min(subset(json_data, treatment == 'nocache'& object == 'crime')$sumTime), max(subset(json_data, treatment == 'nocache' & object == 'crime')$sumTime))
 
 	shap_nocache_crime = shapiro.test(subset(json_data, treatment == 'nocache' & object == 'crime')$sumTime)
 	print(shap_nocache_crime)
 	if(shap_nocache_crime$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_nocache_crime$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_nocache_crime$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_crime, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'nocache') & object == 'crime')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$sumTime, DF$treatmentDescription, mean)))])
 boxplot_RH1_crime = ggplot(DF, aes(x =treatmentDescription , y = sumTime)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Total time by Transformations enabled for CRIME") + 
 	ylab("Total time (s)")			   
 boxplot_RH1_crime
 if(length(sumTime_cashew_crime) == expectedRuns & length(sumTime_nocache_crime) == expectedRuns){
 	result_RH1_crime_tTest = FALSE
 	result_RH1_crime_wTest = FALSE
 	
 	if(shap_cashew_crime$p.value > alpha&shap_nocache_crime$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'crime')$sumTime, subset(json_data,treatment == 'nocache' & object == 'crime')$sumTime)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'crime')$sumTime, subset(json_data, treatment == 'nocache' & object == 'crime')$sumTime, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_crime_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(sumTime~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'nocache') & object == 'crime')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_crime_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_crime_wTest = TRUE
 		}
 	}				
 }
if(length(sumTime_cashew_crime) == expectedRuns & length(sumTime_nocache_crime) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Total time for Cashew: ", mean(subset(json_data, treatment == 'cashew' & object == 'crime')$sumTime)))
	 print(paste("Mean Total time for No cache: ", mean(subset(json_data, treatment == 'nocache' & object == 'crime')$sumTime)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'crime')$sumTime) - mean(subset(json_data, treatment == 'nocache' & object == 'crime')$sumTime))))
	 if (result_RH1_crime_tTest | result_RH1_crime_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'crime')$sumTime) > mean(subset(json_data, treatment == 'nocache' & object == 'crime')$sumTime)){
	   	result_RH1_crime = "Cashew \\textgreater{} No cache"
	   	result_object_RH1_crime = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_crime = "Cashew \\textless{} No cache"
	   	result_object_RH1_crime = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_crime = 5
	 	result_RH1_crime = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'crime')$sumTime) > mean(subset(json_data, treatment == 'nocache' & object == 'crime')$sumTime)){
	 	cat(paste("Total time for Cashew is ", 100 * (abs(mean(subset(json_data, treatment == 'nocache' & object == 'crime')$sumTime) - mean(subset(json_data, treatment == 'cashew' & object == 'crime')$sumTime)) / mean(subset(json_data, treatment == 'nocache' & object == 'crime')$sumTime)), "% greater than \n Total time for No cache"))				
	 }else{
	     cat(paste("Total time for No cache is ", 100 * (abs(mean(subset(json_data, treatment == 'nocache' & object == 'crime')$sumTime) - mean(subset(json_data, treatment == 'cashew' & object == 'crime')$sumTime)) / mean(subset(json_data, treatment == 'cashew' & object == 'crime')$sumTime)), "% greater than \nTotal time for Cashew"))			    
	 }	
} 
if (length(sumTime_cashew_crime) != expectedRuns & length(sumTime_nocache_crime) != expectedRuns){
 	result_object_RH1_crime = 4
	result_RH1_crime = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(sumTime_cashew_crime) == expectedRuns & length(sumTime_nocache_crime) != expectedRuns){
	result_object_RH1_crime = 2
	result_RH1_crime = "Cashew"
	result_RH1_cashew = result_RH1_cashew + 1			
}
if (length(sumTime_cashew_crime) != expectedRuns & length(sumTime_nocache_crime) == expectedRuns){
	result_object_RH1_crime = 3
	result_RH1_crime = "No cache"
	result_RH1_nocache = result_RH1_nocache + 1			
}
@  


 
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH1_result = list(hypothesis = "RH1", results = c(result_RH1_less / result_RH1_objects, result_RH1_greater / result_RH1_objects, result_RH1_cashew / result_RH1_objects, result_RH1_nocache / result_RH1_objects, result_RH1_none / result_RH1_objects, result_RH1_inconclusive / result_RH1_objects), objectResults = list( list(object = 'password', result = result_object_RH1_password),  list(object = 'password2', result = result_object_RH1_password2),  list(object = 'obscure', result = result_object_RH1_obscure),  list(object = 'crime', result = result_object_RH1_crime) ))	
	@
	
	\subsubsection{RH1 Results: Total time Cashew = No cache}
	
	
	\begin{table}[H]
	\centering
	\caption{RH1 Results per Object}
	\begin{tabular}{ll}
	\textbf{Password1} & \Sexpr{result_RH1_password} \\
	\textbf{Password2} & \Sexpr{result_RH1_password2} \\
	\textbf{Obscure} & \Sexpr{result_RH1_obscure} \\
	\textbf{CRIME} & \Sexpr{result_RH1_crime} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH1 Results Summary}
	\begin{tabular}{ll}
	\textbf{Cashew \textless{} No cache:}& \Sexpr{100 * result_RH1_less / result_RH1_objects}\% \\
	\textbf{Cashew \textgreater{} No cache:}& \Sexpr{100 * result_RH1_greater / result_RH1_objects}\%\\
	\textbf{Cashew:} & \Sexpr{100 * result_RH1_cashew / result_RH1_objects}\%\\
	\textbf{No cache:} & \Sexpr{100 * result_RH1_nocache / result_RH1_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH1_none / result_RH1_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH1_inconclusive / result_RH1_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	



\subsection{RH2: Total time for Cashew is equals than Total time for No Normalization}

 <<RH2, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 
 result_RH2_objects=4
 result_RH2_less=0
 result_RH2_greater=0
 result_RH2_cashew=0
 result_RH2_trivialcaching=0
 result_RH2_none=0
 result_RH2_inconclusive=0
 @
 
 <<overview_RH2, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 DF <- data_summary(subset(json_data, (object == 'password' |object == 'password2' |object == 'obscure' |object == 'crime' ) & (treatment == 'cashew' | treatment == 'trivialcaching')), varname = "sumTime", groupnames = c("treatmentDescription", "objectLabel", "objectOrder"))
 DF$objectLabel <- factor(DF$objectLabel, levels=c("Password1","Password2","Obscure","CRIME"))
 		
 		ggplot(DF, aes(x=objectLabel, y=sumTime, group=treatmentDescription, color=treatmentDescription)) + 
 		    geom_errorbar(aes(ymin=sumTime-sd, ymax=sumTime+sd), width=.1, linetype=3) +
 		    geom_line() + geom_point()+
 		   scale_color_brewer(palette="Paired") +
 		   theme_bw() +
 		  scale_x_discrete(name = "Constraints")+
 		  
 		  scale_y_continuous(name = "Total time (s)")+
 		  ggtitle("Total time Overview") + 
 		  theme(legend.title = element_blank())	
 @
 	

\subsubsection{RH2.1: Object Password1}

 \textbf{Total time for Cashew}
 <<RH2_cashew_password, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 sumTime_cashew_password = subset(json_data, treatment == 'cashew' & object == 'password' & !is.na(sumTime))$sumTime
 print(paste("Sample size: ", length(sumTime_cashew_password)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'password')$sumTime)
 
 if(length(sumTime_cashew_password) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'password'), "sumTime", min(subset(json_data, treatment == 'cashew'& object == 'password')$sumTime), max(subset(json_data, treatment == 'cashew' & object == 'password')$sumTime))
 
 	shap_cashew_password = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'password')$sumTime)
 	print(shap_cashew_password)
 	if(shap_cashew_password$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_password$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_password$p.value, sep = " "))
 	}
 }
 @
 \textbf{Total time for No Normalization}
 <<RH2_trivialcaching_password, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 sumTime_trivialcaching_password = subset(json_data, treatment == 'trivialcaching' & object == 'password' & !is.na(sumTime))$sumTime
 print(paste("Sample size: ", length(sumTime_trivialcaching_password)))					
 summary(subset(json_data, treatment == 'trivialcaching' & object == 'password')$sumTime)
 
 if(length(sumTime_trivialcaching_password) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'trivialcaching' & object == 'password'), "sumTime", min(subset(json_data, treatment == 'trivialcaching'& object == 'password')$sumTime), max(subset(json_data, treatment == 'trivialcaching' & object == 'password')$sumTime))
 
 	shap_trivialcaching_password = shapiro.test(subset(json_data, treatment == 'trivialcaching' & object == 'password')$sumTime)
 	print(shap_trivialcaching_password)
 	if(shap_trivialcaching_password$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_trivialcaching_password$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_trivialcaching_password$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_password, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'trivialcaching') & object == 'password')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$sumTime, DF$treatmentDescription, mean)))])
 boxplot_RH2_password = ggplot(DF, aes(x =treatmentDescription , y = sumTime)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Total time by Transformations enabled for Password1") + 
 	ylab("Total time (s)")			   
 boxplot_RH2_password
 if(length(sumTime_cashew_password) == expectedRuns & length(sumTime_trivialcaching_password) == expectedRuns){
 	result_RH2_password_tTest = FALSE
 	result_RH2_password_wTest = FALSE
 	
 	if(shap_cashew_password$p.value > alpha&shap_trivialcaching_password$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'password')$sumTime, subset(json_data,treatment == 'trivialcaching' & object == 'password')$sumTime)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'password')$sumTime, subset(json_data, treatment == 'trivialcaching' & object == 'password')$sumTime, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_password_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(sumTime~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'trivialcaching') & object == 'password')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_password_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_password_wTest = TRUE
 		}
 	}				
 }
if(length(sumTime_cashew_password) == expectedRuns & length(sumTime_trivialcaching_password) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Total time for Cashew: ", mean(subset(json_data, treatment == 'cashew' & object == 'password')$sumTime)))
	 print(paste("Mean Total time for No Normalization: ", mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$sumTime)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'password')$sumTime) - mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$sumTime))))
	 if (result_RH2_password_tTest | result_RH2_password_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'password')$sumTime) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$sumTime)){
	   	result_RH2_password = "Cashew \\textgreater{} No Normalization"
	   	result_object_RH2_password = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_password = "Cashew \\textless{} No Normalization"
	   	result_object_RH2_password = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_password = 5
	 	result_RH2_password = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'password')$sumTime) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$sumTime)){
	 	cat(paste("Total time for Cashew is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$sumTime) - mean(subset(json_data, treatment == 'cashew' & object == 'password')$sumTime)) / mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$sumTime)), "% greater than \n Total time for No Normalization"))				
	 }else{
	     cat(paste("Total time for No Normalization is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$sumTime) - mean(subset(json_data, treatment == 'cashew' & object == 'password')$sumTime)) / mean(subset(json_data, treatment == 'cashew' & object == 'password')$sumTime)), "% greater than \nTotal time for Cashew"))			    
	 }	
} 
if (length(sumTime_cashew_password) != expectedRuns & length(sumTime_trivialcaching_password) != expectedRuns){
 	result_object_RH2_password = 4
	result_RH2_password = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(sumTime_cashew_password) == expectedRuns & length(sumTime_trivialcaching_password) != expectedRuns){
	result_object_RH2_password = 2
	result_RH2_password = "Cashew"
	result_RH2_cashew = result_RH2_cashew + 1			
}
if (length(sumTime_cashew_password) != expectedRuns & length(sumTime_trivialcaching_password) == expectedRuns){
	result_object_RH2_password = 3
	result_RH2_password = "No Normalization"
	result_RH2_trivialcaching = result_RH2_trivialcaching + 1			
}
@  


\subsubsection{RH2.2: Object Password2}

 \textbf{Total time for Cashew}
 <<RH2_cashew_password2, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 sumTime_cashew_password2 = subset(json_data, treatment == 'cashew' & object == 'password2' & !is.na(sumTime))$sumTime
 print(paste("Sample size: ", length(sumTime_cashew_password2)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'password2')$sumTime)
 
 if(length(sumTime_cashew_password2) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'password2'), "sumTime", min(subset(json_data, treatment == 'cashew'& object == 'password2')$sumTime), max(subset(json_data, treatment == 'cashew' & object == 'password2')$sumTime))
 
 	shap_cashew_password2 = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'password2')$sumTime)
 	print(shap_cashew_password2)
 	if(shap_cashew_password2$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_password2$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_password2$p.value, sep = " "))
 	}
 }
 @
 \textbf{Total time for No Normalization}
 <<RH2_trivialcaching_password2, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 sumTime_trivialcaching_password2 = subset(json_data, treatment == 'trivialcaching' & object == 'password2' & !is.na(sumTime))$sumTime
 print(paste("Sample size: ", length(sumTime_trivialcaching_password2)))					
 summary(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$sumTime)
 
 if(length(sumTime_trivialcaching_password2) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'trivialcaching' & object == 'password2'), "sumTime", min(subset(json_data, treatment == 'trivialcaching'& object == 'password2')$sumTime), max(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$sumTime))
 
 	shap_trivialcaching_password2 = shapiro.test(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$sumTime)
 	print(shap_trivialcaching_password2)
 	if(shap_trivialcaching_password2$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_trivialcaching_password2$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_trivialcaching_password2$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_password2, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'trivialcaching') & object == 'password2')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$sumTime, DF$treatmentDescription, mean)))])
 boxplot_RH2_password2 = ggplot(DF, aes(x =treatmentDescription , y = sumTime)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Total time by Transformations enabled for Password2") + 
 	ylab("Total time (s)")			   
 boxplot_RH2_password2
 if(length(sumTime_cashew_password2) == expectedRuns & length(sumTime_trivialcaching_password2) == expectedRuns){
 	result_RH2_password2_tTest = FALSE
 	result_RH2_password2_wTest = FALSE
 	
 	if(shap_cashew_password2$p.value > alpha&shap_trivialcaching_password2$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'password2')$sumTime, subset(json_data,treatment == 'trivialcaching' & object == 'password2')$sumTime)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'password2')$sumTime, subset(json_data, treatment == 'trivialcaching' & object == 'password2')$sumTime, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_password2_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(sumTime~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'trivialcaching') & object == 'password2')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_password2_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_password2_wTest = TRUE
 		}
 	}				
 }
if(length(sumTime_cashew_password2) == expectedRuns & length(sumTime_trivialcaching_password2) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Total time for Cashew: ", mean(subset(json_data, treatment == 'cashew' & object == 'password2')$sumTime)))
	 print(paste("Mean Total time for No Normalization: ", mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$sumTime)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'password2')$sumTime) - mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$sumTime))))
	 if (result_RH2_password2_tTest | result_RH2_password2_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'password2')$sumTime) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$sumTime)){
	   	result_RH2_password2 = "Cashew \\textgreater{} No Normalization"
	   	result_object_RH2_password2 = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_password2 = "Cashew \\textless{} No Normalization"
	   	result_object_RH2_password2 = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_password2 = 5
	 	result_RH2_password2 = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'password2')$sumTime) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$sumTime)){
	 	cat(paste("Total time for Cashew is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$sumTime) - mean(subset(json_data, treatment == 'cashew' & object == 'password2')$sumTime)) / mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$sumTime)), "% greater than \n Total time for No Normalization"))				
	 }else{
	     cat(paste("Total time for No Normalization is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$sumTime) - mean(subset(json_data, treatment == 'cashew' & object == 'password2')$sumTime)) / mean(subset(json_data, treatment == 'cashew' & object == 'password2')$sumTime)), "% greater than \nTotal time for Cashew"))			    
	 }	
} 
if (length(sumTime_cashew_password2) != expectedRuns & length(sumTime_trivialcaching_password2) != expectedRuns){
 	result_object_RH2_password2 = 4
	result_RH2_password2 = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(sumTime_cashew_password2) == expectedRuns & length(sumTime_trivialcaching_password2) != expectedRuns){
	result_object_RH2_password2 = 2
	result_RH2_password2 = "Cashew"
	result_RH2_cashew = result_RH2_cashew + 1			
}
if (length(sumTime_cashew_password2) != expectedRuns & length(sumTime_trivialcaching_password2) == expectedRuns){
	result_object_RH2_password2 = 3
	result_RH2_password2 = "No Normalization"
	result_RH2_trivialcaching = result_RH2_trivialcaching + 1			
}
@  


\subsubsection{RH2.3: Object Obscure}

 \textbf{Total time for Cashew}
 <<RH2_cashew_obscure, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 sumTime_cashew_obscure = subset(json_data, treatment == 'cashew' & object == 'obscure' & !is.na(sumTime))$sumTime
 print(paste("Sample size: ", length(sumTime_cashew_obscure)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'obscure')$sumTime)
 
 if(length(sumTime_cashew_obscure) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'obscure'), "sumTime", min(subset(json_data, treatment == 'cashew'& object == 'obscure')$sumTime), max(subset(json_data, treatment == 'cashew' & object == 'obscure')$sumTime))
 
 	shap_cashew_obscure = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'obscure')$sumTime)
 	print(shap_cashew_obscure)
 	if(shap_cashew_obscure$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_obscure$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_obscure$p.value, sep = " "))
 	}
 }
 @
 \textbf{Total time for No Normalization}
 <<RH2_trivialcaching_obscure, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 sumTime_trivialcaching_obscure = subset(json_data, treatment == 'trivialcaching' & object == 'obscure' & !is.na(sumTime))$sumTime
 print(paste("Sample size: ", length(sumTime_trivialcaching_obscure)))					
 summary(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$sumTime)
 
 if(length(sumTime_trivialcaching_obscure) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'trivialcaching' & object == 'obscure'), "sumTime", min(subset(json_data, treatment == 'trivialcaching'& object == 'obscure')$sumTime), max(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$sumTime))
 
 	shap_trivialcaching_obscure = shapiro.test(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$sumTime)
 	print(shap_trivialcaching_obscure)
 	if(shap_trivialcaching_obscure$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_trivialcaching_obscure$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_trivialcaching_obscure$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_obscure, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'trivialcaching') & object == 'obscure')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$sumTime, DF$treatmentDescription, mean)))])
 boxplot_RH2_obscure = ggplot(DF, aes(x =treatmentDescription , y = sumTime)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Total time by Transformations enabled for Obscure") + 
 	ylab("Total time (s)")			   
 boxplot_RH2_obscure
 if(length(sumTime_cashew_obscure) == expectedRuns & length(sumTime_trivialcaching_obscure) == expectedRuns){
 	result_RH2_obscure_tTest = FALSE
 	result_RH2_obscure_wTest = FALSE
 	
 	if(shap_cashew_obscure$p.value > alpha&shap_trivialcaching_obscure$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'obscure')$sumTime, subset(json_data,treatment == 'trivialcaching' & object == 'obscure')$sumTime)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'obscure')$sumTime, subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$sumTime, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_obscure_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(sumTime~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'trivialcaching') & object == 'obscure')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_obscure_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_obscure_wTest = TRUE
 		}
 	}				
 }
if(length(sumTime_cashew_obscure) == expectedRuns & length(sumTime_trivialcaching_obscure) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Total time for Cashew: ", mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$sumTime)))
	 print(paste("Mean Total time for No Normalization: ", mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$sumTime)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$sumTime) - mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$sumTime))))
	 if (result_RH2_obscure_tTest | result_RH2_obscure_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$sumTime) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$sumTime)){
	   	result_RH2_obscure = "Cashew \\textgreater{} No Normalization"
	   	result_object_RH2_obscure = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_obscure = "Cashew \\textless{} No Normalization"
	   	result_object_RH2_obscure = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_obscure = 5
	 	result_RH2_obscure = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'obscure')$sumTime) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$sumTime)){
	 	cat(paste("Total time for Cashew is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$sumTime) - mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$sumTime)) / mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$sumTime)), "% greater than \n Total time for No Normalization"))				
	 }else{
	     cat(paste("Total time for No Normalization is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$sumTime) - mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$sumTime)) / mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$sumTime)), "% greater than \nTotal time for Cashew"))			    
	 }	
} 
if (length(sumTime_cashew_obscure) != expectedRuns & length(sumTime_trivialcaching_obscure) != expectedRuns){
 	result_object_RH2_obscure = 4
	result_RH2_obscure = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(sumTime_cashew_obscure) == expectedRuns & length(sumTime_trivialcaching_obscure) != expectedRuns){
	result_object_RH2_obscure = 2
	result_RH2_obscure = "Cashew"
	result_RH2_cashew = result_RH2_cashew + 1			
}
if (length(sumTime_cashew_obscure) != expectedRuns & length(sumTime_trivialcaching_obscure) == expectedRuns){
	result_object_RH2_obscure = 3
	result_RH2_obscure = "No Normalization"
	result_RH2_trivialcaching = result_RH2_trivialcaching + 1			
}
@  


\subsubsection{RH2.4: Object CRIME}

 \textbf{Total time for Cashew}
 <<RH2_cashew_crime, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 sumTime_cashew_crime = subset(json_data, treatment == 'cashew' & object == 'crime' & !is.na(sumTime))$sumTime
 print(paste("Sample size: ", length(sumTime_cashew_crime)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'crime')$sumTime)
 
 if(length(sumTime_cashew_crime) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'crime'), "sumTime", min(subset(json_data, treatment == 'cashew'& object == 'crime')$sumTime), max(subset(json_data, treatment == 'cashew' & object == 'crime')$sumTime))
 
 	shap_cashew_crime = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'crime')$sumTime)
 	print(shap_cashew_crime)
 	if(shap_cashew_crime$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_crime$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_crime$p.value, sep = " "))
 	}
 }
 @
 \textbf{Total time for No Normalization}
 <<RH2_trivialcaching_crime, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 sumTime_trivialcaching_crime = subset(json_data, treatment == 'trivialcaching' & object == 'crime' & !is.na(sumTime))$sumTime
 print(paste("Sample size: ", length(sumTime_trivialcaching_crime)))					
 summary(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$sumTime)
 
 if(length(sumTime_trivialcaching_crime) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'trivialcaching' & object == 'crime'), "sumTime", min(subset(json_data, treatment == 'trivialcaching'& object == 'crime')$sumTime), max(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$sumTime))
 
 	shap_trivialcaching_crime = shapiro.test(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$sumTime)
 	print(shap_trivialcaching_crime)
 	if(shap_trivialcaching_crime$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_trivialcaching_crime$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_trivialcaching_crime$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_crime, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'trivialcaching') & object == 'crime')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$sumTime, DF$treatmentDescription, mean)))])
 boxplot_RH2_crime = ggplot(DF, aes(x =treatmentDescription , y = sumTime)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Total time by Transformations enabled for CRIME") + 
 	ylab("Total time (s)")			   
 boxplot_RH2_crime
 if(length(sumTime_cashew_crime) == expectedRuns & length(sumTime_trivialcaching_crime) == expectedRuns){
 	result_RH2_crime_tTest = FALSE
 	result_RH2_crime_wTest = FALSE
 	
 	if(shap_cashew_crime$p.value > alpha&shap_trivialcaching_crime$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'crime')$sumTime, subset(json_data,treatment == 'trivialcaching' & object == 'crime')$sumTime)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'crime')$sumTime, subset(json_data, treatment == 'trivialcaching' & object == 'crime')$sumTime, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_crime_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(sumTime~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'trivialcaching') & object == 'crime')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_crime_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_crime_wTest = TRUE
 		}
 	}				
 }
if(length(sumTime_cashew_crime) == expectedRuns & length(sumTime_trivialcaching_crime) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Total time for Cashew: ", mean(subset(json_data, treatment == 'cashew' & object == 'crime')$sumTime)))
	 print(paste("Mean Total time for No Normalization: ", mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$sumTime)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'crime')$sumTime) - mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$sumTime))))
	 if (result_RH2_crime_tTest | result_RH2_crime_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'crime')$sumTime) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$sumTime)){
	   	result_RH2_crime = "Cashew \\textgreater{} No Normalization"
	   	result_object_RH2_crime = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_crime = "Cashew \\textless{} No Normalization"
	   	result_object_RH2_crime = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_crime = 5
	 	result_RH2_crime = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'crime')$sumTime) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$sumTime)){
	 	cat(paste("Total time for Cashew is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$sumTime) - mean(subset(json_data, treatment == 'cashew' & object == 'crime')$sumTime)) / mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$sumTime)), "% greater than \n Total time for No Normalization"))				
	 }else{
	     cat(paste("Total time for No Normalization is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$sumTime) - mean(subset(json_data, treatment == 'cashew' & object == 'crime')$sumTime)) / mean(subset(json_data, treatment == 'cashew' & object == 'crime')$sumTime)), "% greater than \nTotal time for Cashew"))			    
	 }	
} 
if (length(sumTime_cashew_crime) != expectedRuns & length(sumTime_trivialcaching_crime) != expectedRuns){
 	result_object_RH2_crime = 4
	result_RH2_crime = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(sumTime_cashew_crime) == expectedRuns & length(sumTime_trivialcaching_crime) != expectedRuns){
	result_object_RH2_crime = 2
	result_RH2_crime = "Cashew"
	result_RH2_cashew = result_RH2_cashew + 1			
}
if (length(sumTime_cashew_crime) != expectedRuns & length(sumTime_trivialcaching_crime) == expectedRuns){
	result_object_RH2_crime = 3
	result_RH2_crime = "No Normalization"
	result_RH2_trivialcaching = result_RH2_trivialcaching + 1			
}
@  


 
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH2_result = list(hypothesis = "RH2", results = c(result_RH2_less / result_RH2_objects, result_RH2_greater / result_RH2_objects, result_RH2_cashew / result_RH2_objects, result_RH2_trivialcaching / result_RH2_objects, result_RH2_none / result_RH2_objects, result_RH2_inconclusive / result_RH2_objects), objectResults = list( list(object = 'password', result = result_object_RH2_password),  list(object = 'password2', result = result_object_RH2_password2),  list(object = 'obscure', result = result_object_RH2_obscure),  list(object = 'crime', result = result_object_RH2_crime) ))	
	@
	
	\subsubsection{RH2 Results: Total time Cashew = No Normalization}
	
	
	\begin{table}[H]
	\centering
	\caption{RH2 Results per Object}
	\begin{tabular}{ll}
	\textbf{Password1} & \Sexpr{result_RH2_password} \\
	\textbf{Password2} & \Sexpr{result_RH2_password2} \\
	\textbf{Obscure} & \Sexpr{result_RH2_obscure} \\
	\textbf{CRIME} & \Sexpr{result_RH2_crime} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH2 Results Summary}
	\begin{tabular}{ll}
	\textbf{Cashew \textless{} No Normalization:}& \Sexpr{100 * result_RH2_less / result_RH2_objects}\% \\
	\textbf{Cashew \textgreater{} No Normalization:}& \Sexpr{100 * result_RH2_greater / result_RH2_objects}\%\\
	\textbf{Cashew:} & \Sexpr{100 * result_RH2_cashew / result_RH2_objects}\%\\
	\textbf{No Normalization:} & \Sexpr{100 * result_RH2_trivialcaching / result_RH2_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH2_none / result_RH2_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH2_inconclusive / result_RH2_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	



\subsection{RH3: Number of hits for Cashew is equals than Number of hits for No Normalization}

 <<RH3, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 
 result_RH3_objects=4
 result_RH3_less=0
 result_RH3_greater=0
 result_RH3_cashew=0
 result_RH3_trivialcaching=0
 result_RH3_none=0
 result_RH3_inconclusive=0
 @
 
 <<overview_RH3, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 DF <- data_summary(subset(json_data, (object == 'password' |object == 'password2' |object == 'obscure' |object == 'crime' ) & (treatment == 'cashew' | treatment == 'trivialcaching')), varname = "hits", groupnames = c("treatmentDescription", "objectLabel", "objectOrder"))
 DF$objectLabel <- factor(DF$objectLabel, levels=c("Password1","Password2","Obscure","CRIME"))
 		
 		ggplot(DF, aes(x=objectLabel, y=hits, group=treatmentDescription, color=treatmentDescription)) + 
 		    geom_errorbar(aes(ymin=hits-sd, ymax=hits+sd), width=.1, linetype=3) +
 		    geom_line() + geom_point()+
 		   scale_color_brewer(palette="Paired") +
 		   theme_bw() +
 		  scale_x_discrete(name = "Constraints")+
 		  
 		  scale_y_continuous(name = "Hits ")+
 		  ggtitle("Hits Overview") + 
 		  theme(legend.title = element_blank())	
 @
 	

\subsubsection{RH3.1: Object Password1}

 \textbf{Hits for Cashew}
 <<RH3_cashew_password, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 hits_cashew_password = subset(json_data, treatment == 'cashew' & object == 'password' & !is.na(hits))$hits
 print(paste("Sample size: ", length(hits_cashew_password)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'password')$hits)
 
 if(length(hits_cashew_password) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'password'), "hits", min(subset(json_data, treatment == 'cashew'& object == 'password')$hits), max(subset(json_data, treatment == 'cashew' & object == 'password')$hits))
 
 	shap_cashew_password = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'password')$hits)
 	print(shap_cashew_password)
 	if(shap_cashew_password$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_password$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_password$p.value, sep = " "))
 	}
 }
 @
 \textbf{Hits for No Normalization}
 <<RH3_trivialcaching_password, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 hits_trivialcaching_password = subset(json_data, treatment == 'trivialcaching' & object == 'password' & !is.na(hits))$hits
 print(paste("Sample size: ", length(hits_trivialcaching_password)))					
 summary(subset(json_data, treatment == 'trivialcaching' & object == 'password')$hits)
 
 if(length(hits_trivialcaching_password) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'trivialcaching' & object == 'password'), "hits", min(subset(json_data, treatment == 'trivialcaching'& object == 'password')$hits), max(subset(json_data, treatment == 'trivialcaching' & object == 'password')$hits))
 
 	shap_trivialcaching_password = shapiro.test(subset(json_data, treatment == 'trivialcaching' & object == 'password')$hits)
 	print(shap_trivialcaching_password)
 	if(shap_trivialcaching_password$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_trivialcaching_password$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_trivialcaching_password$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_password, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'trivialcaching') & object == 'password')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$hits, DF$treatmentDescription, mean)))])
 boxplot_RH3_password = ggplot(DF, aes(x =treatmentDescription , y = hits)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Hits by Transformations enabled for Password1") + 
 	ylab("Hits ")			   
 boxplot_RH3_password
 if(length(hits_cashew_password) == expectedRuns & length(hits_trivialcaching_password) == expectedRuns){
 	result_RH3_password_tTest = FALSE
 	result_RH3_password_wTest = FALSE
 	
 	if(shap_cashew_password$p.value > alpha&shap_trivialcaching_password$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'password')$hits, subset(json_data,treatment == 'trivialcaching' & object == 'password')$hits)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'password')$hits, subset(json_data, treatment == 'trivialcaching' & object == 'password')$hits, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_password_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(hits~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'trivialcaching') & object == 'password')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_password_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_password_wTest = TRUE
 		}
 	}				
 }
if(length(hits_cashew_password) == expectedRuns & length(hits_trivialcaching_password) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Hits for Cashew: ", mean(subset(json_data, treatment == 'cashew' & object == 'password')$hits)))
	 print(paste("Mean Hits for No Normalization: ", mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$hits)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'password')$hits) - mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$hits))))
	 if (result_RH3_password_tTest | result_RH3_password_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'password')$hits) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$hits)){
	   	result_RH3_password = "Cashew \\textgreater{} No Normalization"
	   	result_object_RH3_password = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_password = "Cashew \\textless{} No Normalization"
	   	result_object_RH3_password = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_password = 5
	 	result_RH3_password = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'password')$hits) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$hits)){
	 	cat(paste("Hits for Cashew is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$hits) - mean(subset(json_data, treatment == 'cashew' & object == 'password')$hits)) / mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$hits)), "% greater than \n Hits for No Normalization"))				
	 }else{
	     cat(paste("Hits for No Normalization is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$hits) - mean(subset(json_data, treatment == 'cashew' & object == 'password')$hits)) / mean(subset(json_data, treatment == 'cashew' & object == 'password')$hits)), "% greater than \nHits for Cashew"))			    
	 }	
} 
if (length(hits_cashew_password) != expectedRuns & length(hits_trivialcaching_password) != expectedRuns){
 	result_object_RH3_password = 4
	result_RH3_password = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(hits_cashew_password) == expectedRuns & length(hits_trivialcaching_password) != expectedRuns){
	result_object_RH3_password = 2
	result_RH3_password = "Cashew"
	result_RH3_cashew = result_RH3_cashew + 1			
}
if (length(hits_cashew_password) != expectedRuns & length(hits_trivialcaching_password) == expectedRuns){
	result_object_RH3_password = 3
	result_RH3_password = "No Normalization"
	result_RH3_trivialcaching = result_RH3_trivialcaching + 1			
}
@  


\subsubsection{RH3.2: Object Password2}

 \textbf{Hits for Cashew}
 <<RH3_cashew_password2, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 hits_cashew_password2 = subset(json_data, treatment == 'cashew' & object == 'password2' & !is.na(hits))$hits
 print(paste("Sample size: ", length(hits_cashew_password2)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'password2')$hits)
 
 if(length(hits_cashew_password2) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'password2'), "hits", min(subset(json_data, treatment == 'cashew'& object == 'password2')$hits), max(subset(json_data, treatment == 'cashew' & object == 'password2')$hits))
 
 	shap_cashew_password2 = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'password2')$hits)
 	print(shap_cashew_password2)
 	if(shap_cashew_password2$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_password2$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_password2$p.value, sep = " "))
 	}
 }
 @
 \textbf{Hits for No Normalization}
 <<RH3_trivialcaching_password2, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 hits_trivialcaching_password2 = subset(json_data, treatment == 'trivialcaching' & object == 'password2' & !is.na(hits))$hits
 print(paste("Sample size: ", length(hits_trivialcaching_password2)))					
 summary(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$hits)
 
 if(length(hits_trivialcaching_password2) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'trivialcaching' & object == 'password2'), "hits", min(subset(json_data, treatment == 'trivialcaching'& object == 'password2')$hits), max(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$hits))
 
 	shap_trivialcaching_password2 = shapiro.test(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$hits)
 	print(shap_trivialcaching_password2)
 	if(shap_trivialcaching_password2$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_trivialcaching_password2$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_trivialcaching_password2$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_password2, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'trivialcaching') & object == 'password2')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$hits, DF$treatmentDescription, mean)))])
 boxplot_RH3_password2 = ggplot(DF, aes(x =treatmentDescription , y = hits)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Hits by Transformations enabled for Password2") + 
 	ylab("Hits ")			   
 boxplot_RH3_password2
 if(length(hits_cashew_password2) == expectedRuns & length(hits_trivialcaching_password2) == expectedRuns){
 	result_RH3_password2_tTest = FALSE
 	result_RH3_password2_wTest = FALSE
 	
 	if(shap_cashew_password2$p.value > alpha&shap_trivialcaching_password2$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'password2')$hits, subset(json_data,treatment == 'trivialcaching' & object == 'password2')$hits)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'password2')$hits, subset(json_data, treatment == 'trivialcaching' & object == 'password2')$hits, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_password2_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(hits~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'trivialcaching') & object == 'password2')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_password2_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_password2_wTest = TRUE
 		}
 	}				
 }
if(length(hits_cashew_password2) == expectedRuns & length(hits_trivialcaching_password2) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Hits for Cashew: ", mean(subset(json_data, treatment == 'cashew' & object == 'password2')$hits)))
	 print(paste("Mean Hits for No Normalization: ", mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$hits)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'password2')$hits) - mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$hits))))
	 if (result_RH3_password2_tTest | result_RH3_password2_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'password2')$hits) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$hits)){
	   	result_RH3_password2 = "Cashew \\textgreater{} No Normalization"
	   	result_object_RH3_password2 = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_password2 = "Cashew \\textless{} No Normalization"
	   	result_object_RH3_password2 = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_password2 = 5
	 	result_RH3_password2 = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'password2')$hits) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$hits)){
	 	cat(paste("Hits for Cashew is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$hits) - mean(subset(json_data, treatment == 'cashew' & object == 'password2')$hits)) / mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$hits)), "% greater than \n Hits for No Normalization"))				
	 }else{
	     cat(paste("Hits for No Normalization is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$hits) - mean(subset(json_data, treatment == 'cashew' & object == 'password2')$hits)) / mean(subset(json_data, treatment == 'cashew' & object == 'password2')$hits)), "% greater than \nHits for Cashew"))			    
	 }	
} 
if (length(hits_cashew_password2) != expectedRuns & length(hits_trivialcaching_password2) != expectedRuns){
 	result_object_RH3_password2 = 4
	result_RH3_password2 = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(hits_cashew_password2) == expectedRuns & length(hits_trivialcaching_password2) != expectedRuns){
	result_object_RH3_password2 = 2
	result_RH3_password2 = "Cashew"
	result_RH3_cashew = result_RH3_cashew + 1			
}
if (length(hits_cashew_password2) != expectedRuns & length(hits_trivialcaching_password2) == expectedRuns){
	result_object_RH3_password2 = 3
	result_RH3_password2 = "No Normalization"
	result_RH3_trivialcaching = result_RH3_trivialcaching + 1			
}
@  


\subsubsection{RH3.3: Object Obscure}

 \textbf{Hits for Cashew}
 <<RH3_cashew_obscure, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 hits_cashew_obscure = subset(json_data, treatment == 'cashew' & object == 'obscure' & !is.na(hits))$hits
 print(paste("Sample size: ", length(hits_cashew_obscure)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'obscure')$hits)
 
 if(length(hits_cashew_obscure) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'obscure'), "hits", min(subset(json_data, treatment == 'cashew'& object == 'obscure')$hits), max(subset(json_data, treatment == 'cashew' & object == 'obscure')$hits))
 
 	shap_cashew_obscure = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'obscure')$hits)
 	print(shap_cashew_obscure)
 	if(shap_cashew_obscure$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_obscure$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_obscure$p.value, sep = " "))
 	}
 }
 @
 \textbf{Hits for No Normalization}
 <<RH3_trivialcaching_obscure, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 hits_trivialcaching_obscure = subset(json_data, treatment == 'trivialcaching' & object == 'obscure' & !is.na(hits))$hits
 print(paste("Sample size: ", length(hits_trivialcaching_obscure)))					
 summary(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$hits)
 
 if(length(hits_trivialcaching_obscure) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'trivialcaching' & object == 'obscure'), "hits", min(subset(json_data, treatment == 'trivialcaching'& object == 'obscure')$hits), max(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$hits))
 
 	shap_trivialcaching_obscure = shapiro.test(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$hits)
 	print(shap_trivialcaching_obscure)
 	if(shap_trivialcaching_obscure$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_trivialcaching_obscure$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_trivialcaching_obscure$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_obscure, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'trivialcaching') & object == 'obscure')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$hits, DF$treatmentDescription, mean)))])
 boxplot_RH3_obscure = ggplot(DF, aes(x =treatmentDescription , y = hits)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Hits by Transformations enabled for Obscure") + 
 	ylab("Hits ")			   
 boxplot_RH3_obscure
 if(length(hits_cashew_obscure) == expectedRuns & length(hits_trivialcaching_obscure) == expectedRuns){
 	result_RH3_obscure_tTest = FALSE
 	result_RH3_obscure_wTest = FALSE
 	
 	if(shap_cashew_obscure$p.value > alpha&shap_trivialcaching_obscure$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'obscure')$hits, subset(json_data,treatment == 'trivialcaching' & object == 'obscure')$hits)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'obscure')$hits, subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$hits, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_obscure_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(hits~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'trivialcaching') & object == 'obscure')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_obscure_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_obscure_wTest = TRUE
 		}
 	}				
 }
if(length(hits_cashew_obscure) == expectedRuns & length(hits_trivialcaching_obscure) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Hits for Cashew: ", mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$hits)))
	 print(paste("Mean Hits for No Normalization: ", mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$hits)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$hits) - mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$hits))))
	 if (result_RH3_obscure_tTest | result_RH3_obscure_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$hits) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$hits)){
	   	result_RH3_obscure = "Cashew \\textgreater{} No Normalization"
	   	result_object_RH3_obscure = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_obscure = "Cashew \\textless{} No Normalization"
	   	result_object_RH3_obscure = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_obscure = 5
	 	result_RH3_obscure = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'obscure')$hits) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$hits)){
	 	cat(paste("Hits for Cashew is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$hits) - mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$hits)) / mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$hits)), "% greater than \n Hits for No Normalization"))				
	 }else{
	     cat(paste("Hits for No Normalization is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$hits) - mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$hits)) / mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$hits)), "% greater than \nHits for Cashew"))			    
	 }	
} 
if (length(hits_cashew_obscure) != expectedRuns & length(hits_trivialcaching_obscure) != expectedRuns){
 	result_object_RH3_obscure = 4
	result_RH3_obscure = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(hits_cashew_obscure) == expectedRuns & length(hits_trivialcaching_obscure) != expectedRuns){
	result_object_RH3_obscure = 2
	result_RH3_obscure = "Cashew"
	result_RH3_cashew = result_RH3_cashew + 1			
}
if (length(hits_cashew_obscure) != expectedRuns & length(hits_trivialcaching_obscure) == expectedRuns){
	result_object_RH3_obscure = 3
	result_RH3_obscure = "No Normalization"
	result_RH3_trivialcaching = result_RH3_trivialcaching + 1			
}
@  


\subsubsection{RH3.4: Object CRIME}

 \textbf{Hits for Cashew}
 <<RH3_cashew_crime, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 hits_cashew_crime = subset(json_data, treatment == 'cashew' & object == 'crime' & !is.na(hits))$hits
 print(paste("Sample size: ", length(hits_cashew_crime)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'crime')$hits)
 
 if(length(hits_cashew_crime) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'crime'), "hits", min(subset(json_data, treatment == 'cashew'& object == 'crime')$hits), max(subset(json_data, treatment == 'cashew' & object == 'crime')$hits))
 
 	shap_cashew_crime = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'crime')$hits)
 	print(shap_cashew_crime)
 	if(shap_cashew_crime$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_crime$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_crime$p.value, sep = " "))
 	}
 }
 @
 \textbf{Hits for No Normalization}
 <<RH3_trivialcaching_crime, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 hits_trivialcaching_crime = subset(json_data, treatment == 'trivialcaching' & object == 'crime' & !is.na(hits))$hits
 print(paste("Sample size: ", length(hits_trivialcaching_crime)))					
 summary(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$hits)
 
 if(length(hits_trivialcaching_crime) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'trivialcaching' & object == 'crime'), "hits", min(subset(json_data, treatment == 'trivialcaching'& object == 'crime')$hits), max(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$hits))
 
 	shap_trivialcaching_crime = shapiro.test(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$hits)
 	print(shap_trivialcaching_crime)
 	if(shap_trivialcaching_crime$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_trivialcaching_crime$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_trivialcaching_crime$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_crime, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'trivialcaching') & object == 'crime')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$hits, DF$treatmentDescription, mean)))])
 boxplot_RH3_crime = ggplot(DF, aes(x =treatmentDescription , y = hits)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Hits by Transformations enabled for CRIME") + 
 	ylab("Hits ")			   
 boxplot_RH3_crime
 if(length(hits_cashew_crime) == expectedRuns & length(hits_trivialcaching_crime) == expectedRuns){
 	result_RH3_crime_tTest = FALSE
 	result_RH3_crime_wTest = FALSE
 	
 	if(shap_cashew_crime$p.value > alpha&shap_trivialcaching_crime$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'crime')$hits, subset(json_data,treatment == 'trivialcaching' & object == 'crime')$hits)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'crime')$hits, subset(json_data, treatment == 'trivialcaching' & object == 'crime')$hits, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_crime_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(hits~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'trivialcaching') & object == 'crime')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_crime_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_crime_wTest = TRUE
 		}
 	}				
 }
if(length(hits_cashew_crime) == expectedRuns & length(hits_trivialcaching_crime) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Hits for Cashew: ", mean(subset(json_data, treatment == 'cashew' & object == 'crime')$hits)))
	 print(paste("Mean Hits for No Normalization: ", mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$hits)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'crime')$hits) - mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$hits))))
	 if (result_RH3_crime_tTest | result_RH3_crime_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'crime')$hits) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$hits)){
	   	result_RH3_crime = "Cashew \\textgreater{} No Normalization"
	   	result_object_RH3_crime = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_crime = "Cashew \\textless{} No Normalization"
	   	result_object_RH3_crime = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_crime = 5
	 	result_RH3_crime = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'crime')$hits) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$hits)){
	 	cat(paste("Hits for Cashew is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$hits) - mean(subset(json_data, treatment == 'cashew' & object == 'crime')$hits)) / mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$hits)), "% greater than \n Hits for No Normalization"))				
	 }else{
	     cat(paste("Hits for No Normalization is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$hits) - mean(subset(json_data, treatment == 'cashew' & object == 'crime')$hits)) / mean(subset(json_data, treatment == 'cashew' & object == 'crime')$hits)), "% greater than \nHits for Cashew"))			    
	 }	
} 
if (length(hits_cashew_crime) != expectedRuns & length(hits_trivialcaching_crime) != expectedRuns){
 	result_object_RH3_crime = 4
	result_RH3_crime = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(hits_cashew_crime) == expectedRuns & length(hits_trivialcaching_crime) != expectedRuns){
	result_object_RH3_crime = 2
	result_RH3_crime = "Cashew"
	result_RH3_cashew = result_RH3_cashew + 1			
}
if (length(hits_cashew_crime) != expectedRuns & length(hits_trivialcaching_crime) == expectedRuns){
	result_object_RH3_crime = 3
	result_RH3_crime = "No Normalization"
	result_RH3_trivialcaching = result_RH3_trivialcaching + 1			
}
@  


 
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH3_result = list(hypothesis = "RH3", results = c(result_RH3_less / result_RH3_objects, result_RH3_greater / result_RH3_objects, result_RH3_cashew / result_RH3_objects, result_RH3_trivialcaching / result_RH3_objects, result_RH3_none / result_RH3_objects, result_RH3_inconclusive / result_RH3_objects), objectResults = list( list(object = 'password', result = result_object_RH3_password),  list(object = 'password2', result = result_object_RH3_password2),  list(object = 'obscure', result = result_object_RH3_obscure),  list(object = 'crime', result = result_object_RH3_crime) ))	
	@
	
	\subsubsection{RH3 Results: Hits Cashew = No Normalization}
	
	
	\begin{table}[H]
	\centering
	\caption{RH3 Results per Object}
	\begin{tabular}{ll}
	\textbf{Password1} & \Sexpr{result_RH3_password} \\
	\textbf{Password2} & \Sexpr{result_RH3_password2} \\
	\textbf{Obscure} & \Sexpr{result_RH3_obscure} \\
	\textbf{CRIME} & \Sexpr{result_RH3_crime} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH3 Results Summary}
	\begin{tabular}{ll}
	\textbf{Cashew \textless{} No Normalization:}& \Sexpr{100 * result_RH3_less / result_RH3_objects}\% \\
	\textbf{Cashew \textgreater{} No Normalization:}& \Sexpr{100 * result_RH3_greater / result_RH3_objects}\%\\
	\textbf{Cashew:} & \Sexpr{100 * result_RH3_cashew / result_RH3_objects}\%\\
	\textbf{No Normalization:} & \Sexpr{100 * result_RH3_trivialcaching / result_RH3_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH3_none / result_RH3_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH3_inconclusive / result_RH3_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	



\subsection{RH4: Number of misses for Cashew is equals than Number of misses for No Normalization}

 <<RH4, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 
 result_RH4_objects=4
 result_RH4_less=0
 result_RH4_greater=0
 result_RH4_cashew=0
 result_RH4_trivialcaching=0
 result_RH4_none=0
 result_RH4_inconclusive=0
 @
 
 <<overview_RH4, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 DF <- data_summary(subset(json_data, (object == 'password' |object == 'password2' |object == 'obscure' |object == 'crime' ) & (treatment == 'cashew' | treatment == 'trivialcaching')), varname = "misses", groupnames = c("treatmentDescription", "objectLabel", "objectOrder"))
 DF$objectLabel <- factor(DF$objectLabel, levels=c("Password1","Password2","Obscure","CRIME"))
 		
 		ggplot(DF, aes(x=objectLabel, y=misses, group=treatmentDescription, color=treatmentDescription)) + 
 		    geom_errorbar(aes(ymin=misses-sd, ymax=misses+sd), width=.1, linetype=3) +
 		    geom_line() + geom_point()+
 		   scale_color_brewer(palette="Paired") +
 		   theme_bw() +
 		  scale_x_discrete(name = "Constraints")+
 		  
 		  scale_y_continuous(name = "Misses ")+
 		  ggtitle("Misses Overview") + 
 		  theme(legend.title = element_blank())	
 @
 	

\subsubsection{RH4.1: Object Password1}

 \textbf{Misses for Cashew}
 <<RH4_cashew_password, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 misses_cashew_password = subset(json_data, treatment == 'cashew' & object == 'password' & !is.na(misses))$misses
 print(paste("Sample size: ", length(misses_cashew_password)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'password')$misses)
 
 if(length(misses_cashew_password) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'password'), "misses", min(subset(json_data, treatment == 'cashew'& object == 'password')$misses), max(subset(json_data, treatment == 'cashew' & object == 'password')$misses))
 
 	shap_cashew_password = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'password')$misses)
 	print(shap_cashew_password)
 	if(shap_cashew_password$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_password$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_password$p.value, sep = " "))
 	}
 }
 @
 \textbf{Misses for No Normalization}
 <<RH4_trivialcaching_password, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 misses_trivialcaching_password = subset(json_data, treatment == 'trivialcaching' & object == 'password' & !is.na(misses))$misses
 print(paste("Sample size: ", length(misses_trivialcaching_password)))					
 summary(subset(json_data, treatment == 'trivialcaching' & object == 'password')$misses)
 
 if(length(misses_trivialcaching_password) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'trivialcaching' & object == 'password'), "misses", min(subset(json_data, treatment == 'trivialcaching'& object == 'password')$misses), max(subset(json_data, treatment == 'trivialcaching' & object == 'password')$misses))
 
 	shap_trivialcaching_password = shapiro.test(subset(json_data, treatment == 'trivialcaching' & object == 'password')$misses)
 	print(shap_trivialcaching_password)
 	if(shap_trivialcaching_password$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_trivialcaching_password$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_trivialcaching_password$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_password, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'trivialcaching') & object == 'password')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$misses, DF$treatmentDescription, mean)))])
 boxplot_RH4_password = ggplot(DF, aes(x =treatmentDescription , y = misses)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Misses by Transformations enabled for Password1") + 
 	ylab("Misses ")			   
 boxplot_RH4_password
 if(length(misses_cashew_password) == expectedRuns & length(misses_trivialcaching_password) == expectedRuns){
 	result_RH4_password_tTest = FALSE
 	result_RH4_password_wTest = FALSE
 	
 	if(shap_cashew_password$p.value > alpha&shap_trivialcaching_password$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'password')$misses, subset(json_data,treatment == 'trivialcaching' & object == 'password')$misses)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'password')$misses, subset(json_data, treatment == 'trivialcaching' & object == 'password')$misses, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_password_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(misses~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'trivialcaching') & object == 'password')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_password_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_password_wTest = TRUE
 		}
 	}				
 }
if(length(misses_cashew_password) == expectedRuns & length(misses_trivialcaching_password) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Misses for Cashew: ", mean(subset(json_data, treatment == 'cashew' & object == 'password')$misses)))
	 print(paste("Mean Misses for No Normalization: ", mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$misses)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'password')$misses) - mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$misses))))
	 if (result_RH4_password_tTest | result_RH4_password_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'password')$misses) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$misses)){
	   	result_RH4_password = "Cashew \\textgreater{} No Normalization"
	   	result_object_RH4_password = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_password = "Cashew \\textless{} No Normalization"
	   	result_object_RH4_password = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_password = 5
	 	result_RH4_password = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'password')$misses) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$misses)){
	 	cat(paste("Misses for Cashew is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$misses) - mean(subset(json_data, treatment == 'cashew' & object == 'password')$misses)) / mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$misses)), "% greater than \n Misses for No Normalization"))				
	 }else{
	     cat(paste("Misses for No Normalization is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$misses) - mean(subset(json_data, treatment == 'cashew' & object == 'password')$misses)) / mean(subset(json_data, treatment == 'cashew' & object == 'password')$misses)), "% greater than \nMisses for Cashew"))			    
	 }	
} 
if (length(misses_cashew_password) != expectedRuns & length(misses_trivialcaching_password) != expectedRuns){
 	result_object_RH4_password = 4
	result_RH4_password = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(misses_cashew_password) == expectedRuns & length(misses_trivialcaching_password) != expectedRuns){
	result_object_RH4_password = 2
	result_RH4_password = "Cashew"
	result_RH4_cashew = result_RH4_cashew + 1			
}
if (length(misses_cashew_password) != expectedRuns & length(misses_trivialcaching_password) == expectedRuns){
	result_object_RH4_password = 3
	result_RH4_password = "No Normalization"
	result_RH4_trivialcaching = result_RH4_trivialcaching + 1			
}
@  


\subsubsection{RH4.2: Object Password2}

 \textbf{Misses for Cashew}
 <<RH4_cashew_password2, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 misses_cashew_password2 = subset(json_data, treatment == 'cashew' & object == 'password2' & !is.na(misses))$misses
 print(paste("Sample size: ", length(misses_cashew_password2)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'password2')$misses)
 
 if(length(misses_cashew_password2) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'password2'), "misses", min(subset(json_data, treatment == 'cashew'& object == 'password2')$misses), max(subset(json_data, treatment == 'cashew' & object == 'password2')$misses))
 
 	shap_cashew_password2 = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'password2')$misses)
 	print(shap_cashew_password2)
 	if(shap_cashew_password2$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_password2$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_password2$p.value, sep = " "))
 	}
 }
 @
 \textbf{Misses for No Normalization}
 <<RH4_trivialcaching_password2, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 misses_trivialcaching_password2 = subset(json_data, treatment == 'trivialcaching' & object == 'password2' & !is.na(misses))$misses
 print(paste("Sample size: ", length(misses_trivialcaching_password2)))					
 summary(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$misses)
 
 if(length(misses_trivialcaching_password2) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'trivialcaching' & object == 'password2'), "misses", min(subset(json_data, treatment == 'trivialcaching'& object == 'password2')$misses), max(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$misses))
 
 	shap_trivialcaching_password2 = shapiro.test(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$misses)
 	print(shap_trivialcaching_password2)
 	if(shap_trivialcaching_password2$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_trivialcaching_password2$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_trivialcaching_password2$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_password2, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'trivialcaching') & object == 'password2')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$misses, DF$treatmentDescription, mean)))])
 boxplot_RH4_password2 = ggplot(DF, aes(x =treatmentDescription , y = misses)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Misses by Transformations enabled for Password2") + 
 	ylab("Misses ")			   
 boxplot_RH4_password2
 if(length(misses_cashew_password2) == expectedRuns & length(misses_trivialcaching_password2) == expectedRuns){
 	result_RH4_password2_tTest = FALSE
 	result_RH4_password2_wTest = FALSE
 	
 	if(shap_cashew_password2$p.value > alpha&shap_trivialcaching_password2$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'password2')$misses, subset(json_data,treatment == 'trivialcaching' & object == 'password2')$misses)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'password2')$misses, subset(json_data, treatment == 'trivialcaching' & object == 'password2')$misses, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_password2_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(misses~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'trivialcaching') & object == 'password2')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_password2_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_password2_wTest = TRUE
 		}
 	}				
 }
if(length(misses_cashew_password2) == expectedRuns & length(misses_trivialcaching_password2) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Misses for Cashew: ", mean(subset(json_data, treatment == 'cashew' & object == 'password2')$misses)))
	 print(paste("Mean Misses for No Normalization: ", mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$misses)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'password2')$misses) - mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$misses))))
	 if (result_RH4_password2_tTest | result_RH4_password2_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'password2')$misses) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$misses)){
	   	result_RH4_password2 = "Cashew \\textgreater{} No Normalization"
	   	result_object_RH4_password2 = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_password2 = "Cashew \\textless{} No Normalization"
	   	result_object_RH4_password2 = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_password2 = 5
	 	result_RH4_password2 = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'password2')$misses) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$misses)){
	 	cat(paste("Misses for Cashew is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$misses) - mean(subset(json_data, treatment == 'cashew' & object == 'password2')$misses)) / mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$misses)), "% greater than \n Misses for No Normalization"))				
	 }else{
	     cat(paste("Misses for No Normalization is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$misses) - mean(subset(json_data, treatment == 'cashew' & object == 'password2')$misses)) / mean(subset(json_data, treatment == 'cashew' & object == 'password2')$misses)), "% greater than \nMisses for Cashew"))			    
	 }	
} 
if (length(misses_cashew_password2) != expectedRuns & length(misses_trivialcaching_password2) != expectedRuns){
 	result_object_RH4_password2 = 4
	result_RH4_password2 = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(misses_cashew_password2) == expectedRuns & length(misses_trivialcaching_password2) != expectedRuns){
	result_object_RH4_password2 = 2
	result_RH4_password2 = "Cashew"
	result_RH4_cashew = result_RH4_cashew + 1			
}
if (length(misses_cashew_password2) != expectedRuns & length(misses_trivialcaching_password2) == expectedRuns){
	result_object_RH4_password2 = 3
	result_RH4_password2 = "No Normalization"
	result_RH4_trivialcaching = result_RH4_trivialcaching + 1			
}
@  


\subsubsection{RH4.3: Object Obscure}

 \textbf{Misses for Cashew}
 <<RH4_cashew_obscure, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 misses_cashew_obscure = subset(json_data, treatment == 'cashew' & object == 'obscure' & !is.na(misses))$misses
 print(paste("Sample size: ", length(misses_cashew_obscure)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'obscure')$misses)
 
 if(length(misses_cashew_obscure) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'obscure'), "misses", min(subset(json_data, treatment == 'cashew'& object == 'obscure')$misses), max(subset(json_data, treatment == 'cashew' & object == 'obscure')$misses))
 
 	shap_cashew_obscure = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'obscure')$misses)
 	print(shap_cashew_obscure)
 	if(shap_cashew_obscure$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_obscure$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_obscure$p.value, sep = " "))
 	}
 }
 @
 \textbf{Misses for No Normalization}
 <<RH4_trivialcaching_obscure, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 misses_trivialcaching_obscure = subset(json_data, treatment == 'trivialcaching' & object == 'obscure' & !is.na(misses))$misses
 print(paste("Sample size: ", length(misses_trivialcaching_obscure)))					
 summary(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$misses)
 
 if(length(misses_trivialcaching_obscure) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'trivialcaching' & object == 'obscure'), "misses", min(subset(json_data, treatment == 'trivialcaching'& object == 'obscure')$misses), max(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$misses))
 
 	shap_trivialcaching_obscure = shapiro.test(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$misses)
 	print(shap_trivialcaching_obscure)
 	if(shap_trivialcaching_obscure$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_trivialcaching_obscure$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_trivialcaching_obscure$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_obscure, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'trivialcaching') & object == 'obscure')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$misses, DF$treatmentDescription, mean)))])
 boxplot_RH4_obscure = ggplot(DF, aes(x =treatmentDescription , y = misses)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Misses by Transformations enabled for Obscure") + 
 	ylab("Misses ")			   
 boxplot_RH4_obscure
 if(length(misses_cashew_obscure) == expectedRuns & length(misses_trivialcaching_obscure) == expectedRuns){
 	result_RH4_obscure_tTest = FALSE
 	result_RH4_obscure_wTest = FALSE
 	
 	if(shap_cashew_obscure$p.value > alpha&shap_trivialcaching_obscure$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'obscure')$misses, subset(json_data,treatment == 'trivialcaching' & object == 'obscure')$misses)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'obscure')$misses, subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$misses, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_obscure_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(misses~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'trivialcaching') & object == 'obscure')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_obscure_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_obscure_wTest = TRUE
 		}
 	}				
 }
if(length(misses_cashew_obscure) == expectedRuns & length(misses_trivialcaching_obscure) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Misses for Cashew: ", mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$misses)))
	 print(paste("Mean Misses for No Normalization: ", mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$misses)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$misses) - mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$misses))))
	 if (result_RH4_obscure_tTest | result_RH4_obscure_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$misses) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$misses)){
	   	result_RH4_obscure = "Cashew \\textgreater{} No Normalization"
	   	result_object_RH4_obscure = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_obscure = "Cashew \\textless{} No Normalization"
	   	result_object_RH4_obscure = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_obscure = 5
	 	result_RH4_obscure = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'obscure')$misses) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$misses)){
	 	cat(paste("Misses for Cashew is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$misses) - mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$misses)) / mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$misses)), "% greater than \n Misses for No Normalization"))				
	 }else{
	     cat(paste("Misses for No Normalization is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$misses) - mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$misses)) / mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$misses)), "% greater than \nMisses for Cashew"))			    
	 }	
} 
if (length(misses_cashew_obscure) != expectedRuns & length(misses_trivialcaching_obscure) != expectedRuns){
 	result_object_RH4_obscure = 4
	result_RH4_obscure = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(misses_cashew_obscure) == expectedRuns & length(misses_trivialcaching_obscure) != expectedRuns){
	result_object_RH4_obscure = 2
	result_RH4_obscure = "Cashew"
	result_RH4_cashew = result_RH4_cashew + 1			
}
if (length(misses_cashew_obscure) != expectedRuns & length(misses_trivialcaching_obscure) == expectedRuns){
	result_object_RH4_obscure = 3
	result_RH4_obscure = "No Normalization"
	result_RH4_trivialcaching = result_RH4_trivialcaching + 1			
}
@  


\subsubsection{RH4.4: Object CRIME}

 \textbf{Misses for Cashew}
 <<RH4_cashew_crime, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 misses_cashew_crime = subset(json_data, treatment == 'cashew' & object == 'crime' & !is.na(misses))$misses
 print(paste("Sample size: ", length(misses_cashew_crime)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'crime')$misses)
 
 if(length(misses_cashew_crime) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'crime'), "misses", min(subset(json_data, treatment == 'cashew'& object == 'crime')$misses), max(subset(json_data, treatment == 'cashew' & object == 'crime')$misses))
 
 	shap_cashew_crime = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'crime')$misses)
 	print(shap_cashew_crime)
 	if(shap_cashew_crime$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_crime$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_crime$p.value, sep = " "))
 	}
 }
 @
 \textbf{Misses for No Normalization}
 <<RH4_trivialcaching_crime, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 misses_trivialcaching_crime = subset(json_data, treatment == 'trivialcaching' & object == 'crime' & !is.na(misses))$misses
 print(paste("Sample size: ", length(misses_trivialcaching_crime)))					
 summary(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$misses)
 
 if(length(misses_trivialcaching_crime) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'trivialcaching' & object == 'crime'), "misses", min(subset(json_data, treatment == 'trivialcaching'& object == 'crime')$misses), max(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$misses))
 
 	shap_trivialcaching_crime = shapiro.test(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$misses)
 	print(shap_trivialcaching_crime)
 	if(shap_trivialcaching_crime$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_trivialcaching_crime$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_trivialcaching_crime$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_crime, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'trivialcaching') & object == 'crime')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$misses, DF$treatmentDescription, mean)))])
 boxplot_RH4_crime = ggplot(DF, aes(x =treatmentDescription , y = misses)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Misses by Transformations enabled for CRIME") + 
 	ylab("Misses ")			   
 boxplot_RH4_crime
 if(length(misses_cashew_crime) == expectedRuns & length(misses_trivialcaching_crime) == expectedRuns){
 	result_RH4_crime_tTest = FALSE
 	result_RH4_crime_wTest = FALSE
 	
 	if(shap_cashew_crime$p.value > alpha&shap_trivialcaching_crime$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'crime')$misses, subset(json_data,treatment == 'trivialcaching' & object == 'crime')$misses)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'crime')$misses, subset(json_data, treatment == 'trivialcaching' & object == 'crime')$misses, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_crime_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(misses~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'trivialcaching') & object == 'crime')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_crime_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_crime_wTest = TRUE
 		}
 	}				
 }
if(length(misses_cashew_crime) == expectedRuns & length(misses_trivialcaching_crime) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Misses for Cashew: ", mean(subset(json_data, treatment == 'cashew' & object == 'crime')$misses)))
	 print(paste("Mean Misses for No Normalization: ", mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$misses)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'crime')$misses) - mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$misses))))
	 if (result_RH4_crime_tTest | result_RH4_crime_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'crime')$misses) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$misses)){
	   	result_RH4_crime = "Cashew \\textgreater{} No Normalization"
	   	result_object_RH4_crime = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_crime = "Cashew \\textless{} No Normalization"
	   	result_object_RH4_crime = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_crime = 5
	 	result_RH4_crime = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'crime')$misses) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$misses)){
	 	cat(paste("Misses for Cashew is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$misses) - mean(subset(json_data, treatment == 'cashew' & object == 'crime')$misses)) / mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$misses)), "% greater than \n Misses for No Normalization"))				
	 }else{
	     cat(paste("Misses for No Normalization is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$misses) - mean(subset(json_data, treatment == 'cashew' & object == 'crime')$misses)) / mean(subset(json_data, treatment == 'cashew' & object == 'crime')$misses)), "% greater than \nMisses for Cashew"))			    
	 }	
} 
if (length(misses_cashew_crime) != expectedRuns & length(misses_trivialcaching_crime) != expectedRuns){
 	result_object_RH4_crime = 4
	result_RH4_crime = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(misses_cashew_crime) == expectedRuns & length(misses_trivialcaching_crime) != expectedRuns){
	result_object_RH4_crime = 2
	result_RH4_crime = "Cashew"
	result_RH4_cashew = result_RH4_cashew + 1			
}
if (length(misses_cashew_crime) != expectedRuns & length(misses_trivialcaching_crime) == expectedRuns){
	result_object_RH4_crime = 3
	result_RH4_crime = "No Normalization"
	result_RH4_trivialcaching = result_RH4_trivialcaching + 1			
}
@  


 
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH4_result = list(hypothesis = "RH4", results = c(result_RH4_less / result_RH4_objects, result_RH4_greater / result_RH4_objects, result_RH4_cashew / result_RH4_objects, result_RH4_trivialcaching / result_RH4_objects, result_RH4_none / result_RH4_objects, result_RH4_inconclusive / result_RH4_objects), objectResults = list( list(object = 'password', result = result_object_RH4_password),  list(object = 'password2', result = result_object_RH4_password2),  list(object = 'obscure', result = result_object_RH4_obscure),  list(object = 'crime', result = result_object_RH4_crime) ))	
	@
	
	\subsubsection{RH4 Results: Misses Cashew = No Normalization}
	
	
	\begin{table}[H]
	\centering
	\caption{RH4 Results per Object}
	\begin{tabular}{ll}
	\textbf{Password1} & \Sexpr{result_RH4_password} \\
	\textbf{Password2} & \Sexpr{result_RH4_password2} \\
	\textbf{Obscure} & \Sexpr{result_RH4_obscure} \\
	\textbf{CRIME} & \Sexpr{result_RH4_crime} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH4 Results Summary}
	\begin{tabular}{ll}
	\textbf{Cashew \textless{} No Normalization:}& \Sexpr{100 * result_RH4_less / result_RH4_objects}\% \\
	\textbf{Cashew \textgreater{} No Normalization:}& \Sexpr{100 * result_RH4_greater / result_RH4_objects}\%\\
	\textbf{Cashew:} & \Sexpr{100 * result_RH4_cashew / result_RH4_objects}\%\\
	\textbf{No Normalization:} & \Sexpr{100 * result_RH4_trivialcaching / result_RH4_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH4_none / result_RH4_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH4_inconclusive / result_RH4_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	



\subsection{RH5: Hits/Misses ratio for Cashew is equals than Hits/Misses ratio for No Normalization}

 <<RH5, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 
 result_RH5_objects=4
 result_RH5_less=0
 result_RH5_greater=0
 result_RH5_cashew=0
 result_RH5_trivialcaching=0
 result_RH5_none=0
 result_RH5_inconclusive=0
 @
 
 <<overview_RH5, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 DF <- data_summary(subset(json_data, (object == 'password' |object == 'password2' |object == 'obscure' |object == 'crime' ) & (treatment == 'cashew' | treatment == 'trivialcaching')), varname = "hitsMissesRatio", groupnames = c("treatmentDescription", "objectLabel", "objectOrder"))
 DF$objectLabel <- factor(DF$objectLabel, levels=c("Password1","Password2","Obscure","CRIME"))
 		
 		ggplot(DF, aes(x=objectLabel, y=hitsMissesRatio, group=treatmentDescription, color=treatmentDescription)) + 
 		    geom_errorbar(aes(ymin=hitsMissesRatio-sd, ymax=hitsMissesRatio+sd), width=.1, linetype=3) +
 		    geom_line() + geom_point()+
 		   scale_color_brewer(palette="Paired") +
 		   theme_bw() +
 		  scale_x_discrete(name = "Constraints")+
 		  
 		  scale_y_continuous(name = "Hits/Misses ratio ")+
 		  ggtitle("Hits/Misses ratio Overview") + 
 		  theme(legend.title = element_blank())	
 @
 	

\subsubsection{RH5.1: Object Password1}

 \textbf{Hits/Misses ratio for Cashew}
 <<RH5_cashew_password, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 hitsMissesRatio_cashew_password = subset(json_data, treatment == 'cashew' & object == 'password' & !is.na(hitsMissesRatio))$hitsMissesRatio
 print(paste("Sample size: ", length(hitsMissesRatio_cashew_password)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'password')$hitsMissesRatio)
 
 if(length(hitsMissesRatio_cashew_password) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'password'), "hitsMissesRatio", min(subset(json_data, treatment == 'cashew'& object == 'password')$hitsMissesRatio), max(subset(json_data, treatment == 'cashew' & object == 'password')$hitsMissesRatio))
 
 	shap_cashew_password = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'password')$hitsMissesRatio)
 	print(shap_cashew_password)
 	if(shap_cashew_password$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_password$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_password$p.value, sep = " "))
 	}
 }
 @
 \textbf{Hits/Misses ratio for No Normalization}
 <<RH5_trivialcaching_password, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 hitsMissesRatio_trivialcaching_password = subset(json_data, treatment == 'trivialcaching' & object == 'password' & !is.na(hitsMissesRatio))$hitsMissesRatio
 print(paste("Sample size: ", length(hitsMissesRatio_trivialcaching_password)))					
 summary(subset(json_data, treatment == 'trivialcaching' & object == 'password')$hitsMissesRatio)
 
 if(length(hitsMissesRatio_trivialcaching_password) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'trivialcaching' & object == 'password'), "hitsMissesRatio", min(subset(json_data, treatment == 'trivialcaching'& object == 'password')$hitsMissesRatio), max(subset(json_data, treatment == 'trivialcaching' & object == 'password')$hitsMissesRatio))
 
 	shap_trivialcaching_password = shapiro.test(subset(json_data, treatment == 'trivialcaching' & object == 'password')$hitsMissesRatio)
 	print(shap_trivialcaching_password)
 	if(shap_trivialcaching_password$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_trivialcaching_password$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_trivialcaching_password$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH5_password, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'trivialcaching') & object == 'password')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$hitsMissesRatio, DF$treatmentDescription, mean)))])
 boxplot_RH5_password = ggplot(DF, aes(x =treatmentDescription , y = hitsMissesRatio)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Hits/Misses ratio by Transformations enabled for Password1") + 
 	ylab("Hits/Misses ratio ")			   
 boxplot_RH5_password
 if(length(hitsMissesRatio_cashew_password) == expectedRuns & length(hitsMissesRatio_trivialcaching_password) == expectedRuns){
 	result_RH5_password_tTest = FALSE
 	result_RH5_password_wTest = FALSE
 	
 	if(shap_cashew_password$p.value > alpha&shap_trivialcaching_password$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'password')$hitsMissesRatio, subset(json_data,treatment == 'trivialcaching' & object == 'password')$hitsMissesRatio)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'password')$hitsMissesRatio, subset(json_data, treatment == 'trivialcaching' & object == 'password')$hitsMissesRatio, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH5_password_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(hitsMissesRatio~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'trivialcaching') & object == 'password')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH5_password_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH5_password_wTest = TRUE
 		}
 	}				
 }
if(length(hitsMissesRatio_cashew_password) == expectedRuns & length(hitsMissesRatio_trivialcaching_password) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Hits/Misses ratio for Cashew: ", mean(subset(json_data, treatment == 'cashew' & object == 'password')$hitsMissesRatio)))
	 print(paste("Mean Hits/Misses ratio for No Normalization: ", mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$hitsMissesRatio)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'password')$hitsMissesRatio) - mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$hitsMissesRatio))))
	 if (result_RH5_password_tTest | result_RH5_password_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'password')$hitsMissesRatio) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$hitsMissesRatio)){
	   	result_RH5_password = "Cashew \\textgreater{} No Normalization"
	   	result_object_RH5_password = 1
	   	result_RH5_greater = result_RH5_greater + 1
	 	}else {
	   	result_RH5_password = "Cashew \\textless{} No Normalization"
	   	result_object_RH5_password = 0
	   	result_RH5_less = result_RH5_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH5_password = 5
	 	result_RH5_password = "Inconclusive"
	 	result_RH5_inconclusive = result_RH5_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'password')$hitsMissesRatio) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$hitsMissesRatio)){
	 	cat(paste("Hits/Misses ratio for Cashew is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$hitsMissesRatio) - mean(subset(json_data, treatment == 'cashew' & object == 'password')$hitsMissesRatio)) / mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$hitsMissesRatio)), "% greater than \n Hits/Misses ratio for No Normalization"))				
	 }else{
	     cat(paste("Hits/Misses ratio for No Normalization is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'password')$hitsMissesRatio) - mean(subset(json_data, treatment == 'cashew' & object == 'password')$hitsMissesRatio)) / mean(subset(json_data, treatment == 'cashew' & object == 'password')$hitsMissesRatio)), "% greater than \nHits/Misses ratio for Cashew"))			    
	 }	
} 
if (length(hitsMissesRatio_cashew_password) != expectedRuns & length(hitsMissesRatio_trivialcaching_password) != expectedRuns){
 	result_object_RH5_password = 4
	result_RH5_password = "None"
	result_RH5_none = result_RH5_none + 1
}
if (length(hitsMissesRatio_cashew_password) == expectedRuns & length(hitsMissesRatio_trivialcaching_password) != expectedRuns){
	result_object_RH5_password = 2
	result_RH5_password = "Cashew"
	result_RH5_cashew = result_RH5_cashew + 1			
}
if (length(hitsMissesRatio_cashew_password) != expectedRuns & length(hitsMissesRatio_trivialcaching_password) == expectedRuns){
	result_object_RH5_password = 3
	result_RH5_password = "No Normalization"
	result_RH5_trivialcaching = result_RH5_trivialcaching + 1			
}
@  


\subsubsection{RH5.2: Object Password2}

 \textbf{Hits/Misses ratio for Cashew}
 <<RH5_cashew_password2, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 hitsMissesRatio_cashew_password2 = subset(json_data, treatment == 'cashew' & object == 'password2' & !is.na(hitsMissesRatio))$hitsMissesRatio
 print(paste("Sample size: ", length(hitsMissesRatio_cashew_password2)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'password2')$hitsMissesRatio)
 
 if(length(hitsMissesRatio_cashew_password2) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'password2'), "hitsMissesRatio", min(subset(json_data, treatment == 'cashew'& object == 'password2')$hitsMissesRatio), max(subset(json_data, treatment == 'cashew' & object == 'password2')$hitsMissesRatio))
 
 	shap_cashew_password2 = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'password2')$hitsMissesRatio)
 	print(shap_cashew_password2)
 	if(shap_cashew_password2$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_password2$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_password2$p.value, sep = " "))
 	}
 }
 @
 \textbf{Hits/Misses ratio for No Normalization}
 <<RH5_trivialcaching_password2, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 hitsMissesRatio_trivialcaching_password2 = subset(json_data, treatment == 'trivialcaching' & object == 'password2' & !is.na(hitsMissesRatio))$hitsMissesRatio
 print(paste("Sample size: ", length(hitsMissesRatio_trivialcaching_password2)))					
 summary(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$hitsMissesRatio)
 
 if(length(hitsMissesRatio_trivialcaching_password2) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'trivialcaching' & object == 'password2'), "hitsMissesRatio", min(subset(json_data, treatment == 'trivialcaching'& object == 'password2')$hitsMissesRatio), max(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$hitsMissesRatio))
 
 	shap_trivialcaching_password2 = shapiro.test(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$hitsMissesRatio)
 	print(shap_trivialcaching_password2)
 	if(shap_trivialcaching_password2$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_trivialcaching_password2$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_trivialcaching_password2$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH5_password2, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'trivialcaching') & object == 'password2')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$hitsMissesRatio, DF$treatmentDescription, mean)))])
 boxplot_RH5_password2 = ggplot(DF, aes(x =treatmentDescription , y = hitsMissesRatio)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Hits/Misses ratio by Transformations enabled for Password2") + 
 	ylab("Hits/Misses ratio ")			   
 boxplot_RH5_password2
 if(length(hitsMissesRatio_cashew_password2) == expectedRuns & length(hitsMissesRatio_trivialcaching_password2) == expectedRuns){
 	result_RH5_password2_tTest = FALSE
 	result_RH5_password2_wTest = FALSE
 	
 	if(shap_cashew_password2$p.value > alpha&shap_trivialcaching_password2$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'password2')$hitsMissesRatio, subset(json_data,treatment == 'trivialcaching' & object == 'password2')$hitsMissesRatio)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'password2')$hitsMissesRatio, subset(json_data, treatment == 'trivialcaching' & object == 'password2')$hitsMissesRatio, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH5_password2_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(hitsMissesRatio~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'trivialcaching') & object == 'password2')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH5_password2_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH5_password2_wTest = TRUE
 		}
 	}				
 }
if(length(hitsMissesRatio_cashew_password2) == expectedRuns & length(hitsMissesRatio_trivialcaching_password2) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Hits/Misses ratio for Cashew: ", mean(subset(json_data, treatment == 'cashew' & object == 'password2')$hitsMissesRatio)))
	 print(paste("Mean Hits/Misses ratio for No Normalization: ", mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$hitsMissesRatio)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'password2')$hitsMissesRatio) - mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$hitsMissesRatio))))
	 if (result_RH5_password2_tTest | result_RH5_password2_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'password2')$hitsMissesRatio) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$hitsMissesRatio)){
	   	result_RH5_password2 = "Cashew \\textgreater{} No Normalization"
	   	result_object_RH5_password2 = 1
	   	result_RH5_greater = result_RH5_greater + 1
	 	}else {
	   	result_RH5_password2 = "Cashew \\textless{} No Normalization"
	   	result_object_RH5_password2 = 0
	   	result_RH5_less = result_RH5_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH5_password2 = 5
	 	result_RH5_password2 = "Inconclusive"
	 	result_RH5_inconclusive = result_RH5_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'password2')$hitsMissesRatio) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$hitsMissesRatio)){
	 	cat(paste("Hits/Misses ratio for Cashew is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$hitsMissesRatio) - mean(subset(json_data, treatment == 'cashew' & object == 'password2')$hitsMissesRatio)) / mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$hitsMissesRatio)), "% greater than \n Hits/Misses ratio for No Normalization"))				
	 }else{
	     cat(paste("Hits/Misses ratio for No Normalization is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'password2')$hitsMissesRatio) - mean(subset(json_data, treatment == 'cashew' & object == 'password2')$hitsMissesRatio)) / mean(subset(json_data, treatment == 'cashew' & object == 'password2')$hitsMissesRatio)), "% greater than \nHits/Misses ratio for Cashew"))			    
	 }	
} 
if (length(hitsMissesRatio_cashew_password2) != expectedRuns & length(hitsMissesRatio_trivialcaching_password2) != expectedRuns){
 	result_object_RH5_password2 = 4
	result_RH5_password2 = "None"
	result_RH5_none = result_RH5_none + 1
}
if (length(hitsMissesRatio_cashew_password2) == expectedRuns & length(hitsMissesRatio_trivialcaching_password2) != expectedRuns){
	result_object_RH5_password2 = 2
	result_RH5_password2 = "Cashew"
	result_RH5_cashew = result_RH5_cashew + 1			
}
if (length(hitsMissesRatio_cashew_password2) != expectedRuns & length(hitsMissesRatio_trivialcaching_password2) == expectedRuns){
	result_object_RH5_password2 = 3
	result_RH5_password2 = "No Normalization"
	result_RH5_trivialcaching = result_RH5_trivialcaching + 1			
}
@  


\subsubsection{RH5.3: Object Obscure}

 \textbf{Hits/Misses ratio for Cashew}
 <<RH5_cashew_obscure, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 hitsMissesRatio_cashew_obscure = subset(json_data, treatment == 'cashew' & object == 'obscure' & !is.na(hitsMissesRatio))$hitsMissesRatio
 print(paste("Sample size: ", length(hitsMissesRatio_cashew_obscure)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'obscure')$hitsMissesRatio)
 
 if(length(hitsMissesRatio_cashew_obscure) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'obscure'), "hitsMissesRatio", min(subset(json_data, treatment == 'cashew'& object == 'obscure')$hitsMissesRatio), max(subset(json_data, treatment == 'cashew' & object == 'obscure')$hitsMissesRatio))
 
 	shap_cashew_obscure = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'obscure')$hitsMissesRatio)
 	print(shap_cashew_obscure)
 	if(shap_cashew_obscure$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_obscure$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_obscure$p.value, sep = " "))
 	}
 }
 @
 \textbf{Hits/Misses ratio for No Normalization}
 <<RH5_trivialcaching_obscure, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 hitsMissesRatio_trivialcaching_obscure = subset(json_data, treatment == 'trivialcaching' & object == 'obscure' & !is.na(hitsMissesRatio))$hitsMissesRatio
 print(paste("Sample size: ", length(hitsMissesRatio_trivialcaching_obscure)))					
 summary(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$hitsMissesRatio)
 
 if(length(hitsMissesRatio_trivialcaching_obscure) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'trivialcaching' & object == 'obscure'), "hitsMissesRatio", min(subset(json_data, treatment == 'trivialcaching'& object == 'obscure')$hitsMissesRatio), max(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$hitsMissesRatio))
 
 	shap_trivialcaching_obscure = shapiro.test(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$hitsMissesRatio)
 	print(shap_trivialcaching_obscure)
 	if(shap_trivialcaching_obscure$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_trivialcaching_obscure$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_trivialcaching_obscure$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH5_obscure, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'trivialcaching') & object == 'obscure')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$hitsMissesRatio, DF$treatmentDescription, mean)))])
 boxplot_RH5_obscure = ggplot(DF, aes(x =treatmentDescription , y = hitsMissesRatio)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Hits/Misses ratio by Transformations enabled for Obscure") + 
 	ylab("Hits/Misses ratio ")			   
 boxplot_RH5_obscure
 if(length(hitsMissesRatio_cashew_obscure) == expectedRuns & length(hitsMissesRatio_trivialcaching_obscure) == expectedRuns){
 	result_RH5_obscure_tTest = FALSE
 	result_RH5_obscure_wTest = FALSE
 	
 	if(shap_cashew_obscure$p.value > alpha&shap_trivialcaching_obscure$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'obscure')$hitsMissesRatio, subset(json_data,treatment == 'trivialcaching' & object == 'obscure')$hitsMissesRatio)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'obscure')$hitsMissesRatio, subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$hitsMissesRatio, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH5_obscure_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(hitsMissesRatio~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'trivialcaching') & object == 'obscure')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH5_obscure_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH5_obscure_wTest = TRUE
 		}
 	}				
 }
if(length(hitsMissesRatio_cashew_obscure) == expectedRuns & length(hitsMissesRatio_trivialcaching_obscure) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Hits/Misses ratio for Cashew: ", mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$hitsMissesRatio)))
	 print(paste("Mean Hits/Misses ratio for No Normalization: ", mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$hitsMissesRatio)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$hitsMissesRatio) - mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$hitsMissesRatio))))
	 if (result_RH5_obscure_tTest | result_RH5_obscure_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$hitsMissesRatio) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$hitsMissesRatio)){
	   	result_RH5_obscure = "Cashew \\textgreater{} No Normalization"
	   	result_object_RH5_obscure = 1
	   	result_RH5_greater = result_RH5_greater + 1
	 	}else {
	   	result_RH5_obscure = "Cashew \\textless{} No Normalization"
	   	result_object_RH5_obscure = 0
	   	result_RH5_less = result_RH5_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH5_obscure = 5
	 	result_RH5_obscure = "Inconclusive"
	 	result_RH5_inconclusive = result_RH5_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'obscure')$hitsMissesRatio) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$hitsMissesRatio)){
	 	cat(paste("Hits/Misses ratio for Cashew is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$hitsMissesRatio) - mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$hitsMissesRatio)) / mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$hitsMissesRatio)), "% greater than \n Hits/Misses ratio for No Normalization"))				
	 }else{
	     cat(paste("Hits/Misses ratio for No Normalization is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'obscure')$hitsMissesRatio) - mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$hitsMissesRatio)) / mean(subset(json_data, treatment == 'cashew' & object == 'obscure')$hitsMissesRatio)), "% greater than \nHits/Misses ratio for Cashew"))			    
	 }	
} 
if (length(hitsMissesRatio_cashew_obscure) != expectedRuns & length(hitsMissesRatio_trivialcaching_obscure) != expectedRuns){
 	result_object_RH5_obscure = 4
	result_RH5_obscure = "None"
	result_RH5_none = result_RH5_none + 1
}
if (length(hitsMissesRatio_cashew_obscure) == expectedRuns & length(hitsMissesRatio_trivialcaching_obscure) != expectedRuns){
	result_object_RH5_obscure = 2
	result_RH5_obscure = "Cashew"
	result_RH5_cashew = result_RH5_cashew + 1			
}
if (length(hitsMissesRatio_cashew_obscure) != expectedRuns & length(hitsMissesRatio_trivialcaching_obscure) == expectedRuns){
	result_object_RH5_obscure = 3
	result_RH5_obscure = "No Normalization"
	result_RH5_trivialcaching = result_RH5_trivialcaching + 1			
}
@  


\subsubsection{RH5.4: Object CRIME}

 \textbf{Hits/Misses ratio for Cashew}
 <<RH5_cashew_crime, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 hitsMissesRatio_cashew_crime = subset(json_data, treatment == 'cashew' & object == 'crime' & !is.na(hitsMissesRatio))$hitsMissesRatio
 print(paste("Sample size: ", length(hitsMissesRatio_cashew_crime)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'crime')$hitsMissesRatio)
 
 if(length(hitsMissesRatio_cashew_crime) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'crime'), "hitsMissesRatio", min(subset(json_data, treatment == 'cashew'& object == 'crime')$hitsMissesRatio), max(subset(json_data, treatment == 'cashew' & object == 'crime')$hitsMissesRatio))
 
 	shap_cashew_crime = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'crime')$hitsMissesRatio)
 	print(shap_cashew_crime)
 	if(shap_cashew_crime$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_crime$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_crime$p.value, sep = " "))
 	}
 }
 @
 \textbf{Hits/Misses ratio for No Normalization}
 <<RH5_trivialcaching_crime, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 hitsMissesRatio_trivialcaching_crime = subset(json_data, treatment == 'trivialcaching' & object == 'crime' & !is.na(hitsMissesRatio))$hitsMissesRatio
 print(paste("Sample size: ", length(hitsMissesRatio_trivialcaching_crime)))					
 summary(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$hitsMissesRatio)
 
 if(length(hitsMissesRatio_trivialcaching_crime) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'trivialcaching' & object == 'crime'), "hitsMissesRatio", min(subset(json_data, treatment == 'trivialcaching'& object == 'crime')$hitsMissesRatio), max(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$hitsMissesRatio))
 
 	shap_trivialcaching_crime = shapiro.test(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$hitsMissesRatio)
 	print(shap_trivialcaching_crime)
 	if(shap_trivialcaching_crime$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_trivialcaching_crime$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_trivialcaching_crime$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH5_crime, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'trivialcaching') & object == 'crime')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$hitsMissesRatio, DF$treatmentDescription, mean)))])
 boxplot_RH5_crime = ggplot(DF, aes(x =treatmentDescription , y = hitsMissesRatio)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Hits/Misses ratio by Transformations enabled for CRIME") + 
 	ylab("Hits/Misses ratio ")			   
 boxplot_RH5_crime
 if(length(hitsMissesRatio_cashew_crime) == expectedRuns & length(hitsMissesRatio_trivialcaching_crime) == expectedRuns){
 	result_RH5_crime_tTest = FALSE
 	result_RH5_crime_wTest = FALSE
 	
 	if(shap_cashew_crime$p.value > alpha&shap_trivialcaching_crime$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'crime')$hitsMissesRatio, subset(json_data,treatment == 'trivialcaching' & object == 'crime')$hitsMissesRatio)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'crime')$hitsMissesRatio, subset(json_data, treatment == 'trivialcaching' & object == 'crime')$hitsMissesRatio, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH5_crime_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(hitsMissesRatio~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'trivialcaching') & object == 'crime')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH5_crime_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH5_crime_wTest = TRUE
 		}
 	}				
 }
if(length(hitsMissesRatio_cashew_crime) == expectedRuns & length(hitsMissesRatio_trivialcaching_crime) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Hits/Misses ratio for Cashew: ", mean(subset(json_data, treatment == 'cashew' & object == 'crime')$hitsMissesRatio)))
	 print(paste("Mean Hits/Misses ratio for No Normalization: ", mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$hitsMissesRatio)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'crime')$hitsMissesRatio) - mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$hitsMissesRatio))))
	 if (result_RH5_crime_tTest | result_RH5_crime_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'crime')$hitsMissesRatio) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$hitsMissesRatio)){
	   	result_RH5_crime = "Cashew \\textgreater{} No Normalization"
	   	result_object_RH5_crime = 1
	   	result_RH5_greater = result_RH5_greater + 1
	 	}else {
	   	result_RH5_crime = "Cashew \\textless{} No Normalization"
	   	result_object_RH5_crime = 0
	   	result_RH5_less = result_RH5_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH5_crime = 5
	 	result_RH5_crime = "Inconclusive"
	 	result_RH5_inconclusive = result_RH5_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'crime')$hitsMissesRatio) > mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$hitsMissesRatio)){
	 	cat(paste("Hits/Misses ratio for Cashew is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$hitsMissesRatio) - mean(subset(json_data, treatment == 'cashew' & object == 'crime')$hitsMissesRatio)) / mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$hitsMissesRatio)), "% greater than \n Hits/Misses ratio for No Normalization"))				
	 }else{
	     cat(paste("Hits/Misses ratio for No Normalization is ", 100 * (abs(mean(subset(json_data, treatment == 'trivialcaching' & object == 'crime')$hitsMissesRatio) - mean(subset(json_data, treatment == 'cashew' & object == 'crime')$hitsMissesRatio)) / mean(subset(json_data, treatment == 'cashew' & object == 'crime')$hitsMissesRatio)), "% greater than \nHits/Misses ratio for Cashew"))			    
	 }	
} 
if (length(hitsMissesRatio_cashew_crime) != expectedRuns & length(hitsMissesRatio_trivialcaching_crime) != expectedRuns){
 	result_object_RH5_crime = 4
	result_RH5_crime = "None"
	result_RH5_none = result_RH5_none + 1
}
if (length(hitsMissesRatio_cashew_crime) == expectedRuns & length(hitsMissesRatio_trivialcaching_crime) != expectedRuns){
	result_object_RH5_crime = 2
	result_RH5_crime = "Cashew"
	result_RH5_cashew = result_RH5_cashew + 1			
}
if (length(hitsMissesRatio_cashew_crime) != expectedRuns & length(hitsMissesRatio_trivialcaching_crime) == expectedRuns){
	result_object_RH5_crime = 3
	result_RH5_crime = "No Normalization"
	result_RH5_trivialcaching = result_RH5_trivialcaching + 1			
}
@  


 
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH5_result = list(hypothesis = "RH5", results = c(result_RH5_less / result_RH5_objects, result_RH5_greater / result_RH5_objects, result_RH5_cashew / result_RH5_objects, result_RH5_trivialcaching / result_RH5_objects, result_RH5_none / result_RH5_objects, result_RH5_inconclusive / result_RH5_objects), objectResults = list( list(object = 'password', result = result_object_RH5_password),  list(object = 'password2', result = result_object_RH5_password2),  list(object = 'obscure', result = result_object_RH5_obscure),  list(object = 'crime', result = result_object_RH5_crime) ))	
	@
	
	\subsubsection{RH5 Results: Hits/Misses ratio Cashew = No Normalization}
	
	
	\begin{table}[H]
	\centering
	\caption{RH5 Results per Object}
	\begin{tabular}{ll}
	\textbf{Password1} & \Sexpr{result_RH5_password} \\
	\textbf{Password2} & \Sexpr{result_RH5_password2} \\
	\textbf{Obscure} & \Sexpr{result_RH5_obscure} \\
	\textbf{CRIME} & \Sexpr{result_RH5_crime} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH5 Results Summary}
	\begin{tabular}{ll}
	\textbf{Cashew \textless{} No Normalization:}& \Sexpr{100 * result_RH5_less / result_RH5_objects}\% \\
	\textbf{Cashew \textgreater{} No Normalization:}& \Sexpr{100 * result_RH5_greater / result_RH5_objects}\%\\
	\textbf{Cashew:} & \Sexpr{100 * result_RH5_cashew / result_RH5_objects}\%\\
	\textbf{No Normalization:} & \Sexpr{100 * result_RH5_trivialcaching / result_RH5_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH5_none / result_RH5_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH5_inconclusive / result_RH5_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	



\section{Result Summary}
\subsection{Research Hypotheses}

	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH1_result = list(hypothesis = "RH1", results = c(result_RH1_less / result_RH1_objects, result_RH1_greater / result_RH1_objects, result_RH1_cashew / result_RH1_objects, result_RH1_nocache / result_RH1_objects, result_RH1_none / result_RH1_objects, result_RH1_inconclusive / result_RH1_objects), objectResults = list( list(object = 'password', result = result_object_RH1_password),  list(object = 'password2', result = result_object_RH1_password2),  list(object = 'obscure', result = result_object_RH1_obscure),  list(object = 'crime', result = result_object_RH1_crime) ))	
	@
	
	\subsubsection{RH1 Results: Total time Cashew = No cache}
	
	
	\begin{table}[H]
	\centering
	\caption{RH1 Results per Object}
	\begin{tabular}{ll}
	\textbf{Password1} & \Sexpr{result_RH1_password} \\
	\textbf{Password2} & \Sexpr{result_RH1_password2} \\
	\textbf{Obscure} & \Sexpr{result_RH1_obscure} \\
	\textbf{CRIME} & \Sexpr{result_RH1_crime} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH1 Results Summary}
	\begin{tabular}{ll}
	\textbf{Cashew \textless{} No cache:}& \Sexpr{100 * result_RH1_less / result_RH1_objects}\% \\
	\textbf{Cashew \textgreater{} No cache:}& \Sexpr{100 * result_RH1_greater / result_RH1_objects}\%\\
	\textbf{Cashew:} & \Sexpr{100 * result_RH1_cashew / result_RH1_objects}\%\\
	\textbf{No cache:} & \Sexpr{100 * result_RH1_nocache / result_RH1_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH1_none / result_RH1_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH1_inconclusive / result_RH1_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH2_result = list(hypothesis = "RH2", results = c(result_RH2_less / result_RH2_objects, result_RH2_greater / result_RH2_objects, result_RH2_cashew / result_RH2_objects, result_RH2_trivialcaching / result_RH2_objects, result_RH2_none / result_RH2_objects, result_RH2_inconclusive / result_RH2_objects), objectResults = list( list(object = 'password', result = result_object_RH2_password),  list(object = 'password2', result = result_object_RH2_password2),  list(object = 'obscure', result = result_object_RH2_obscure),  list(object = 'crime', result = result_object_RH2_crime) ))	
	@
	
	\subsubsection{RH2 Results: Total time Cashew = No Normalization}
	
	
	\begin{table}[H]
	\centering
	\caption{RH2 Results per Object}
	\begin{tabular}{ll}
	\textbf{Password1} & \Sexpr{result_RH2_password} \\
	\textbf{Password2} & \Sexpr{result_RH2_password2} \\
	\textbf{Obscure} & \Sexpr{result_RH2_obscure} \\
	\textbf{CRIME} & \Sexpr{result_RH2_crime} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH2 Results Summary}
	\begin{tabular}{ll}
	\textbf{Cashew \textless{} No Normalization:}& \Sexpr{100 * result_RH2_less / result_RH2_objects}\% \\
	\textbf{Cashew \textgreater{} No Normalization:}& \Sexpr{100 * result_RH2_greater / result_RH2_objects}\%\\
	\textbf{Cashew:} & \Sexpr{100 * result_RH2_cashew / result_RH2_objects}\%\\
	\textbf{No Normalization:} & \Sexpr{100 * result_RH2_trivialcaching / result_RH2_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH2_none / result_RH2_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH2_inconclusive / result_RH2_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH3_result = list(hypothesis = "RH3", results = c(result_RH3_less / result_RH3_objects, result_RH3_greater / result_RH3_objects, result_RH3_cashew / result_RH3_objects, result_RH3_trivialcaching / result_RH3_objects, result_RH3_none / result_RH3_objects, result_RH3_inconclusive / result_RH3_objects), objectResults = list( list(object = 'password', result = result_object_RH3_password),  list(object = 'password2', result = result_object_RH3_password2),  list(object = 'obscure', result = result_object_RH3_obscure),  list(object = 'crime', result = result_object_RH3_crime) ))	
	@
	
	\subsubsection{RH3 Results: Hits Cashew = No Normalization}
	
	
	\begin{table}[H]
	\centering
	\caption{RH3 Results per Object}
	\begin{tabular}{ll}
	\textbf{Password1} & \Sexpr{result_RH3_password} \\
	\textbf{Password2} & \Sexpr{result_RH3_password2} \\
	\textbf{Obscure} & \Sexpr{result_RH3_obscure} \\
	\textbf{CRIME} & \Sexpr{result_RH3_crime} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH3 Results Summary}
	\begin{tabular}{ll}
	\textbf{Cashew \textless{} No Normalization:}& \Sexpr{100 * result_RH3_less / result_RH3_objects}\% \\
	\textbf{Cashew \textgreater{} No Normalization:}& \Sexpr{100 * result_RH3_greater / result_RH3_objects}\%\\
	\textbf{Cashew:} & \Sexpr{100 * result_RH3_cashew / result_RH3_objects}\%\\
	\textbf{No Normalization:} & \Sexpr{100 * result_RH3_trivialcaching / result_RH3_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH3_none / result_RH3_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH3_inconclusive / result_RH3_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH4_result = list(hypothesis = "RH4", results = c(result_RH4_less / result_RH4_objects, result_RH4_greater / result_RH4_objects, result_RH4_cashew / result_RH4_objects, result_RH4_trivialcaching / result_RH4_objects, result_RH4_none / result_RH4_objects, result_RH4_inconclusive / result_RH4_objects), objectResults = list( list(object = 'password', result = result_object_RH4_password),  list(object = 'password2', result = result_object_RH4_password2),  list(object = 'obscure', result = result_object_RH4_obscure),  list(object = 'crime', result = result_object_RH4_crime) ))	
	@
	
	\subsubsection{RH4 Results: Misses Cashew = No Normalization}
	
	
	\begin{table}[H]
	\centering
	\caption{RH4 Results per Object}
	\begin{tabular}{ll}
	\textbf{Password1} & \Sexpr{result_RH4_password} \\
	\textbf{Password2} & \Sexpr{result_RH4_password2} \\
	\textbf{Obscure} & \Sexpr{result_RH4_obscure} \\
	\textbf{CRIME} & \Sexpr{result_RH4_crime} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH4 Results Summary}
	\begin{tabular}{ll}
	\textbf{Cashew \textless{} No Normalization:}& \Sexpr{100 * result_RH4_less / result_RH4_objects}\% \\
	\textbf{Cashew \textgreater{} No Normalization:}& \Sexpr{100 * result_RH4_greater / result_RH4_objects}\%\\
	\textbf{Cashew:} & \Sexpr{100 * result_RH4_cashew / result_RH4_objects}\%\\
	\textbf{No Normalization:} & \Sexpr{100 * result_RH4_trivialcaching / result_RH4_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH4_none / result_RH4_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH4_inconclusive / result_RH4_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH5_result = list(hypothesis = "RH5", results = c(result_RH5_less / result_RH5_objects, result_RH5_greater / result_RH5_objects, result_RH5_cashew / result_RH5_objects, result_RH5_trivialcaching / result_RH5_objects, result_RH5_none / result_RH5_objects, result_RH5_inconclusive / result_RH5_objects), objectResults = list( list(object = 'password', result = result_object_RH5_password),  list(object = 'password2', result = result_object_RH5_password2),  list(object = 'obscure', result = result_object_RH5_obscure),  list(object = 'crime', result = result_object_RH5_crime) ))	
	@
	
	\subsubsection{RH5 Results: Hits/Misses ratio Cashew = No Normalization}
	
	
	\begin{table}[H]
	\centering
	\caption{RH5 Results per Object}
	\begin{tabular}{ll}
	\textbf{Password1} & \Sexpr{result_RH5_password} \\
	\textbf{Password2} & \Sexpr{result_RH5_password2} \\
	\textbf{Obscure} & \Sexpr{result_RH5_obscure} \\
	\textbf{CRIME} & \Sexpr{result_RH5_crime} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH5 Results Summary}
	\begin{tabular}{ll}
	\textbf{Cashew \textless{} No Normalization:}& \Sexpr{100 * result_RH5_less / result_RH5_objects}\% \\
	\textbf{Cashew \textgreater{} No Normalization:}& \Sexpr{100 * result_RH5_greater / result_RH5_objects}\%\\
	\textbf{Cashew:} & \Sexpr{100 * result_RH5_cashew / result_RH5_objects}\%\\
	\textbf{No Normalization:} & \Sexpr{100 * result_RH5_trivialcaching / result_RH5_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH5_none / result_RH5_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH5_inconclusive / result_RH5_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	
		

<<echo=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
experimentResults = list( RH1_result, RH2_result, RH3_result, RH4_result, RH5_result)
write(toJSON(experimentResults, pretty = TRUE, auto_unbox = TRUE), "experimentResults.json")

@
	
\clearpage
\appendix
\section{Session Information}
<<echo=FALSE, warning=FALSE , message=FALSE >>=
sessionInfo()
@

\end{document}
