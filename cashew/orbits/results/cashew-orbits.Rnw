\documentclass{article}
\usepackage{authblk}
\usepackage{float}
\usepackage{multirow}
\usepackage[utf8]{inputenc}
\begin{document}
\title{Constraint Normalization and Parameterized Caching for Quantitative Program Analysis}
\author{}
\maketitle



<<setup, include=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
library(reproducer) # R package incl. software engineering data sets
library(ggplot2) # R package to create high-quality graphics
library(jsonlite)
 
alpha = 0.05
 
json_data = fromJSON("data.json")

json_data$objectOrder[json_data$object == 'small'] = 1
json_data$objectOrder[json_data$object == 'big'] = 2

json_data$treatmentDescription[json_data$treatment == 'cashew'] = 'All transformations'
json_data$treatmentDescription[json_data$treatment == 'cashewExceptOrder'] = 'Except order'
json_data$treatmentDescription[json_data$treatment == 'cashewExceptReduce'] = 'Except removeVar'
json_data$treatmentDescription[json_data$treatment == 'cashewExceptRemove'] = 'Except removeConj'
json_data$treatmentDescription[json_data$treatment == 'cashewExceptRenameAlph'] = 'Except rename alph'
json_data$treatmentDescription[json_data$treatment == 'cashewExceptRenameVar'] = 'Except rename var'
json_data$treatmentDescription[json_data$treatment == 'noCache'] = 'No cache'
json_data$objectLabel[json_data$object == 'small'] = 'SMC-Small'
json_data$objectLabel[json_data$object == 'big'] = 'SMC-Big'

expectedRuns = 1
json_data$averageTime[json_data$executionStatus!='FINISHED']=NA
if (length(json_data$averageTime[json_data$treatment == 'cashew' & json_data$object == 'small' & !is.na(json_data$averageTime)])!=expectedRuns){
	json_data$averageTime[json_data$treatment == 'cashew' & json_data$object == 'small']=NA
}
if (length(json_data$averageTime[json_data$treatment == 'cashew' & json_data$object == 'big' & !is.na(json_data$averageTime)])!=expectedRuns){
	json_data$averageTime[json_data$treatment == 'cashew' & json_data$object == 'big']=NA
}
if (length(json_data$averageTime[json_data$treatment == 'cashewExceptOrder' & json_data$object == 'small' & !is.na(json_data$averageTime)])!=expectedRuns){
	json_data$averageTime[json_data$treatment == 'cashewExceptOrder' & json_data$object == 'small']=NA
}
if (length(json_data$averageTime[json_data$treatment == 'cashewExceptOrder' & json_data$object == 'big' & !is.na(json_data$averageTime)])!=expectedRuns){
	json_data$averageTime[json_data$treatment == 'cashewExceptOrder' & json_data$object == 'big']=NA
}
if (length(json_data$averageTime[json_data$treatment == 'cashewExceptReduce' & json_data$object == 'small' & !is.na(json_data$averageTime)])!=expectedRuns){
	json_data$averageTime[json_data$treatment == 'cashewExceptReduce' & json_data$object == 'small']=NA
}
if (length(json_data$averageTime[json_data$treatment == 'cashewExceptReduce' & json_data$object == 'big' & !is.na(json_data$averageTime)])!=expectedRuns){
	json_data$averageTime[json_data$treatment == 'cashewExceptReduce' & json_data$object == 'big']=NA
}
if (length(json_data$averageTime[json_data$treatment == 'cashewExceptRemove' & json_data$object == 'small' & !is.na(json_data$averageTime)])!=expectedRuns){
	json_data$averageTime[json_data$treatment == 'cashewExceptRemove' & json_data$object == 'small']=NA
}
if (length(json_data$averageTime[json_data$treatment == 'cashewExceptRemove' & json_data$object == 'big' & !is.na(json_data$averageTime)])!=expectedRuns){
	json_data$averageTime[json_data$treatment == 'cashewExceptRemove' & json_data$object == 'big']=NA
}
if (length(json_data$averageTime[json_data$treatment == 'cashewExceptRenameAlph' & json_data$object == 'small' & !is.na(json_data$averageTime)])!=expectedRuns){
	json_data$averageTime[json_data$treatment == 'cashewExceptRenameAlph' & json_data$object == 'small']=NA
}
if (length(json_data$averageTime[json_data$treatment == 'cashewExceptRenameAlph' & json_data$object == 'big' & !is.na(json_data$averageTime)])!=expectedRuns){
	json_data$averageTime[json_data$treatment == 'cashewExceptRenameAlph' & json_data$object == 'big']=NA
}
if (length(json_data$averageTime[json_data$treatment == 'cashewExceptRenameVar' & json_data$object == 'small' & !is.na(json_data$averageTime)])!=expectedRuns){
	json_data$averageTime[json_data$treatment == 'cashewExceptRenameVar' & json_data$object == 'small']=NA
}
if (length(json_data$averageTime[json_data$treatment == 'cashewExceptRenameVar' & json_data$object == 'big' & !is.na(json_data$averageTime)])!=expectedRuns){
	json_data$averageTime[json_data$treatment == 'cashewExceptRenameVar' & json_data$object == 'big']=NA
}
if (length(json_data$averageTime[json_data$treatment == 'noCache' & json_data$object == 'small' & !is.na(json_data$averageTime)])!=expectedRuns){
	json_data$averageTime[json_data$treatment == 'noCache' & json_data$object == 'small']=NA
}
if (length(json_data$averageTime[json_data$treatment == 'noCache' & json_data$object == 'big' & !is.na(json_data$averageTime)])!=expectedRuns){
	json_data$averageTime[json_data$treatment == 'noCache' & json_data$object == 'big']=NA
}
json_data$maxTime[json_data$executionStatus!='FINISHED']=NA
if (length(json_data$maxTime[json_data$treatment == 'cashew' & json_data$object == 'small' & !is.na(json_data$maxTime)])!=expectedRuns){
	json_data$maxTime[json_data$treatment == 'cashew' & json_data$object == 'small']=NA
}
if (length(json_data$maxTime[json_data$treatment == 'cashew' & json_data$object == 'big' & !is.na(json_data$maxTime)])!=expectedRuns){
	json_data$maxTime[json_data$treatment == 'cashew' & json_data$object == 'big']=NA
}
if (length(json_data$maxTime[json_data$treatment == 'cashewExceptOrder' & json_data$object == 'small' & !is.na(json_data$maxTime)])!=expectedRuns){
	json_data$maxTime[json_data$treatment == 'cashewExceptOrder' & json_data$object == 'small']=NA
}
if (length(json_data$maxTime[json_data$treatment == 'cashewExceptOrder' & json_data$object == 'big' & !is.na(json_data$maxTime)])!=expectedRuns){
	json_data$maxTime[json_data$treatment == 'cashewExceptOrder' & json_data$object == 'big']=NA
}
if (length(json_data$maxTime[json_data$treatment == 'cashewExceptReduce' & json_data$object == 'small' & !is.na(json_data$maxTime)])!=expectedRuns){
	json_data$maxTime[json_data$treatment == 'cashewExceptReduce' & json_data$object == 'small']=NA
}
if (length(json_data$maxTime[json_data$treatment == 'cashewExceptReduce' & json_data$object == 'big' & !is.na(json_data$maxTime)])!=expectedRuns){
	json_data$maxTime[json_data$treatment == 'cashewExceptReduce' & json_data$object == 'big']=NA
}
if (length(json_data$maxTime[json_data$treatment == 'cashewExceptRemove' & json_data$object == 'small' & !is.na(json_data$maxTime)])!=expectedRuns){
	json_data$maxTime[json_data$treatment == 'cashewExceptRemove' & json_data$object == 'small']=NA
}
if (length(json_data$maxTime[json_data$treatment == 'cashewExceptRemove' & json_data$object == 'big' & !is.na(json_data$maxTime)])!=expectedRuns){
	json_data$maxTime[json_data$treatment == 'cashewExceptRemove' & json_data$object == 'big']=NA
}
if (length(json_data$maxTime[json_data$treatment == 'cashewExceptRenameAlph' & json_data$object == 'small' & !is.na(json_data$maxTime)])!=expectedRuns){
	json_data$maxTime[json_data$treatment == 'cashewExceptRenameAlph' & json_data$object == 'small']=NA
}
if (length(json_data$maxTime[json_data$treatment == 'cashewExceptRenameAlph' & json_data$object == 'big' & !is.na(json_data$maxTime)])!=expectedRuns){
	json_data$maxTime[json_data$treatment == 'cashewExceptRenameAlph' & json_data$object == 'big']=NA
}
if (length(json_data$maxTime[json_data$treatment == 'cashewExceptRenameVar' & json_data$object == 'small' & !is.na(json_data$maxTime)])!=expectedRuns){
	json_data$maxTime[json_data$treatment == 'cashewExceptRenameVar' & json_data$object == 'small']=NA
}
if (length(json_data$maxTime[json_data$treatment == 'cashewExceptRenameVar' & json_data$object == 'big' & !is.na(json_data$maxTime)])!=expectedRuns){
	json_data$maxTime[json_data$treatment == 'cashewExceptRenameVar' & json_data$object == 'big']=NA
}
if (length(json_data$maxTime[json_data$treatment == 'noCache' & json_data$object == 'small' & !is.na(json_data$maxTime)])!=expectedRuns){
	json_data$maxTime[json_data$treatment == 'noCache' & json_data$object == 'small']=NA
}
if (length(json_data$maxTime[json_data$treatment == 'noCache' & json_data$object == 'big' & !is.na(json_data$maxTime)])!=expectedRuns){
	json_data$maxTime[json_data$treatment == 'noCache' & json_data$object == 'big']=NA
}
json_data$sumTime[json_data$executionStatus!='FINISHED']=NA
if (length(json_data$sumTime[json_data$treatment == 'cashew' & json_data$object == 'small' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'cashew' & json_data$object == 'small']=NA
}
if (length(json_data$sumTime[json_data$treatment == 'cashew' & json_data$object == 'big' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'cashew' & json_data$object == 'big']=NA
}
if (length(json_data$sumTime[json_data$treatment == 'cashewExceptOrder' & json_data$object == 'small' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'cashewExceptOrder' & json_data$object == 'small']=NA
}
if (length(json_data$sumTime[json_data$treatment == 'cashewExceptOrder' & json_data$object == 'big' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'cashewExceptOrder' & json_data$object == 'big']=NA
}
if (length(json_data$sumTime[json_data$treatment == 'cashewExceptReduce' & json_data$object == 'small' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'cashewExceptReduce' & json_data$object == 'small']=NA
}
if (length(json_data$sumTime[json_data$treatment == 'cashewExceptReduce' & json_data$object == 'big' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'cashewExceptReduce' & json_data$object == 'big']=NA
}
if (length(json_data$sumTime[json_data$treatment == 'cashewExceptRemove' & json_data$object == 'small' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'cashewExceptRemove' & json_data$object == 'small']=NA
}
if (length(json_data$sumTime[json_data$treatment == 'cashewExceptRemove' & json_data$object == 'big' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'cashewExceptRemove' & json_data$object == 'big']=NA
}
if (length(json_data$sumTime[json_data$treatment == 'cashewExceptRenameAlph' & json_data$object == 'small' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'cashewExceptRenameAlph' & json_data$object == 'small']=NA
}
if (length(json_data$sumTime[json_data$treatment == 'cashewExceptRenameAlph' & json_data$object == 'big' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'cashewExceptRenameAlph' & json_data$object == 'big']=NA
}
if (length(json_data$sumTime[json_data$treatment == 'cashewExceptRenameVar' & json_data$object == 'small' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'cashewExceptRenameVar' & json_data$object == 'small']=NA
}
if (length(json_data$sumTime[json_data$treatment == 'cashewExceptRenameVar' & json_data$object == 'big' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'cashewExceptRenameVar' & json_data$object == 'big']=NA
}
if (length(json_data$sumTime[json_data$treatment == 'noCache' & json_data$object == 'small' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'noCache' & json_data$object == 'small']=NA
}
if (length(json_data$sumTime[json_data$treatment == 'noCache' & json_data$object == 'big' & !is.na(json_data$sumTime)])!=expectedRuns){
	json_data$sumTime[json_data$treatment == 'noCache' & json_data$object == 'big']=NA
}
json_data$orbits[json_data$executionStatus!='FINISHED']=NA
if (length(json_data$orbits[json_data$treatment == 'cashew' & json_data$object == 'small' & !is.na(json_data$orbits)])!=expectedRuns){
	json_data$orbits[json_data$treatment == 'cashew' & json_data$object == 'small']=NA
}
if (length(json_data$orbits[json_data$treatment == 'cashew' & json_data$object == 'big' & !is.na(json_data$orbits)])!=expectedRuns){
	json_data$orbits[json_data$treatment == 'cashew' & json_data$object == 'big']=NA
}
if (length(json_data$orbits[json_data$treatment == 'cashewExceptOrder' & json_data$object == 'small' & !is.na(json_data$orbits)])!=expectedRuns){
	json_data$orbits[json_data$treatment == 'cashewExceptOrder' & json_data$object == 'small']=NA
}
if (length(json_data$orbits[json_data$treatment == 'cashewExceptOrder' & json_data$object == 'big' & !is.na(json_data$orbits)])!=expectedRuns){
	json_data$orbits[json_data$treatment == 'cashewExceptOrder' & json_data$object == 'big']=NA
}
if (length(json_data$orbits[json_data$treatment == 'cashewExceptReduce' & json_data$object == 'small' & !is.na(json_data$orbits)])!=expectedRuns){
	json_data$orbits[json_data$treatment == 'cashewExceptReduce' & json_data$object == 'small']=NA
}
if (length(json_data$orbits[json_data$treatment == 'cashewExceptReduce' & json_data$object == 'big' & !is.na(json_data$orbits)])!=expectedRuns){
	json_data$orbits[json_data$treatment == 'cashewExceptReduce' & json_data$object == 'big']=NA
}
if (length(json_data$orbits[json_data$treatment == 'cashewExceptRemove' & json_data$object == 'small' & !is.na(json_data$orbits)])!=expectedRuns){
	json_data$orbits[json_data$treatment == 'cashewExceptRemove' & json_data$object == 'small']=NA
}
if (length(json_data$orbits[json_data$treatment == 'cashewExceptRemove' & json_data$object == 'big' & !is.na(json_data$orbits)])!=expectedRuns){
	json_data$orbits[json_data$treatment == 'cashewExceptRemove' & json_data$object == 'big']=NA
}
if (length(json_data$orbits[json_data$treatment == 'cashewExceptRenameAlph' & json_data$object == 'small' & !is.na(json_data$orbits)])!=expectedRuns){
	json_data$orbits[json_data$treatment == 'cashewExceptRenameAlph' & json_data$object == 'small']=NA
}
if (length(json_data$orbits[json_data$treatment == 'cashewExceptRenameAlph' & json_data$object == 'big' & !is.na(json_data$orbits)])!=expectedRuns){
	json_data$orbits[json_data$treatment == 'cashewExceptRenameAlph' & json_data$object == 'big']=NA
}
if (length(json_data$orbits[json_data$treatment == 'cashewExceptRenameVar' & json_data$object == 'small' & !is.na(json_data$orbits)])!=expectedRuns){
	json_data$orbits[json_data$treatment == 'cashewExceptRenameVar' & json_data$object == 'small']=NA
}
if (length(json_data$orbits[json_data$treatment == 'cashewExceptRenameVar' & json_data$object == 'big' & !is.na(json_data$orbits)])!=expectedRuns){
	json_data$orbits[json_data$treatment == 'cashewExceptRenameVar' & json_data$object == 'big']=NA
}
if (length(json_data$orbits[json_data$treatment == 'noCache' & json_data$object == 'small' & !is.na(json_data$orbits)])!=expectedRuns){
	json_data$orbits[json_data$treatment == 'noCache' & json_data$object == 'small']=NA
}
if (length(json_data$orbits[json_data$treatment == 'noCache' & json_data$object == 'big' & !is.na(json_data$orbits)])!=expectedRuns){
	json_data$orbits[json_data$treatment == 'noCache' & json_data$object == 'big']=NA
}

json_data$treatment = as.factor(json_data$treatment)
json_data$treatmentDescription = as.factor(json_data$treatmentDescription)
json_data$object = as.factor(json_data$object)		
json_data$objectLabel = as.factor(json_data$objectLabel)
data_summary <- function(data, varname, groupnames){
  require(plyr)
  summary_func <- function(x, col){
    c(mean = mean(x[[col]], na.rm=TRUE),
      sd = sd(x[[col]], na.rm=TRUE))
  }
  data_sum<-ddply(data, groupnames, .fun=summary_func,
                  varname)
  data_sum <- rename(data_sum, c("mean" = varname))
 return(data_sum)
}
breaks_continuous <- function(data, steps){
  diff<-max(data)-min(data) 
  step_size<-diff/steps
  step<-min(data)
  breaks<-c(step)
  for (i in 1:steps){
    step<-step+step_size
    breaks<-c(breaks,step)
  }
  return(breaks)
}  
breaks_log <- function(data, steps){
  diff<-max(data)/min(data) 
  base<-diff^(1/steps)
  exp<-log(min(data),base)
  breaks<-c(round(base^exp))
  for (i in 1:steps){
    exp<-exp+1
    breaks<-c(breaks,round(base^exp))
  }
  return(breaks)
}  
@
\section{Description}
Constraint Normalization and Parameterized Caching for Quantitative Program Analysis



\section{Overview}


<<overview_averageTime, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF<-data_summary(subset(json_data,(object=='small'|object=='big') & !is.na(averageTime)), varname="averageTime", groupnames=c("treatmentDescription", "objectLabel", "objectOrder"))
DF$objectLabel <- factor(DF$objectLabel, levels=c("SMC-Small","SMC-Big"))
		
		ggplot(DF, aes(x=objectLabel, y=averageTime, group=treatmentDescription, color=treatmentDescription)) + 
		    geom_errorbar(aes(ymin=averageTime-sd, ymax=averageTime+sd), width=.1, linetype=3) +
		    geom_line() + geom_point()+
		   scale_color_brewer(palette="Paired") +
		   theme_bw() +
		  scale_x_discrete(name = "Constraints")+
		  
		  scale_y_continuous(name = "Average time (s)")+
		  ggtitle("Average time Overview") + 
		  theme(legend.title = element_blank())	
@
<<overview_maxTime, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF<-data_summary(subset(json_data,(object=='small'|object=='big') & !is.na(maxTime)), varname="maxTime", groupnames=c("treatmentDescription", "objectLabel", "objectOrder"))
DF$objectLabel <- factor(DF$objectLabel, levels=c("SMC-Small","SMC-Big"))
		
		ggplot(DF, aes(x=objectLabel, y=maxTime, group=treatmentDescription, color=treatmentDescription)) + 
		    geom_errorbar(aes(ymin=maxTime-sd, ymax=maxTime+sd), width=.1, linetype=3) +
		    geom_line() + geom_point()+
		   scale_color_brewer(palette="Paired") +
		   theme_bw() +
		  scale_x_discrete(name = "Constraints")+
		  
		  scale_y_continuous(name = "Maximum time (s)")+
		  ggtitle("Maximum time Overview") + 
		  theme(legend.title = element_blank())	
@
<<overview_sumTime, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF<-data_summary(subset(json_data,(object=='small'|object=='big') & !is.na(sumTime)), varname="sumTime", groupnames=c("treatmentDescription", "objectLabel", "objectOrder"))
DF$objectLabel <- factor(DF$objectLabel, levels=c("SMC-Small","SMC-Big"))
		
		ggplot(DF, aes(x=objectLabel, y=sumTime, group=treatmentDescription, color=treatmentDescription)) + 
		    geom_errorbar(aes(ymin=sumTime-sd, ymax=sumTime+sd), width=.1, linetype=3) +
		    geom_line() + geom_point()+
		   scale_color_brewer(palette="Paired") +
		   theme_bw() +
		  scale_x_discrete(name = "Constraints")+
		  
		  scale_y_continuous(name = "Total time (s)")+
		  ggtitle("Total time Overview") + 
		  theme(legend.title = element_blank())	
@
<<overview_orbits, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF<-data_summary(subset(json_data,(object=='small'|object=='big') & !is.na(orbits)), varname="orbits", groupnames=c("treatmentDescription", "objectLabel", "objectOrder"))
DF$objectLabel <- factor(DF$objectLabel, levels=c("SMC-Small","SMC-Big"))
		
		ggplot(DF, aes(x=objectLabel, y=orbits, group=treatmentDescription, color=treatmentDescription)) + 
		    geom_errorbar(aes(ymin=orbits-sd, ymax=orbits+sd), width=.1, linetype=3) +
		    geom_line() + geom_point()+
		   scale_color_brewer(palette="Paired") +
		   theme_bw() +
		  scale_x_discrete(name = "Constraints")+
		  
		  scale_y_continuous(name = "Number of Orbits ")+
		  ggtitle("Number of Orbits Overview") + 
		  theme(legend.title = element_blank())	
@



\subsection{Objects Overview}
\subsubsection{Overview for SMC-Small}
<<small, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='cashew'|treatment=='cashewExceptOrder'|treatment=='cashewExceptReduce'|treatment=='cashewExceptRemove'|treatment=='cashewExceptRenameAlph'|treatment=='cashewExceptRenameVar'|treatment=='noCache')& object=='small')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$averageTime, DF$treatmentDescription, mean)))])   
boxplot_small_averageTime = ggplot(DF, aes(x =treatmentDescription , y = averageTime)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Transformations enabled")+
	ggtitle("Average time by Transformations enabled for SMC-Small") + 
	ylab("Average time (s)")   
	boxplot_small_averageTime
	
DF=subset(json_data,(treatment=='cashew'|treatment=='cashewExceptOrder'|treatment=='cashewExceptReduce'|treatment=='cashewExceptRemove'|treatment=='cashewExceptRenameAlph'|treatment=='cashewExceptRenameVar'|treatment=='noCache')& object=='small')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$maxTime, DF$treatmentDescription, mean)))])   
boxplot_small_maxTime = ggplot(DF, aes(x =treatmentDescription , y = maxTime)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Transformations enabled")+
	ggtitle("Maximum time by Transformations enabled for SMC-Small") + 
	ylab("Maximum time (s)")   
	boxplot_small_maxTime
	
DF=subset(json_data,(treatment=='cashew'|treatment=='cashewExceptOrder'|treatment=='cashewExceptReduce'|treatment=='cashewExceptRemove'|treatment=='cashewExceptRenameAlph'|treatment=='cashewExceptRenameVar'|treatment=='noCache')& object=='small')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$sumTime, DF$treatmentDescription, mean)))])   
boxplot_small_sumTime = ggplot(DF, aes(x =treatmentDescription , y = sumTime)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Transformations enabled")+
	ggtitle("Total time by Transformations enabled for SMC-Small") + 
	ylab("Total time (s)")   
	boxplot_small_sumTime
	
DF=subset(json_data,(treatment=='cashew'|treatment=='cashewExceptOrder'|treatment=='cashewExceptReduce'|treatment=='cashewExceptRemove'|treatment=='cashewExceptRenameAlph'|treatment=='cashewExceptRenameVar'|treatment=='noCache')& object=='small')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$orbits, DF$treatmentDescription, mean)))])   
boxplot_small_orbits = ggplot(DF, aes(x =treatmentDescription , y = orbits)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Transformations enabled")+
	ggtitle("Number of Orbits by Transformations enabled for SMC-Small") + 
	ylab("Number of Orbits ")   
	boxplot_small_orbits
	



@	
\subsubsection{Overview for SMC-Big}
<<big, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
DF=subset(json_data,(treatment=='cashew'|treatment=='cashewExceptOrder'|treatment=='cashewExceptReduce'|treatment=='cashewExceptRemove'|treatment=='cashewExceptRenameAlph'|treatment=='cashewExceptRenameVar'|treatment=='noCache')& object=='big')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$averageTime, DF$treatmentDescription, mean)))])   
boxplot_big_averageTime = ggplot(DF, aes(x =treatmentDescription , y = averageTime)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Transformations enabled")+
	ggtitle("Average time by Transformations enabled for SMC-Big") + 
	ylab("Average time (s)")   
	boxplot_big_averageTime
	
DF=subset(json_data,(treatment=='cashew'|treatment=='cashewExceptOrder'|treatment=='cashewExceptReduce'|treatment=='cashewExceptRemove'|treatment=='cashewExceptRenameAlph'|treatment=='cashewExceptRenameVar'|treatment=='noCache')& object=='big')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$maxTime, DF$treatmentDescription, mean)))])   
boxplot_big_maxTime = ggplot(DF, aes(x =treatmentDescription , y = maxTime)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Transformations enabled")+
	ggtitle("Maximum time by Transformations enabled for SMC-Big") + 
	ylab("Maximum time (s)")   
	boxplot_big_maxTime
	
DF=subset(json_data,(treatment=='cashew'|treatment=='cashewExceptOrder'|treatment=='cashewExceptReduce'|treatment=='cashewExceptRemove'|treatment=='cashewExceptRenameAlph'|treatment=='cashewExceptRenameVar'|treatment=='noCache')& object=='big')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$sumTime, DF$treatmentDescription, mean)))])   
boxplot_big_sumTime = ggplot(DF, aes(x =treatmentDescription , y = sumTime)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Transformations enabled")+
	ggtitle("Total time by Transformations enabled for SMC-Big") + 
	ylab("Total time (s)")   
	boxplot_big_sumTime
	
DF=subset(json_data,(treatment=='cashew'|treatment=='cashewExceptOrder'|treatment=='cashewExceptReduce'|treatment=='cashewExceptRemove'|treatment=='cashewExceptRenameAlph'|treatment=='cashewExceptRenameVar'|treatment=='noCache')& object=='big')
DF$treatmentDescription = ordered(DF$treatmentDescription, levels=levels(DF$treatmentDescription)[order(as.numeric(by(DF$orbits, DF$treatmentDescription, mean)))])   
boxplot_big_orbits = ggplot(DF, aes(x =treatmentDescription , y = orbits)) +
	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
	theme_bw() +    
	scale_x_discrete(name = "Transformations enabled")+
	ggtitle("Number of Orbits by Transformations enabled for SMC-Big") + 
	ylab("Number of Orbits ")   
	boxplot_big_orbits
	



@	

\section{Research Hypotheses}

\subsection{RH1: Average time for Cashew is equals than Average time for No Cache}

 <<RH1, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 
 result_RH1_objects=2
 result_RH1_less=0
 result_RH1_greater=0
 result_RH1_cashew=0
 result_RH1_noCache=0
 result_RH1_none=0
 result_RH1_inconclusive=0
 @
 
 <<overview_RH1, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 DF <- data_summary(subset(json_data, (object == 'small' |object == 'big' ) & (treatment == 'cashew' | treatment == 'noCache')), varname = "averageTime", groupnames = c("treatmentDescription", "objectLabel", "objectOrder"))
 DF$objectLabel <- factor(DF$objectLabel, levels=c("SMC-Small","SMC-Big"))
 		
 		ggplot(DF, aes(x=objectLabel, y=averageTime, group=treatmentDescription, color=treatmentDescription)) + 
 		    geom_errorbar(aes(ymin=averageTime-sd, ymax=averageTime+sd), width=.1, linetype=3) +
 		    geom_line() + geom_point()+
 		   scale_color_brewer(palette="Paired") +
 		   theme_bw() +
 		  scale_x_discrete(name = "Constraints")+
 		  
 		  scale_y_continuous(name = "Average time (s)")+
 		  ggtitle("Average time Overview") + 
 		  theme(legend.title = element_blank())	
 @
 	

\subsubsection{RH1.1: Object SMC-Small}

 \textbf{Average time for All transformations}
 <<RH1_cashew_small, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 averageTime_cashew_small = subset(json_data, treatment == 'cashew' & object == 'small' & !is.na(averageTime))$averageTime
 print(paste("Sample size: ", length(averageTime_cashew_small)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'small')$averageTime)
 
 if(length(averageTime_cashew_small) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'small'), "averageTime", min(subset(json_data, treatment == 'cashew'& object == 'small')$averageTime), max(subset(json_data, treatment == 'cashew' & object == 'small')$averageTime))
 
 	shap_cashew_small = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'small')$averageTime)
 	print(shap_cashew_small)
 	if(shap_cashew_small$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_small$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_small$p.value, sep = " "))
 	}
 }
 @
 \textbf{Average time for No cache}
 <<RH1_noCache_small, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 averageTime_noCache_small = subset(json_data, treatment == 'noCache' & object == 'small' & !is.na(averageTime))$averageTime
 print(paste("Sample size: ", length(averageTime_noCache_small)))					
 summary(subset(json_data, treatment == 'noCache' & object == 'small')$averageTime)
 
 if(length(averageTime_noCache_small) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'noCache' & object == 'small'), "averageTime", min(subset(json_data, treatment == 'noCache'& object == 'small')$averageTime), max(subset(json_data, treatment == 'noCache' & object == 'small')$averageTime))
 
 	shap_noCache_small = shapiro.test(subset(json_data, treatment == 'noCache' & object == 'small')$averageTime)
 	print(shap_noCache_small)
 	if(shap_noCache_small$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_noCache_small$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_noCache_small$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_small, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'noCache') & object == 'small')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$averageTime, DF$treatmentDescription, mean)))])
 boxplot_RH1_small = ggplot(DF, aes(x =treatmentDescription , y = averageTime)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Average time by Transformations enabled for SMC-Small") + 
 	ylab("Average time (s)")			   
 boxplot_RH1_small
 if(length(averageTime_cashew_small) == expectedRuns & length(averageTime_noCache_small) == expectedRuns){
 	result_RH1_small_tTest = FALSE
 	result_RH1_small_wTest = FALSE
 	
 	if(shap_cashew_small$p.value > alpha&shap_noCache_small$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'small')$averageTime, subset(json_data,treatment == 'noCache' & object == 'small')$averageTime)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'small')$averageTime, subset(json_data, treatment == 'noCache' & object == 'small')$averageTime, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_small_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(averageTime~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'noCache') & object == 'small')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_small_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_small_wTest = TRUE
 		}
 	}				
 }
if(length(averageTime_cashew_small) == expectedRuns & length(averageTime_noCache_small) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Average time for All transformations: ", mean(subset(json_data, treatment == 'cashew' & object == 'small')$averageTime)))
	 print(paste("Mean Average time for No cache: ", mean(subset(json_data, treatment == 'noCache' & object == 'small')$averageTime)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'small')$averageTime) - mean(subset(json_data, treatment == 'noCache' & object == 'small')$averageTime))))
	 if (result_RH1_small_tTest | result_RH1_small_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'small')$averageTime) > mean(subset(json_data, treatment == 'noCache' & object == 'small')$averageTime)){
	   	result_RH1_small = "All transformations \\textgreater{} No cache"
	   	result_object_RH1_small = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_small = "All transformations \\textless{} No cache"
	   	result_object_RH1_small = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_small = 5
	 	result_RH1_small = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'small')$averageTime) > mean(subset(json_data, treatment == 'noCache' & object == 'small')$averageTime)){
	 	cat(paste("Average time for All transformations is ", 100 * (abs(mean(subset(json_data, treatment == 'noCache' & object == 'small')$averageTime) - mean(subset(json_data, treatment == 'cashew' & object == 'small')$averageTime)) / mean(subset(json_data, treatment == 'noCache' & object == 'small')$averageTime)), "% greater than \n Average time for No cache"))				
	 }else{
	     cat(paste("Average time for No cache is ", 100 * (abs(mean(subset(json_data, treatment == 'noCache' & object == 'small')$averageTime) - mean(subset(json_data, treatment == 'cashew' & object == 'small')$averageTime)) / mean(subset(json_data, treatment == 'cashew' & object == 'small')$averageTime)), "% greater than \nAverage time for All transformations"))			    
	 }	
} 
if (length(averageTime_cashew_small) != expectedRuns & length(averageTime_noCache_small) != expectedRuns){
 	result_object_RH1_small = 4
	result_RH1_small = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(averageTime_cashew_small) == expectedRuns & length(averageTime_noCache_small) != expectedRuns){
	result_object_RH1_small = 2
	result_RH1_small = "All transformations"
	result_RH1_cashew = result_RH1_cashew + 1			
}
if (length(averageTime_cashew_small) != expectedRuns & length(averageTime_noCache_small) == expectedRuns){
	result_object_RH1_small = 3
	result_RH1_small = "No cache"
	result_RH1_noCache = result_RH1_noCache + 1			
}
@  


\subsubsection{RH1.2: Object SMC-Big}

 \textbf{Average time for All transformations}
 <<RH1_cashew_big, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 averageTime_cashew_big = subset(json_data, treatment == 'cashew' & object == 'big' & !is.na(averageTime))$averageTime
 print(paste("Sample size: ", length(averageTime_cashew_big)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'big')$averageTime)
 
 if(length(averageTime_cashew_big) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'big'), "averageTime", min(subset(json_data, treatment == 'cashew'& object == 'big')$averageTime), max(subset(json_data, treatment == 'cashew' & object == 'big')$averageTime))
 
 	shap_cashew_big = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'big')$averageTime)
 	print(shap_cashew_big)
 	if(shap_cashew_big$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_big$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_big$p.value, sep = " "))
 	}
 }
 @
 \textbf{Average time for No cache}
 <<RH1_noCache_big, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 averageTime_noCache_big = subset(json_data, treatment == 'noCache' & object == 'big' & !is.na(averageTime))$averageTime
 print(paste("Sample size: ", length(averageTime_noCache_big)))					
 summary(subset(json_data, treatment == 'noCache' & object == 'big')$averageTime)
 
 if(length(averageTime_noCache_big) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'noCache' & object == 'big'), "averageTime", min(subset(json_data, treatment == 'noCache'& object == 'big')$averageTime), max(subset(json_data, treatment == 'noCache' & object == 'big')$averageTime))
 
 	shap_noCache_big = shapiro.test(subset(json_data, treatment == 'noCache' & object == 'big')$averageTime)
 	print(shap_noCache_big)
 	if(shap_noCache_big$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_noCache_big$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_noCache_big$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH1_big, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'noCache') & object == 'big')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$averageTime, DF$treatmentDescription, mean)))])
 boxplot_RH1_big = ggplot(DF, aes(x =treatmentDescription , y = averageTime)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Average time by Transformations enabled for SMC-Big") + 
 	ylab("Average time (s)")			   
 boxplot_RH1_big
 if(length(averageTime_cashew_big) == expectedRuns & length(averageTime_noCache_big) == expectedRuns){
 	result_RH1_big_tTest = FALSE
 	result_RH1_big_wTest = FALSE
 	
 	if(shap_cashew_big$p.value > alpha&shap_noCache_big$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'big')$averageTime, subset(json_data,treatment == 'noCache' & object == 'big')$averageTime)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'big')$averageTime, subset(json_data, treatment == 'noCache' & object == 'big')$averageTime, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH1_big_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(averageTime~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'noCache') & object == 'big')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_big_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH1_big_wTest = TRUE
 		}
 	}				
 }
if(length(averageTime_cashew_big) == expectedRuns & length(averageTime_noCache_big) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Average time for All transformations: ", mean(subset(json_data, treatment == 'cashew' & object == 'big')$averageTime)))
	 print(paste("Mean Average time for No cache: ", mean(subset(json_data, treatment == 'noCache' & object == 'big')$averageTime)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'big')$averageTime) - mean(subset(json_data, treatment == 'noCache' & object == 'big')$averageTime))))
	 if (result_RH1_big_tTest | result_RH1_big_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'big')$averageTime) > mean(subset(json_data, treatment == 'noCache' & object == 'big')$averageTime)){
	   	result_RH1_big = "All transformations \\textgreater{} No cache"
	   	result_object_RH1_big = 1
	   	result_RH1_greater = result_RH1_greater + 1
	 	}else {
	   	result_RH1_big = "All transformations \\textless{} No cache"
	   	result_object_RH1_big = 0
	   	result_RH1_less = result_RH1_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH1_big = 5
	 	result_RH1_big = "Inconclusive"
	 	result_RH1_inconclusive = result_RH1_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'big')$averageTime) > mean(subset(json_data, treatment == 'noCache' & object == 'big')$averageTime)){
	 	cat(paste("Average time for All transformations is ", 100 * (abs(mean(subset(json_data, treatment == 'noCache' & object == 'big')$averageTime) - mean(subset(json_data, treatment == 'cashew' & object == 'big')$averageTime)) / mean(subset(json_data, treatment == 'noCache' & object == 'big')$averageTime)), "% greater than \n Average time for No cache"))				
	 }else{
	     cat(paste("Average time for No cache is ", 100 * (abs(mean(subset(json_data, treatment == 'noCache' & object == 'big')$averageTime) - mean(subset(json_data, treatment == 'cashew' & object == 'big')$averageTime)) / mean(subset(json_data, treatment == 'cashew' & object == 'big')$averageTime)), "% greater than \nAverage time for All transformations"))			    
	 }	
} 
if (length(averageTime_cashew_big) != expectedRuns & length(averageTime_noCache_big) != expectedRuns){
 	result_object_RH1_big = 4
	result_RH1_big = "None"
	result_RH1_none = result_RH1_none + 1
}
if (length(averageTime_cashew_big) == expectedRuns & length(averageTime_noCache_big) != expectedRuns){
	result_object_RH1_big = 2
	result_RH1_big = "All transformations"
	result_RH1_cashew = result_RH1_cashew + 1			
}
if (length(averageTime_cashew_big) != expectedRuns & length(averageTime_noCache_big) == expectedRuns){
	result_object_RH1_big = 3
	result_RH1_big = "No cache"
	result_RH1_noCache = result_RH1_noCache + 1			
}
@  


 
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH1_result = list(hypothesis = "RH1", results = c(result_RH1_less / result_RH1_objects, result_RH1_greater / result_RH1_objects, result_RH1_cashew / result_RH1_objects, result_RH1_noCache / result_RH1_objects, result_RH1_none / result_RH1_objects, result_RH1_inconclusive / result_RH1_objects), objectResults = list( list(object = 'small', result = result_object_RH1_small),  list(object = 'big', result = result_object_RH1_big) ))	
	@
	
	\subsubsection{RH1 Results: Average time All transformations = No cache}
	
	
	\begin{table}[H]
	\centering
	\caption{RH1 Results per Object}
	\begin{tabular}{ll}
	\textbf{SMC-Small} & \Sexpr{result_RH1_small} \\
	\textbf{SMC-Big} & \Sexpr{result_RH1_big} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH1 Results Summary}
	\begin{tabular}{ll}
	\textbf{All transformations \textless{} No cache:}& \Sexpr{100 * result_RH1_less / result_RH1_objects}\% \\
	\textbf{All transformations \textgreater{} No cache:}& \Sexpr{100 * result_RH1_greater / result_RH1_objects}\%\\
	\textbf{All transformations:} & \Sexpr{100 * result_RH1_cashew / result_RH1_objects}\%\\
	\textbf{No cache:} & \Sexpr{100 * result_RH1_noCache / result_RH1_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH1_none / result_RH1_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH1_inconclusive / result_RH1_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	



\subsection{RH2: Maximum time for Cashew is equals than Average time for No Cache}

 <<RH2, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 
 result_RH2_objects=2
 result_RH2_less=0
 result_RH2_greater=0
 result_RH2_cashew=0
 result_RH2_noCache=0
 result_RH2_none=0
 result_RH2_inconclusive=0
 @
 
 <<overview_RH2, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 DF <- data_summary(subset(json_data, (object == 'small' |object == 'big' ) & (treatment == 'cashew' | treatment == 'noCache')), varname = "maxTime", groupnames = c("treatmentDescription", "objectLabel", "objectOrder"))
 DF$objectLabel <- factor(DF$objectLabel, levels=c("SMC-Small","SMC-Big"))
 		
 		ggplot(DF, aes(x=objectLabel, y=maxTime, group=treatmentDescription, color=treatmentDescription)) + 
 		    geom_errorbar(aes(ymin=maxTime-sd, ymax=maxTime+sd), width=.1, linetype=3) +
 		    geom_line() + geom_point()+
 		   scale_color_brewer(palette="Paired") +
 		   theme_bw() +
 		  scale_x_discrete(name = "Constraints")+
 		  
 		  scale_y_continuous(name = "Maximum time (s)")+
 		  ggtitle("Maximum time Overview") + 
 		  theme(legend.title = element_blank())	
 @
 	

\subsubsection{RH2.1: Object SMC-Small}

 \textbf{Maximum time for All transformations}
 <<RH2_cashew_small, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 maxTime_cashew_small = subset(json_data, treatment == 'cashew' & object == 'small' & !is.na(maxTime))$maxTime
 print(paste("Sample size: ", length(maxTime_cashew_small)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'small')$maxTime)
 
 if(length(maxTime_cashew_small) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'small'), "maxTime", min(subset(json_data, treatment == 'cashew'& object == 'small')$maxTime), max(subset(json_data, treatment == 'cashew' & object == 'small')$maxTime))
 
 	shap_cashew_small = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'small')$maxTime)
 	print(shap_cashew_small)
 	if(shap_cashew_small$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_small$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_small$p.value, sep = " "))
 	}
 }
 @
 \textbf{Maximum time for No cache}
 <<RH2_noCache_small, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 maxTime_noCache_small = subset(json_data, treatment == 'noCache' & object == 'small' & !is.na(maxTime))$maxTime
 print(paste("Sample size: ", length(maxTime_noCache_small)))					
 summary(subset(json_data, treatment == 'noCache' & object == 'small')$maxTime)
 
 if(length(maxTime_noCache_small) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'noCache' & object == 'small'), "maxTime", min(subset(json_data, treatment == 'noCache'& object == 'small')$maxTime), max(subset(json_data, treatment == 'noCache' & object == 'small')$maxTime))
 
 	shap_noCache_small = shapiro.test(subset(json_data, treatment == 'noCache' & object == 'small')$maxTime)
 	print(shap_noCache_small)
 	if(shap_noCache_small$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_noCache_small$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_noCache_small$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_small, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'noCache') & object == 'small')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$maxTime, DF$treatmentDescription, mean)))])
 boxplot_RH2_small = ggplot(DF, aes(x =treatmentDescription , y = maxTime)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Maximum time by Transformations enabled for SMC-Small") + 
 	ylab("Maximum time (s)")			   
 boxplot_RH2_small
 if(length(maxTime_cashew_small) == expectedRuns & length(maxTime_noCache_small) == expectedRuns){
 	result_RH2_small_tTest = FALSE
 	result_RH2_small_wTest = FALSE
 	
 	if(shap_cashew_small$p.value > alpha&shap_noCache_small$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'small')$maxTime, subset(json_data,treatment == 'noCache' & object == 'small')$maxTime)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'small')$maxTime, subset(json_data, treatment == 'noCache' & object == 'small')$maxTime, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_small_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(maxTime~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'noCache') & object == 'small')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_small_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_small_wTest = TRUE
 		}
 	}				
 }
if(length(maxTime_cashew_small) == expectedRuns & length(maxTime_noCache_small) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Maximum time for All transformations: ", mean(subset(json_data, treatment == 'cashew' & object == 'small')$maxTime)))
	 print(paste("Mean Maximum time for No cache: ", mean(subset(json_data, treatment == 'noCache' & object == 'small')$maxTime)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'small')$maxTime) - mean(subset(json_data, treatment == 'noCache' & object == 'small')$maxTime))))
	 if (result_RH2_small_tTest | result_RH2_small_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'small')$maxTime) > mean(subset(json_data, treatment == 'noCache' & object == 'small')$maxTime)){
	   	result_RH2_small = "All transformations \\textgreater{} No cache"
	   	result_object_RH2_small = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_small = "All transformations \\textless{} No cache"
	   	result_object_RH2_small = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_small = 5
	 	result_RH2_small = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'small')$maxTime) > mean(subset(json_data, treatment == 'noCache' & object == 'small')$maxTime)){
	 	cat(paste("Maximum time for All transformations is ", 100 * (abs(mean(subset(json_data, treatment == 'noCache' & object == 'small')$maxTime) - mean(subset(json_data, treatment == 'cashew' & object == 'small')$maxTime)) / mean(subset(json_data, treatment == 'noCache' & object == 'small')$maxTime)), "% greater than \n Maximum time for No cache"))				
	 }else{
	     cat(paste("Maximum time for No cache is ", 100 * (abs(mean(subset(json_data, treatment == 'noCache' & object == 'small')$maxTime) - mean(subset(json_data, treatment == 'cashew' & object == 'small')$maxTime)) / mean(subset(json_data, treatment == 'cashew' & object == 'small')$maxTime)), "% greater than \nMaximum time for All transformations"))			    
	 }	
} 
if (length(maxTime_cashew_small) != expectedRuns & length(maxTime_noCache_small) != expectedRuns){
 	result_object_RH2_small = 4
	result_RH2_small = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(maxTime_cashew_small) == expectedRuns & length(maxTime_noCache_small) != expectedRuns){
	result_object_RH2_small = 2
	result_RH2_small = "All transformations"
	result_RH2_cashew = result_RH2_cashew + 1			
}
if (length(maxTime_cashew_small) != expectedRuns & length(maxTime_noCache_small) == expectedRuns){
	result_object_RH2_small = 3
	result_RH2_small = "No cache"
	result_RH2_noCache = result_RH2_noCache + 1			
}
@  


\subsubsection{RH2.2: Object SMC-Big}

 \textbf{Maximum time for All transformations}
 <<RH2_cashew_big, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 maxTime_cashew_big = subset(json_data, treatment == 'cashew' & object == 'big' & !is.na(maxTime))$maxTime
 print(paste("Sample size: ", length(maxTime_cashew_big)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'big')$maxTime)
 
 if(length(maxTime_cashew_big) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'big'), "maxTime", min(subset(json_data, treatment == 'cashew'& object == 'big')$maxTime), max(subset(json_data, treatment == 'cashew' & object == 'big')$maxTime))
 
 	shap_cashew_big = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'big')$maxTime)
 	print(shap_cashew_big)
 	if(shap_cashew_big$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_big$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_big$p.value, sep = " "))
 	}
 }
 @
 \textbf{Maximum time for No cache}
 <<RH2_noCache_big, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 maxTime_noCache_big = subset(json_data, treatment == 'noCache' & object == 'big' & !is.na(maxTime))$maxTime
 print(paste("Sample size: ", length(maxTime_noCache_big)))					
 summary(subset(json_data, treatment == 'noCache' & object == 'big')$maxTime)
 
 if(length(maxTime_noCache_big) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'noCache' & object == 'big'), "maxTime", min(subset(json_data, treatment == 'noCache'& object == 'big')$maxTime), max(subset(json_data, treatment == 'noCache' & object == 'big')$maxTime))
 
 	shap_noCache_big = shapiro.test(subset(json_data, treatment == 'noCache' & object == 'big')$maxTime)
 	print(shap_noCache_big)
 	if(shap_noCache_big$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_noCache_big$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_noCache_big$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH2_big, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'noCache') & object == 'big')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$maxTime, DF$treatmentDescription, mean)))])
 boxplot_RH2_big = ggplot(DF, aes(x =treatmentDescription , y = maxTime)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Maximum time by Transformations enabled for SMC-Big") + 
 	ylab("Maximum time (s)")			   
 boxplot_RH2_big
 if(length(maxTime_cashew_big) == expectedRuns & length(maxTime_noCache_big) == expectedRuns){
 	result_RH2_big_tTest = FALSE
 	result_RH2_big_wTest = FALSE
 	
 	if(shap_cashew_big$p.value > alpha&shap_noCache_big$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'big')$maxTime, subset(json_data,treatment == 'noCache' & object == 'big')$maxTime)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'big')$maxTime, subset(json_data, treatment == 'noCache' & object == 'big')$maxTime, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH2_big_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(maxTime~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'noCache') & object == 'big')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_big_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH2_big_wTest = TRUE
 		}
 	}				
 }
if(length(maxTime_cashew_big) == expectedRuns & length(maxTime_noCache_big) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Maximum time for All transformations: ", mean(subset(json_data, treatment == 'cashew' & object == 'big')$maxTime)))
	 print(paste("Mean Maximum time for No cache: ", mean(subset(json_data, treatment == 'noCache' & object == 'big')$maxTime)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'big')$maxTime) - mean(subset(json_data, treatment == 'noCache' & object == 'big')$maxTime))))
	 if (result_RH2_big_tTest | result_RH2_big_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'big')$maxTime) > mean(subset(json_data, treatment == 'noCache' & object == 'big')$maxTime)){
	   	result_RH2_big = "All transformations \\textgreater{} No cache"
	   	result_object_RH2_big = 1
	   	result_RH2_greater = result_RH2_greater + 1
	 	}else {
	   	result_RH2_big = "All transformations \\textless{} No cache"
	   	result_object_RH2_big = 0
	   	result_RH2_less = result_RH2_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH2_big = 5
	 	result_RH2_big = "Inconclusive"
	 	result_RH2_inconclusive = result_RH2_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'big')$maxTime) > mean(subset(json_data, treatment == 'noCache' & object == 'big')$maxTime)){
	 	cat(paste("Maximum time for All transformations is ", 100 * (abs(mean(subset(json_data, treatment == 'noCache' & object == 'big')$maxTime) - mean(subset(json_data, treatment == 'cashew' & object == 'big')$maxTime)) / mean(subset(json_data, treatment == 'noCache' & object == 'big')$maxTime)), "% greater than \n Maximum time for No cache"))				
	 }else{
	     cat(paste("Maximum time for No cache is ", 100 * (abs(mean(subset(json_data, treatment == 'noCache' & object == 'big')$maxTime) - mean(subset(json_data, treatment == 'cashew' & object == 'big')$maxTime)) / mean(subset(json_data, treatment == 'cashew' & object == 'big')$maxTime)), "% greater than \nMaximum time for All transformations"))			    
	 }	
} 
if (length(maxTime_cashew_big) != expectedRuns & length(maxTime_noCache_big) != expectedRuns){
 	result_object_RH2_big = 4
	result_RH2_big = "None"
	result_RH2_none = result_RH2_none + 1
}
if (length(maxTime_cashew_big) == expectedRuns & length(maxTime_noCache_big) != expectedRuns){
	result_object_RH2_big = 2
	result_RH2_big = "All transformations"
	result_RH2_cashew = result_RH2_cashew + 1			
}
if (length(maxTime_cashew_big) != expectedRuns & length(maxTime_noCache_big) == expectedRuns){
	result_object_RH2_big = 3
	result_RH2_big = "No cache"
	result_RH2_noCache = result_RH2_noCache + 1			
}
@  


 
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH2_result = list(hypothesis = "RH2", results = c(result_RH2_less / result_RH2_objects, result_RH2_greater / result_RH2_objects, result_RH2_cashew / result_RH2_objects, result_RH2_noCache / result_RH2_objects, result_RH2_none / result_RH2_objects, result_RH2_inconclusive / result_RH2_objects), objectResults = list( list(object = 'small', result = result_object_RH2_small),  list(object = 'big', result = result_object_RH2_big) ))	
	@
	
	\subsubsection{RH2 Results: Maximum time All transformations = No cache}
	
	
	\begin{table}[H]
	\centering
	\caption{RH2 Results per Object}
	\begin{tabular}{ll}
	\textbf{SMC-Small} & \Sexpr{result_RH2_small} \\
	\textbf{SMC-Big} & \Sexpr{result_RH2_big} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH2 Results Summary}
	\begin{tabular}{ll}
	\textbf{All transformations \textless{} No cache:}& \Sexpr{100 * result_RH2_less / result_RH2_objects}\% \\
	\textbf{All transformations \textgreater{} No cache:}& \Sexpr{100 * result_RH2_greater / result_RH2_objects}\%\\
	\textbf{All transformations:} & \Sexpr{100 * result_RH2_cashew / result_RH2_objects}\%\\
	\textbf{No cache:} & \Sexpr{100 * result_RH2_noCache / result_RH2_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH2_none / result_RH2_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH2_inconclusive / result_RH2_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	



\subsection{RH3: Total time for Cashew is equals than Average time for No Cache}

 <<RH3, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 
 result_RH3_objects=2
 result_RH3_less=0
 result_RH3_greater=0
 result_RH3_cashew=0
 result_RH3_noCache=0
 result_RH3_none=0
 result_RH3_inconclusive=0
 @
 
 <<overview_RH3, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 DF <- data_summary(subset(json_data, (object == 'small' |object == 'big' ) & (treatment == 'cashew' | treatment == 'noCache')), varname = "sumTime", groupnames = c("treatmentDescription", "objectLabel", "objectOrder"))
 DF$objectLabel <- factor(DF$objectLabel, levels=c("SMC-Small","SMC-Big"))
 		
 		ggplot(DF, aes(x=objectLabel, y=sumTime, group=treatmentDescription, color=treatmentDescription)) + 
 		    geom_errorbar(aes(ymin=sumTime-sd, ymax=sumTime+sd), width=.1, linetype=3) +
 		    geom_line() + geom_point()+
 		   scale_color_brewer(palette="Paired") +
 		   theme_bw() +
 		  scale_x_discrete(name = "Constraints")+
 		  
 		  scale_y_continuous(name = "Total time (s)")+
 		  ggtitle("Total time Overview") + 
 		  theme(legend.title = element_blank())	
 @
 	

\subsubsection{RH3.1: Object SMC-Small}

 \textbf{Total time for All transformations}
 <<RH3_cashew_small, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 sumTime_cashew_small = subset(json_data, treatment == 'cashew' & object == 'small' & !is.na(sumTime))$sumTime
 print(paste("Sample size: ", length(sumTime_cashew_small)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'small')$sumTime)
 
 if(length(sumTime_cashew_small) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'small'), "sumTime", min(subset(json_data, treatment == 'cashew'& object == 'small')$sumTime), max(subset(json_data, treatment == 'cashew' & object == 'small')$sumTime))
 
 	shap_cashew_small = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'small')$sumTime)
 	print(shap_cashew_small)
 	if(shap_cashew_small$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_small$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_small$p.value, sep = " "))
 	}
 }
 @
 \textbf{Total time for No cache}
 <<RH3_noCache_small, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 sumTime_noCache_small = subset(json_data, treatment == 'noCache' & object == 'small' & !is.na(sumTime))$sumTime
 print(paste("Sample size: ", length(sumTime_noCache_small)))					
 summary(subset(json_data, treatment == 'noCache' & object == 'small')$sumTime)
 
 if(length(sumTime_noCache_small) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'noCache' & object == 'small'), "sumTime", min(subset(json_data, treatment == 'noCache'& object == 'small')$sumTime), max(subset(json_data, treatment == 'noCache' & object == 'small')$sumTime))
 
 	shap_noCache_small = shapiro.test(subset(json_data, treatment == 'noCache' & object == 'small')$sumTime)
 	print(shap_noCache_small)
 	if(shap_noCache_small$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_noCache_small$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_noCache_small$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_small, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'noCache') & object == 'small')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$sumTime, DF$treatmentDescription, mean)))])
 boxplot_RH3_small = ggplot(DF, aes(x =treatmentDescription , y = sumTime)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Total time by Transformations enabled for SMC-Small") + 
 	ylab("Total time (s)")			   
 boxplot_RH3_small
 if(length(sumTime_cashew_small) == expectedRuns & length(sumTime_noCache_small) == expectedRuns){
 	result_RH3_small_tTest = FALSE
 	result_RH3_small_wTest = FALSE
 	
 	if(shap_cashew_small$p.value > alpha&shap_noCache_small$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'small')$sumTime, subset(json_data,treatment == 'noCache' & object == 'small')$sumTime)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'small')$sumTime, subset(json_data, treatment == 'noCache' & object == 'small')$sumTime, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_small_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(sumTime~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'noCache') & object == 'small')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_small_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_small_wTest = TRUE
 		}
 	}				
 }
if(length(sumTime_cashew_small) == expectedRuns & length(sumTime_noCache_small) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Total time for All transformations: ", mean(subset(json_data, treatment == 'cashew' & object == 'small')$sumTime)))
	 print(paste("Mean Total time for No cache: ", mean(subset(json_data, treatment == 'noCache' & object == 'small')$sumTime)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'small')$sumTime) - mean(subset(json_data, treatment == 'noCache' & object == 'small')$sumTime))))
	 if (result_RH3_small_tTest | result_RH3_small_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'small')$sumTime) > mean(subset(json_data, treatment == 'noCache' & object == 'small')$sumTime)){
	   	result_RH3_small = "All transformations \\textgreater{} No cache"
	   	result_object_RH3_small = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_small = "All transformations \\textless{} No cache"
	   	result_object_RH3_small = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_small = 5
	 	result_RH3_small = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'small')$sumTime) > mean(subset(json_data, treatment == 'noCache' & object == 'small')$sumTime)){
	 	cat(paste("Total time for All transformations is ", 100 * (abs(mean(subset(json_data, treatment == 'noCache' & object == 'small')$sumTime) - mean(subset(json_data, treatment == 'cashew' & object == 'small')$sumTime)) / mean(subset(json_data, treatment == 'noCache' & object == 'small')$sumTime)), "% greater than \n Total time for No cache"))				
	 }else{
	     cat(paste("Total time for No cache is ", 100 * (abs(mean(subset(json_data, treatment == 'noCache' & object == 'small')$sumTime) - mean(subset(json_data, treatment == 'cashew' & object == 'small')$sumTime)) / mean(subset(json_data, treatment == 'cashew' & object == 'small')$sumTime)), "% greater than \nTotal time for All transformations"))			    
	 }	
} 
if (length(sumTime_cashew_small) != expectedRuns & length(sumTime_noCache_small) != expectedRuns){
 	result_object_RH3_small = 4
	result_RH3_small = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(sumTime_cashew_small) == expectedRuns & length(sumTime_noCache_small) != expectedRuns){
	result_object_RH3_small = 2
	result_RH3_small = "All transformations"
	result_RH3_cashew = result_RH3_cashew + 1			
}
if (length(sumTime_cashew_small) != expectedRuns & length(sumTime_noCache_small) == expectedRuns){
	result_object_RH3_small = 3
	result_RH3_small = "No cache"
	result_RH3_noCache = result_RH3_noCache + 1			
}
@  


\subsubsection{RH3.2: Object SMC-Big}

 \textbf{Total time for All transformations}
 <<RH3_cashew_big, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 sumTime_cashew_big = subset(json_data, treatment == 'cashew' & object == 'big' & !is.na(sumTime))$sumTime
 print(paste("Sample size: ", length(sumTime_cashew_big)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'big')$sumTime)
 
 if(length(sumTime_cashew_big) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'big'), "sumTime", min(subset(json_data, treatment == 'cashew'& object == 'big')$sumTime), max(subset(json_data, treatment == 'cashew' & object == 'big')$sumTime))
 
 	shap_cashew_big = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'big')$sumTime)
 	print(shap_cashew_big)
 	if(shap_cashew_big$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_big$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_big$p.value, sep = " "))
 	}
 }
 @
 \textbf{Total time for No cache}
 <<RH3_noCache_big, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 sumTime_noCache_big = subset(json_data, treatment == 'noCache' & object == 'big' & !is.na(sumTime))$sumTime
 print(paste("Sample size: ", length(sumTime_noCache_big)))					
 summary(subset(json_data, treatment == 'noCache' & object == 'big')$sumTime)
 
 if(length(sumTime_noCache_big) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'noCache' & object == 'big'), "sumTime", min(subset(json_data, treatment == 'noCache'& object == 'big')$sumTime), max(subset(json_data, treatment == 'noCache' & object == 'big')$sumTime))
 
 	shap_noCache_big = shapiro.test(subset(json_data, treatment == 'noCache' & object == 'big')$sumTime)
 	print(shap_noCache_big)
 	if(shap_noCache_big$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_noCache_big$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_noCache_big$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH3_big, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'noCache') & object == 'big')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$sumTime, DF$treatmentDescription, mean)))])
 boxplot_RH3_big = ggplot(DF, aes(x =treatmentDescription , y = sumTime)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Total time by Transformations enabled for SMC-Big") + 
 	ylab("Total time (s)")			   
 boxplot_RH3_big
 if(length(sumTime_cashew_big) == expectedRuns & length(sumTime_noCache_big) == expectedRuns){
 	result_RH3_big_tTest = FALSE
 	result_RH3_big_wTest = FALSE
 	
 	if(shap_cashew_big$p.value > alpha&shap_noCache_big$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'big')$sumTime, subset(json_data,treatment == 'noCache' & object == 'big')$sumTime)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'big')$sumTime, subset(json_data, treatment == 'noCache' & object == 'big')$sumTime, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH3_big_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(sumTime~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'noCache') & object == 'big')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_big_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH3_big_wTest = TRUE
 		}
 	}				
 }
if(length(sumTime_cashew_big) == expectedRuns & length(sumTime_noCache_big) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Total time for All transformations: ", mean(subset(json_data, treatment == 'cashew' & object == 'big')$sumTime)))
	 print(paste("Mean Total time for No cache: ", mean(subset(json_data, treatment == 'noCache' & object == 'big')$sumTime)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'big')$sumTime) - mean(subset(json_data, treatment == 'noCache' & object == 'big')$sumTime))))
	 if (result_RH3_big_tTest | result_RH3_big_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'big')$sumTime) > mean(subset(json_data, treatment == 'noCache' & object == 'big')$sumTime)){
	   	result_RH3_big = "All transformations \\textgreater{} No cache"
	   	result_object_RH3_big = 1
	   	result_RH3_greater = result_RH3_greater + 1
	 	}else {
	   	result_RH3_big = "All transformations \\textless{} No cache"
	   	result_object_RH3_big = 0
	   	result_RH3_less = result_RH3_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH3_big = 5
	 	result_RH3_big = "Inconclusive"
	 	result_RH3_inconclusive = result_RH3_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'big')$sumTime) > mean(subset(json_data, treatment == 'noCache' & object == 'big')$sumTime)){
	 	cat(paste("Total time for All transformations is ", 100 * (abs(mean(subset(json_data, treatment == 'noCache' & object == 'big')$sumTime) - mean(subset(json_data, treatment == 'cashew' & object == 'big')$sumTime)) / mean(subset(json_data, treatment == 'noCache' & object == 'big')$sumTime)), "% greater than \n Total time for No cache"))				
	 }else{
	     cat(paste("Total time for No cache is ", 100 * (abs(mean(subset(json_data, treatment == 'noCache' & object == 'big')$sumTime) - mean(subset(json_data, treatment == 'cashew' & object == 'big')$sumTime)) / mean(subset(json_data, treatment == 'cashew' & object == 'big')$sumTime)), "% greater than \nTotal time for All transformations"))			    
	 }	
} 
if (length(sumTime_cashew_big) != expectedRuns & length(sumTime_noCache_big) != expectedRuns){
 	result_object_RH3_big = 4
	result_RH3_big = "None"
	result_RH3_none = result_RH3_none + 1
}
if (length(sumTime_cashew_big) == expectedRuns & length(sumTime_noCache_big) != expectedRuns){
	result_object_RH3_big = 2
	result_RH3_big = "All transformations"
	result_RH3_cashew = result_RH3_cashew + 1			
}
if (length(sumTime_cashew_big) != expectedRuns & length(sumTime_noCache_big) == expectedRuns){
	result_object_RH3_big = 3
	result_RH3_big = "No cache"
	result_RH3_noCache = result_RH3_noCache + 1			
}
@  


 
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH3_result = list(hypothesis = "RH3", results = c(result_RH3_less / result_RH3_objects, result_RH3_greater / result_RH3_objects, result_RH3_cashew / result_RH3_objects, result_RH3_noCache / result_RH3_objects, result_RH3_none / result_RH3_objects, result_RH3_inconclusive / result_RH3_objects), objectResults = list( list(object = 'small', result = result_object_RH3_small),  list(object = 'big', result = result_object_RH3_big) ))	
	@
	
	\subsubsection{RH3 Results: Total time All transformations = No cache}
	
	
	\begin{table}[H]
	\centering
	\caption{RH3 Results per Object}
	\begin{tabular}{ll}
	\textbf{SMC-Small} & \Sexpr{result_RH3_small} \\
	\textbf{SMC-Big} & \Sexpr{result_RH3_big} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH3 Results Summary}
	\begin{tabular}{ll}
	\textbf{All transformations \textless{} No cache:}& \Sexpr{100 * result_RH3_less / result_RH3_objects}\% \\
	\textbf{All transformations \textgreater{} No cache:}& \Sexpr{100 * result_RH3_greater / result_RH3_objects}\%\\
	\textbf{All transformations:} & \Sexpr{100 * result_RH3_cashew / result_RH3_objects}\%\\
	\textbf{No cache:} & \Sexpr{100 * result_RH3_noCache / result_RH3_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH3_none / result_RH3_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH3_inconclusive / result_RH3_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	



\subsection{RH4: Number of Orbits for Cashew is equals than the Number of Orbits for No Cache}

 <<RH4, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 
 result_RH4_objects=2
 result_RH4_less=0
 result_RH4_greater=0
 result_RH4_cashew=0
 result_RH4_noCache=0
 result_RH4_none=0
 result_RH4_inconclusive=0
 @
 
 <<overview_RH4, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 DF <- data_summary(subset(json_data, (object == 'small' |object == 'big' ) & (treatment == 'cashew' | treatment == 'noCache')), varname = "orbits", groupnames = c("treatmentDescription", "objectLabel", "objectOrder"))
 DF$objectLabel <- factor(DF$objectLabel, levels=c("SMC-Small","SMC-Big"))
 		
 		ggplot(DF, aes(x=objectLabel, y=orbits, group=treatmentDescription, color=treatmentDescription)) + 
 		    geom_errorbar(aes(ymin=orbits-sd, ymax=orbits+sd), width=.1, linetype=3) +
 		    geom_line() + geom_point()+
 		   scale_color_brewer(palette="Paired") +
 		   theme_bw() +
 		  scale_x_discrete(name = "Constraints")+
 		  
 		  scale_y_continuous(name = "Number of Orbits ")+
 		  ggtitle("Number of Orbits Overview") + 
 		  theme(legend.title = element_blank())	
 @
 	

\subsubsection{RH4.1: Object SMC-Small}

 \textbf{Number of Orbits for All transformations}
 <<RH4_cashew_small, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 orbits_cashew_small = subset(json_data, treatment == 'cashew' & object == 'small' & !is.na(orbits))$orbits
 print(paste("Sample size: ", length(orbits_cashew_small)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)
 
 if(length(orbits_cashew_small) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'small'), "orbits", min(subset(json_data, treatment == 'cashew'& object == 'small')$orbits), max(subset(json_data, treatment == 'cashew' & object == 'small')$orbits))
 
 	shap_cashew_small = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)
 	print(shap_cashew_small)
 	if(shap_cashew_small$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_small$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_small$p.value, sep = " "))
 	}
 }
 @
 \textbf{Number of Orbits for No cache}
 <<RH4_noCache_small, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 orbits_noCache_small = subset(json_data, treatment == 'noCache' & object == 'small' & !is.na(orbits))$orbits
 print(paste("Sample size: ", length(orbits_noCache_small)))					
 summary(subset(json_data, treatment == 'noCache' & object == 'small')$orbits)
 
 if(length(orbits_noCache_small) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'noCache' & object == 'small'), "orbits", min(subset(json_data, treatment == 'noCache'& object == 'small')$orbits), max(subset(json_data, treatment == 'noCache' & object == 'small')$orbits))
 
 	shap_noCache_small = shapiro.test(subset(json_data, treatment == 'noCache' & object == 'small')$orbits)
 	print(shap_noCache_small)
 	if(shap_noCache_small$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_noCache_small$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_noCache_small$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_small, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'noCache') & object == 'small')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$orbits, DF$treatmentDescription, mean)))])
 boxplot_RH4_small = ggplot(DF, aes(x =treatmentDescription , y = orbits)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Number of Orbits by Transformations enabled for SMC-Small") + 
 	ylab("Number of Orbits ")			   
 boxplot_RH4_small
 if(length(orbits_cashew_small) == expectedRuns & length(orbits_noCache_small) == expectedRuns){
 	result_RH4_small_tTest = FALSE
 	result_RH4_small_wTest = FALSE
 	
 	if(shap_cashew_small$p.value > alpha&shap_noCache_small$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'small')$orbits, subset(json_data,treatment == 'noCache' & object == 'small')$orbits)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'small')$orbits, subset(json_data, treatment == 'noCache' & object == 'small')$orbits, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_small_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(orbits~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'noCache') & object == 'small')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_small_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_small_wTest = TRUE
 		}
 	}				
 }
if(length(orbits_cashew_small) == expectedRuns & length(orbits_noCache_small) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Number of Orbits for All transformations: ", mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)))
	 print(paste("Mean Number of Orbits for No cache: ", mean(subset(json_data, treatment == 'noCache' & object == 'small')$orbits)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits) - mean(subset(json_data, treatment == 'noCache' & object == 'small')$orbits))))
	 if (result_RH4_small_tTest | result_RH4_small_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits) > mean(subset(json_data, treatment == 'noCache' & object == 'small')$orbits)){
	   	result_RH4_small = "All transformations \\textgreater{} No cache"
	   	result_object_RH4_small = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_small = "All transformations \\textless{} No cache"
	   	result_object_RH4_small = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_small = 5
	 	result_RH4_small = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'small')$orbits) > mean(subset(json_data, treatment == 'noCache' & object == 'small')$orbits)){
	 	cat(paste("Number of Orbits for All transformations is ", 100 * (abs(mean(subset(json_data, treatment == 'noCache' & object == 'small')$orbits) - mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)) / mean(subset(json_data, treatment == 'noCache' & object == 'small')$orbits)), "% greater than \n Number of Orbits for No cache"))				
	 }else{
	     cat(paste("Number of Orbits for No cache is ", 100 * (abs(mean(subset(json_data, treatment == 'noCache' & object == 'small')$orbits) - mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)) / mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)), "% greater than \nNumber of Orbits for All transformations"))			    
	 }	
} 
if (length(orbits_cashew_small) != expectedRuns & length(orbits_noCache_small) != expectedRuns){
 	result_object_RH4_small = 4
	result_RH4_small = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(orbits_cashew_small) == expectedRuns & length(orbits_noCache_small) != expectedRuns){
	result_object_RH4_small = 2
	result_RH4_small = "All transformations"
	result_RH4_cashew = result_RH4_cashew + 1			
}
if (length(orbits_cashew_small) != expectedRuns & length(orbits_noCache_small) == expectedRuns){
	result_object_RH4_small = 3
	result_RH4_small = "No cache"
	result_RH4_noCache = result_RH4_noCache + 1			
}
@  


\subsubsection{RH4.2: Object SMC-Big}

 \textbf{Number of Orbits for All transformations}
 <<RH4_cashew_big, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 orbits_cashew_big = subset(json_data, treatment == 'cashew' & object == 'big' & !is.na(orbits))$orbits
 print(paste("Sample size: ", length(orbits_cashew_big)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)
 
 if(length(orbits_cashew_big) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'big'), "orbits", min(subset(json_data, treatment == 'cashew'& object == 'big')$orbits), max(subset(json_data, treatment == 'cashew' & object == 'big')$orbits))
 
 	shap_cashew_big = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)
 	print(shap_cashew_big)
 	if(shap_cashew_big$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_big$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_big$p.value, sep = " "))
 	}
 }
 @
 \textbf{Number of Orbits for No cache}
 <<RH4_noCache_big, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 orbits_noCache_big = subset(json_data, treatment == 'noCache' & object == 'big' & !is.na(orbits))$orbits
 print(paste("Sample size: ", length(orbits_noCache_big)))					
 summary(subset(json_data, treatment == 'noCache' & object == 'big')$orbits)
 
 if(length(orbits_noCache_big) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'noCache' & object == 'big'), "orbits", min(subset(json_data, treatment == 'noCache'& object == 'big')$orbits), max(subset(json_data, treatment == 'noCache' & object == 'big')$orbits))
 
 	shap_noCache_big = shapiro.test(subset(json_data, treatment == 'noCache' & object == 'big')$orbits)
 	print(shap_noCache_big)
 	if(shap_noCache_big$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_noCache_big$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_noCache_big$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH4_big, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'noCache') & object == 'big')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$orbits, DF$treatmentDescription, mean)))])
 boxplot_RH4_big = ggplot(DF, aes(x =treatmentDescription , y = orbits)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Number of Orbits by Transformations enabled for SMC-Big") + 
 	ylab("Number of Orbits ")			   
 boxplot_RH4_big
 if(length(orbits_cashew_big) == expectedRuns & length(orbits_noCache_big) == expectedRuns){
 	result_RH4_big_tTest = FALSE
 	result_RH4_big_wTest = FALSE
 	
 	if(shap_cashew_big$p.value > alpha&shap_noCache_big$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'big')$orbits, subset(json_data,treatment == 'noCache' & object == 'big')$orbits)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'big')$orbits, subset(json_data, treatment == 'noCache' & object == 'big')$orbits, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH4_big_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(orbits~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'noCache') & object == 'big')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_big_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH4_big_wTest = TRUE
 		}
 	}				
 }
if(length(orbits_cashew_big) == expectedRuns & length(orbits_noCache_big) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Number of Orbits for All transformations: ", mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)))
	 print(paste("Mean Number of Orbits for No cache: ", mean(subset(json_data, treatment == 'noCache' & object == 'big')$orbits)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits) - mean(subset(json_data, treatment == 'noCache' & object == 'big')$orbits))))
	 if (result_RH4_big_tTest | result_RH4_big_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits) > mean(subset(json_data, treatment == 'noCache' & object == 'big')$orbits)){
	   	result_RH4_big = "All transformations \\textgreater{} No cache"
	   	result_object_RH4_big = 1
	   	result_RH4_greater = result_RH4_greater + 1
	 	}else {
	   	result_RH4_big = "All transformations \\textless{} No cache"
	   	result_object_RH4_big = 0
	   	result_RH4_less = result_RH4_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH4_big = 5
	 	result_RH4_big = "Inconclusive"
	 	result_RH4_inconclusive = result_RH4_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'big')$orbits) > mean(subset(json_data, treatment == 'noCache' & object == 'big')$orbits)){
	 	cat(paste("Number of Orbits for All transformations is ", 100 * (abs(mean(subset(json_data, treatment == 'noCache' & object == 'big')$orbits) - mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)) / mean(subset(json_data, treatment == 'noCache' & object == 'big')$orbits)), "% greater than \n Number of Orbits for No cache"))				
	 }else{
	     cat(paste("Number of Orbits for No cache is ", 100 * (abs(mean(subset(json_data, treatment == 'noCache' & object == 'big')$orbits) - mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)) / mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)), "% greater than \nNumber of Orbits for All transformations"))			    
	 }	
} 
if (length(orbits_cashew_big) != expectedRuns & length(orbits_noCache_big) != expectedRuns){
 	result_object_RH4_big = 4
	result_RH4_big = "None"
	result_RH4_none = result_RH4_none + 1
}
if (length(orbits_cashew_big) == expectedRuns & length(orbits_noCache_big) != expectedRuns){
	result_object_RH4_big = 2
	result_RH4_big = "All transformations"
	result_RH4_cashew = result_RH4_cashew + 1			
}
if (length(orbits_cashew_big) != expectedRuns & length(orbits_noCache_big) == expectedRuns){
	result_object_RH4_big = 3
	result_RH4_big = "No cache"
	result_RH4_noCache = result_RH4_noCache + 1			
}
@  


 
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH4_result = list(hypothesis = "RH4", results = c(result_RH4_less / result_RH4_objects, result_RH4_greater / result_RH4_objects, result_RH4_cashew / result_RH4_objects, result_RH4_noCache / result_RH4_objects, result_RH4_none / result_RH4_objects, result_RH4_inconclusive / result_RH4_objects), objectResults = list( list(object = 'small', result = result_object_RH4_small),  list(object = 'big', result = result_object_RH4_big) ))	
	@
	
	\subsubsection{RH4 Results: Number of Orbits All transformations = No cache}
	
	
	\begin{table}[H]
	\centering
	\caption{RH4 Results per Object}
	\begin{tabular}{ll}
	\textbf{SMC-Small} & \Sexpr{result_RH4_small} \\
	\textbf{SMC-Big} & \Sexpr{result_RH4_big} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH4 Results Summary}
	\begin{tabular}{ll}
	\textbf{All transformations \textless{} No cache:}& \Sexpr{100 * result_RH4_less / result_RH4_objects}\% \\
	\textbf{All transformations \textgreater{} No cache:}& \Sexpr{100 * result_RH4_greater / result_RH4_objects}\%\\
	\textbf{All transformations:} & \Sexpr{100 * result_RH4_cashew / result_RH4_objects}\%\\
	\textbf{No cache:} & \Sexpr{100 * result_RH4_noCache / result_RH4_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH4_none / result_RH4_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH4_inconclusive / result_RH4_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	



\subsection{RH5: Number of Orbits for Cashew is equals than the Number of Orbits for Cashew Except Order}

 <<RH5, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 
 result_RH5_objects=2
 result_RH5_less=0
 result_RH5_greater=0
 result_RH5_cashew=0
 result_RH5_cashewExceptOrder=0
 result_RH5_none=0
 result_RH5_inconclusive=0
 @
 
 <<overview_RH5, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 DF <- data_summary(subset(json_data, (object == 'small' |object == 'big' ) & (treatment == 'cashew' | treatment == 'cashewExceptOrder')), varname = "orbits", groupnames = c("treatmentDescription", "objectLabel", "objectOrder"))
 DF$objectLabel <- factor(DF$objectLabel, levels=c("SMC-Small","SMC-Big"))
 		
 		ggplot(DF, aes(x=objectLabel, y=orbits, group=treatmentDescription, color=treatmentDescription)) + 
 		    geom_errorbar(aes(ymin=orbits-sd, ymax=orbits+sd), width=.1, linetype=3) +
 		    geom_line() + geom_point()+
 		   scale_color_brewer(palette="Paired") +
 		   theme_bw() +
 		  scale_x_discrete(name = "Constraints")+
 		  
 		  scale_y_continuous(name = "Number of Orbits ")+
 		  ggtitle("Number of Orbits Overview") + 
 		  theme(legend.title = element_blank())	
 @
 	

\subsubsection{RH5.1: Object SMC-Small}

 \textbf{Number of Orbits for All transformations}
 <<RH5_cashew_small, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 orbits_cashew_small = subset(json_data, treatment == 'cashew' & object == 'small' & !is.na(orbits))$orbits
 print(paste("Sample size: ", length(orbits_cashew_small)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)
 
 if(length(orbits_cashew_small) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'small'), "orbits", min(subset(json_data, treatment == 'cashew'& object == 'small')$orbits), max(subset(json_data, treatment == 'cashew' & object == 'small')$orbits))
 
 	shap_cashew_small = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)
 	print(shap_cashew_small)
 	if(shap_cashew_small$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_small$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_small$p.value, sep = " "))
 	}
 }
 @
 \textbf{Number of Orbits for Except order}
 <<RH5_cashewExceptOrder_small, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 orbits_cashewExceptOrder_small = subset(json_data, treatment == 'cashewExceptOrder' & object == 'small' & !is.na(orbits))$orbits
 print(paste("Sample size: ", length(orbits_cashewExceptOrder_small)))					
 summary(subset(json_data, treatment == 'cashewExceptOrder' & object == 'small')$orbits)
 
 if(length(orbits_cashewExceptOrder_small) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashewExceptOrder' & object == 'small'), "orbits", min(subset(json_data, treatment == 'cashewExceptOrder'& object == 'small')$orbits), max(subset(json_data, treatment == 'cashewExceptOrder' & object == 'small')$orbits))
 
 	shap_cashewExceptOrder_small = shapiro.test(subset(json_data, treatment == 'cashewExceptOrder' & object == 'small')$orbits)
 	print(shap_cashewExceptOrder_small)
 	if(shap_cashewExceptOrder_small$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashewExceptOrder_small$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashewExceptOrder_small$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH5_small, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'cashewExceptOrder') & object == 'small')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$orbits, DF$treatmentDescription, mean)))])
 boxplot_RH5_small = ggplot(DF, aes(x =treatmentDescription , y = orbits)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Number of Orbits by Transformations enabled for SMC-Small") + 
 	ylab("Number of Orbits ")			   
 boxplot_RH5_small
 if(length(orbits_cashew_small) == expectedRuns & length(orbits_cashewExceptOrder_small) == expectedRuns){
 	result_RH5_small_tTest = FALSE
 	result_RH5_small_wTest = FALSE
 	
 	if(shap_cashew_small$p.value > alpha&shap_cashewExceptOrder_small$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'small')$orbits, subset(json_data,treatment == 'cashewExceptOrder' & object == 'small')$orbits)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'small')$orbits, subset(json_data, treatment == 'cashewExceptOrder' & object == 'small')$orbits, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH5_small_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(orbits~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'cashewExceptOrder') & object == 'small')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH5_small_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH5_small_wTest = TRUE
 		}
 	}				
 }
if(length(orbits_cashew_small) == expectedRuns & length(orbits_cashewExceptOrder_small) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Number of Orbits for All transformations: ", mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)))
	 print(paste("Mean Number of Orbits for Except order: ", mean(subset(json_data, treatment == 'cashewExceptOrder' & object == 'small')$orbits)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits) - mean(subset(json_data, treatment == 'cashewExceptOrder' & object == 'small')$orbits))))
	 if (result_RH5_small_tTest | result_RH5_small_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits) > mean(subset(json_data, treatment == 'cashewExceptOrder' & object == 'small')$orbits)){
	   	result_RH5_small = "All transformations \\textgreater{} Except order"
	   	result_object_RH5_small = 1
	   	result_RH5_greater = result_RH5_greater + 1
	 	}else {
	   	result_RH5_small = "All transformations \\textless{} Except order"
	   	result_object_RH5_small = 0
	   	result_RH5_less = result_RH5_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH5_small = 5
	 	result_RH5_small = "Inconclusive"
	 	result_RH5_inconclusive = result_RH5_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'small')$orbits) > mean(subset(json_data, treatment == 'cashewExceptOrder' & object == 'small')$orbits)){
	 	cat(paste("Number of Orbits for All transformations is ", 100 * (abs(mean(subset(json_data, treatment == 'cashewExceptOrder' & object == 'small')$orbits) - mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)) / mean(subset(json_data, treatment == 'cashewExceptOrder' & object == 'small')$orbits)), "% greater than \n Number of Orbits for Except order"))				
	 }else{
	     cat(paste("Number of Orbits for Except order is ", 100 * (abs(mean(subset(json_data, treatment == 'cashewExceptOrder' & object == 'small')$orbits) - mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)) / mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)), "% greater than \nNumber of Orbits for All transformations"))			    
	 }	
} 
if (length(orbits_cashew_small) != expectedRuns & length(orbits_cashewExceptOrder_small) != expectedRuns){
 	result_object_RH5_small = 4
	result_RH5_small = "None"
	result_RH5_none = result_RH5_none + 1
}
if (length(orbits_cashew_small) == expectedRuns & length(orbits_cashewExceptOrder_small) != expectedRuns){
	result_object_RH5_small = 2
	result_RH5_small = "All transformations"
	result_RH5_cashew = result_RH5_cashew + 1			
}
if (length(orbits_cashew_small) != expectedRuns & length(orbits_cashewExceptOrder_small) == expectedRuns){
	result_object_RH5_small = 3
	result_RH5_small = "Except order"
	result_RH5_cashewExceptOrder = result_RH5_cashewExceptOrder + 1			
}
@  


\subsubsection{RH5.2: Object SMC-Big}

 \textbf{Number of Orbits for All transformations}
 <<RH5_cashew_big, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 orbits_cashew_big = subset(json_data, treatment == 'cashew' & object == 'big' & !is.na(orbits))$orbits
 print(paste("Sample size: ", length(orbits_cashew_big)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)
 
 if(length(orbits_cashew_big) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'big'), "orbits", min(subset(json_data, treatment == 'cashew'& object == 'big')$orbits), max(subset(json_data, treatment == 'cashew' & object == 'big')$orbits))
 
 	shap_cashew_big = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)
 	print(shap_cashew_big)
 	if(shap_cashew_big$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_big$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_big$p.value, sep = " "))
 	}
 }
 @
 \textbf{Number of Orbits for Except order}
 <<RH5_cashewExceptOrder_big, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 orbits_cashewExceptOrder_big = subset(json_data, treatment == 'cashewExceptOrder' & object == 'big' & !is.na(orbits))$orbits
 print(paste("Sample size: ", length(orbits_cashewExceptOrder_big)))					
 summary(subset(json_data, treatment == 'cashewExceptOrder' & object == 'big')$orbits)
 
 if(length(orbits_cashewExceptOrder_big) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashewExceptOrder' & object == 'big'), "orbits", min(subset(json_data, treatment == 'cashewExceptOrder'& object == 'big')$orbits), max(subset(json_data, treatment == 'cashewExceptOrder' & object == 'big')$orbits))
 
 	shap_cashewExceptOrder_big = shapiro.test(subset(json_data, treatment == 'cashewExceptOrder' & object == 'big')$orbits)
 	print(shap_cashewExceptOrder_big)
 	if(shap_cashewExceptOrder_big$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashewExceptOrder_big$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashewExceptOrder_big$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH5_big, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'cashewExceptOrder') & object == 'big')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$orbits, DF$treatmentDescription, mean)))])
 boxplot_RH5_big = ggplot(DF, aes(x =treatmentDescription , y = orbits)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Number of Orbits by Transformations enabled for SMC-Big") + 
 	ylab("Number of Orbits ")			   
 boxplot_RH5_big
 if(length(orbits_cashew_big) == expectedRuns & length(orbits_cashewExceptOrder_big) == expectedRuns){
 	result_RH5_big_tTest = FALSE
 	result_RH5_big_wTest = FALSE
 	
 	if(shap_cashew_big$p.value > alpha&shap_cashewExceptOrder_big$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'big')$orbits, subset(json_data,treatment == 'cashewExceptOrder' & object == 'big')$orbits)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'big')$orbits, subset(json_data, treatment == 'cashewExceptOrder' & object == 'big')$orbits, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH5_big_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(orbits~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'cashewExceptOrder') & object == 'big')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH5_big_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH5_big_wTest = TRUE
 		}
 	}				
 }
if(length(orbits_cashew_big) == expectedRuns & length(orbits_cashewExceptOrder_big) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Number of Orbits for All transformations: ", mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)))
	 print(paste("Mean Number of Orbits for Except order: ", mean(subset(json_data, treatment == 'cashewExceptOrder' & object == 'big')$orbits)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits) - mean(subset(json_data, treatment == 'cashewExceptOrder' & object == 'big')$orbits))))
	 if (result_RH5_big_tTest | result_RH5_big_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits) > mean(subset(json_data, treatment == 'cashewExceptOrder' & object == 'big')$orbits)){
	   	result_RH5_big = "All transformations \\textgreater{} Except order"
	   	result_object_RH5_big = 1
	   	result_RH5_greater = result_RH5_greater + 1
	 	}else {
	   	result_RH5_big = "All transformations \\textless{} Except order"
	   	result_object_RH5_big = 0
	   	result_RH5_less = result_RH5_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH5_big = 5
	 	result_RH5_big = "Inconclusive"
	 	result_RH5_inconclusive = result_RH5_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'big')$orbits) > mean(subset(json_data, treatment == 'cashewExceptOrder' & object == 'big')$orbits)){
	 	cat(paste("Number of Orbits for All transformations is ", 100 * (abs(mean(subset(json_data, treatment == 'cashewExceptOrder' & object == 'big')$orbits) - mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)) / mean(subset(json_data, treatment == 'cashewExceptOrder' & object == 'big')$orbits)), "% greater than \n Number of Orbits for Except order"))				
	 }else{
	     cat(paste("Number of Orbits for Except order is ", 100 * (abs(mean(subset(json_data, treatment == 'cashewExceptOrder' & object == 'big')$orbits) - mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)) / mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)), "% greater than \nNumber of Orbits for All transformations"))			    
	 }	
} 
if (length(orbits_cashew_big) != expectedRuns & length(orbits_cashewExceptOrder_big) != expectedRuns){
 	result_object_RH5_big = 4
	result_RH5_big = "None"
	result_RH5_none = result_RH5_none + 1
}
if (length(orbits_cashew_big) == expectedRuns & length(orbits_cashewExceptOrder_big) != expectedRuns){
	result_object_RH5_big = 2
	result_RH5_big = "All transformations"
	result_RH5_cashew = result_RH5_cashew + 1			
}
if (length(orbits_cashew_big) != expectedRuns & length(orbits_cashewExceptOrder_big) == expectedRuns){
	result_object_RH5_big = 3
	result_RH5_big = "Except order"
	result_RH5_cashewExceptOrder = result_RH5_cashewExceptOrder + 1			
}
@  


 
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH5_result = list(hypothesis = "RH5", results = c(result_RH5_less / result_RH5_objects, result_RH5_greater / result_RH5_objects, result_RH5_cashew / result_RH5_objects, result_RH5_cashewExceptOrder / result_RH5_objects, result_RH5_none / result_RH5_objects, result_RH5_inconclusive / result_RH5_objects), objectResults = list( list(object = 'small', result = result_object_RH5_small),  list(object = 'big', result = result_object_RH5_big) ))	
	@
	
	\subsubsection{RH5 Results: Number of Orbits All transformations = Except order}
	
	
	\begin{table}[H]
	\centering
	\caption{RH5 Results per Object}
	\begin{tabular}{ll}
	\textbf{SMC-Small} & \Sexpr{result_RH5_small} \\
	\textbf{SMC-Big} & \Sexpr{result_RH5_big} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH5 Results Summary}
	\begin{tabular}{ll}
	\textbf{All transformations \textless{} Except order:}& \Sexpr{100 * result_RH5_less / result_RH5_objects}\% \\
	\textbf{All transformations \textgreater{} Except order:}& \Sexpr{100 * result_RH5_greater / result_RH5_objects}\%\\
	\textbf{All transformations:} & \Sexpr{100 * result_RH5_cashew / result_RH5_objects}\%\\
	\textbf{Except order:} & \Sexpr{100 * result_RH5_cashewExceptOrder / result_RH5_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH5_none / result_RH5_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH5_inconclusive / result_RH5_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	



\subsection{RH6: Number of Orbits for Cashew is equals than the Number of Orbits for Cashew Except Reduce}

 <<RH6, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 
 result_RH6_objects=2
 result_RH6_less=0
 result_RH6_greater=0
 result_RH6_cashew=0
 result_RH6_cashewExceptReduce=0
 result_RH6_none=0
 result_RH6_inconclusive=0
 @
 
 <<overview_RH6, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 DF <- data_summary(subset(json_data, (object == 'small' |object == 'big' ) & (treatment == 'cashew' | treatment == 'cashewExceptReduce')), varname = "orbits", groupnames = c("treatmentDescription", "objectLabel", "objectOrder"))
 DF$objectLabel <- factor(DF$objectLabel, levels=c("SMC-Small","SMC-Big"))
 		
 		ggplot(DF, aes(x=objectLabel, y=orbits, group=treatmentDescription, color=treatmentDescription)) + 
 		    geom_errorbar(aes(ymin=orbits-sd, ymax=orbits+sd), width=.1, linetype=3) +
 		    geom_line() + geom_point()+
 		   scale_color_brewer(palette="Paired") +
 		   theme_bw() +
 		  scale_x_discrete(name = "Constraints")+
 		  
 		  scale_y_continuous(name = "Number of Orbits ")+
 		  ggtitle("Number of Orbits Overview") + 
 		  theme(legend.title = element_blank())	
 @
 	

\subsubsection{RH6.1: Object SMC-Small}

 \textbf{Number of Orbits for All transformations}
 <<RH6_cashew_small, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 orbits_cashew_small = subset(json_data, treatment == 'cashew' & object == 'small' & !is.na(orbits))$orbits
 print(paste("Sample size: ", length(orbits_cashew_small)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)
 
 if(length(orbits_cashew_small) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'small'), "orbits", min(subset(json_data, treatment == 'cashew'& object == 'small')$orbits), max(subset(json_data, treatment == 'cashew' & object == 'small')$orbits))
 
 	shap_cashew_small = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)
 	print(shap_cashew_small)
 	if(shap_cashew_small$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_small$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_small$p.value, sep = " "))
 	}
 }
 @
 \textbf{Number of Orbits for Except removeVar}
 <<RH6_cashewExceptReduce_small, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 orbits_cashewExceptReduce_small = subset(json_data, treatment == 'cashewExceptReduce' & object == 'small' & !is.na(orbits))$orbits
 print(paste("Sample size: ", length(orbits_cashewExceptReduce_small)))					
 summary(subset(json_data, treatment == 'cashewExceptReduce' & object == 'small')$orbits)
 
 if(length(orbits_cashewExceptReduce_small) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashewExceptReduce' & object == 'small'), "orbits", min(subset(json_data, treatment == 'cashewExceptReduce'& object == 'small')$orbits), max(subset(json_data, treatment == 'cashewExceptReduce' & object == 'small')$orbits))
 
 	shap_cashewExceptReduce_small = shapiro.test(subset(json_data, treatment == 'cashewExceptReduce' & object == 'small')$orbits)
 	print(shap_cashewExceptReduce_small)
 	if(shap_cashewExceptReduce_small$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashewExceptReduce_small$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashewExceptReduce_small$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH6_small, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'cashewExceptReduce') & object == 'small')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$orbits, DF$treatmentDescription, mean)))])
 boxplot_RH6_small = ggplot(DF, aes(x =treatmentDescription , y = orbits)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Number of Orbits by Transformations enabled for SMC-Small") + 
 	ylab("Number of Orbits ")			   
 boxplot_RH6_small
 if(length(orbits_cashew_small) == expectedRuns & length(orbits_cashewExceptReduce_small) == expectedRuns){
 	result_RH6_small_tTest = FALSE
 	result_RH6_small_wTest = FALSE
 	
 	if(shap_cashew_small$p.value > alpha&shap_cashewExceptReduce_small$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'small')$orbits, subset(json_data,treatment == 'cashewExceptReduce' & object == 'small')$orbits)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'small')$orbits, subset(json_data, treatment == 'cashewExceptReduce' & object == 'small')$orbits, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH6_small_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(orbits~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'cashewExceptReduce') & object == 'small')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH6_small_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH6_small_wTest = TRUE
 		}
 	}				
 }
if(length(orbits_cashew_small) == expectedRuns & length(orbits_cashewExceptReduce_small) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Number of Orbits for All transformations: ", mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)))
	 print(paste("Mean Number of Orbits for Except removeVar: ", mean(subset(json_data, treatment == 'cashewExceptReduce' & object == 'small')$orbits)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits) - mean(subset(json_data, treatment == 'cashewExceptReduce' & object == 'small')$orbits))))
	 if (result_RH6_small_tTest | result_RH6_small_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits) > mean(subset(json_data, treatment == 'cashewExceptReduce' & object == 'small')$orbits)){
	   	result_RH6_small = "All transformations \\textgreater{} Except removeVar"
	   	result_object_RH6_small = 1
	   	result_RH6_greater = result_RH6_greater + 1
	 	}else {
	   	result_RH6_small = "All transformations \\textless{} Except removeVar"
	   	result_object_RH6_small = 0
	   	result_RH6_less = result_RH6_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH6_small = 5
	 	result_RH6_small = "Inconclusive"
	 	result_RH6_inconclusive = result_RH6_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'small')$orbits) > mean(subset(json_data, treatment == 'cashewExceptReduce' & object == 'small')$orbits)){
	 	cat(paste("Number of Orbits for All transformations is ", 100 * (abs(mean(subset(json_data, treatment == 'cashewExceptReduce' & object == 'small')$orbits) - mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)) / mean(subset(json_data, treatment == 'cashewExceptReduce' & object == 'small')$orbits)), "% greater than \n Number of Orbits for Except removeVar"))				
	 }else{
	     cat(paste("Number of Orbits for Except removeVar is ", 100 * (abs(mean(subset(json_data, treatment == 'cashewExceptReduce' & object == 'small')$orbits) - mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)) / mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)), "% greater than \nNumber of Orbits for All transformations"))			    
	 }	
} 
if (length(orbits_cashew_small) != expectedRuns & length(orbits_cashewExceptReduce_small) != expectedRuns){
 	result_object_RH6_small = 4
	result_RH6_small = "None"
	result_RH6_none = result_RH6_none + 1
}
if (length(orbits_cashew_small) == expectedRuns & length(orbits_cashewExceptReduce_small) != expectedRuns){
	result_object_RH6_small = 2
	result_RH6_small = "All transformations"
	result_RH6_cashew = result_RH6_cashew + 1			
}
if (length(orbits_cashew_small) != expectedRuns & length(orbits_cashewExceptReduce_small) == expectedRuns){
	result_object_RH6_small = 3
	result_RH6_small = "Except removeVar"
	result_RH6_cashewExceptReduce = result_RH6_cashewExceptReduce + 1			
}
@  


\subsubsection{RH6.2: Object SMC-Big}

 \textbf{Number of Orbits for All transformations}
 <<RH6_cashew_big, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 orbits_cashew_big = subset(json_data, treatment == 'cashew' & object == 'big' & !is.na(orbits))$orbits
 print(paste("Sample size: ", length(orbits_cashew_big)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)
 
 if(length(orbits_cashew_big) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'big'), "orbits", min(subset(json_data, treatment == 'cashew'& object == 'big')$orbits), max(subset(json_data, treatment == 'cashew' & object == 'big')$orbits))
 
 	shap_cashew_big = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)
 	print(shap_cashew_big)
 	if(shap_cashew_big$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_big$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_big$p.value, sep = " "))
 	}
 }
 @
 \textbf{Number of Orbits for Except removeVar}
 <<RH6_cashewExceptReduce_big, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 orbits_cashewExceptReduce_big = subset(json_data, treatment == 'cashewExceptReduce' & object == 'big' & !is.na(orbits))$orbits
 print(paste("Sample size: ", length(orbits_cashewExceptReduce_big)))					
 summary(subset(json_data, treatment == 'cashewExceptReduce' & object == 'big')$orbits)
 
 if(length(orbits_cashewExceptReduce_big) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashewExceptReduce' & object == 'big'), "orbits", min(subset(json_data, treatment == 'cashewExceptReduce'& object == 'big')$orbits), max(subset(json_data, treatment == 'cashewExceptReduce' & object == 'big')$orbits))
 
 	shap_cashewExceptReduce_big = shapiro.test(subset(json_data, treatment == 'cashewExceptReduce' & object == 'big')$orbits)
 	print(shap_cashewExceptReduce_big)
 	if(shap_cashewExceptReduce_big$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashewExceptReduce_big$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashewExceptReduce_big$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH6_big, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'cashewExceptReduce') & object == 'big')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$orbits, DF$treatmentDescription, mean)))])
 boxplot_RH6_big = ggplot(DF, aes(x =treatmentDescription , y = orbits)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Number of Orbits by Transformations enabled for SMC-Big") + 
 	ylab("Number of Orbits ")			   
 boxplot_RH6_big
 if(length(orbits_cashew_big) == expectedRuns & length(orbits_cashewExceptReduce_big) == expectedRuns){
 	result_RH6_big_tTest = FALSE
 	result_RH6_big_wTest = FALSE
 	
 	if(shap_cashew_big$p.value > alpha&shap_cashewExceptReduce_big$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'big')$orbits, subset(json_data,treatment == 'cashewExceptReduce' & object == 'big')$orbits)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'big')$orbits, subset(json_data, treatment == 'cashewExceptReduce' & object == 'big')$orbits, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH6_big_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(orbits~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'cashewExceptReduce') & object == 'big')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH6_big_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH6_big_wTest = TRUE
 		}
 	}				
 }
if(length(orbits_cashew_big) == expectedRuns & length(orbits_cashewExceptReduce_big) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Number of Orbits for All transformations: ", mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)))
	 print(paste("Mean Number of Orbits for Except removeVar: ", mean(subset(json_data, treatment == 'cashewExceptReduce' & object == 'big')$orbits)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits) - mean(subset(json_data, treatment == 'cashewExceptReduce' & object == 'big')$orbits))))
	 if (result_RH6_big_tTest | result_RH6_big_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits) > mean(subset(json_data, treatment == 'cashewExceptReduce' & object == 'big')$orbits)){
	   	result_RH6_big = "All transformations \\textgreater{} Except removeVar"
	   	result_object_RH6_big = 1
	   	result_RH6_greater = result_RH6_greater + 1
	 	}else {
	   	result_RH6_big = "All transformations \\textless{} Except removeVar"
	   	result_object_RH6_big = 0
	   	result_RH6_less = result_RH6_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH6_big = 5
	 	result_RH6_big = "Inconclusive"
	 	result_RH6_inconclusive = result_RH6_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'big')$orbits) > mean(subset(json_data, treatment == 'cashewExceptReduce' & object == 'big')$orbits)){
	 	cat(paste("Number of Orbits for All transformations is ", 100 * (abs(mean(subset(json_data, treatment == 'cashewExceptReduce' & object == 'big')$orbits) - mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)) / mean(subset(json_data, treatment == 'cashewExceptReduce' & object == 'big')$orbits)), "% greater than \n Number of Orbits for Except removeVar"))				
	 }else{
	     cat(paste("Number of Orbits for Except removeVar is ", 100 * (abs(mean(subset(json_data, treatment == 'cashewExceptReduce' & object == 'big')$orbits) - mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)) / mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)), "% greater than \nNumber of Orbits for All transformations"))			    
	 }	
} 
if (length(orbits_cashew_big) != expectedRuns & length(orbits_cashewExceptReduce_big) != expectedRuns){
 	result_object_RH6_big = 4
	result_RH6_big = "None"
	result_RH6_none = result_RH6_none + 1
}
if (length(orbits_cashew_big) == expectedRuns & length(orbits_cashewExceptReduce_big) != expectedRuns){
	result_object_RH6_big = 2
	result_RH6_big = "All transformations"
	result_RH6_cashew = result_RH6_cashew + 1			
}
if (length(orbits_cashew_big) != expectedRuns & length(orbits_cashewExceptReduce_big) == expectedRuns){
	result_object_RH6_big = 3
	result_RH6_big = "Except removeVar"
	result_RH6_cashewExceptReduce = result_RH6_cashewExceptReduce + 1			
}
@  


 
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH6_result = list(hypothesis = "RH6", results = c(result_RH6_less / result_RH6_objects, result_RH6_greater / result_RH6_objects, result_RH6_cashew / result_RH6_objects, result_RH6_cashewExceptReduce / result_RH6_objects, result_RH6_none / result_RH6_objects, result_RH6_inconclusive / result_RH6_objects), objectResults = list( list(object = 'small', result = result_object_RH6_small),  list(object = 'big', result = result_object_RH6_big) ))	
	@
	
	\subsubsection{RH6 Results: Number of Orbits All transformations = Except removeVar}
	
	
	\begin{table}[H]
	\centering
	\caption{RH6 Results per Object}
	\begin{tabular}{ll}
	\textbf{SMC-Small} & \Sexpr{result_RH6_small} \\
	\textbf{SMC-Big} & \Sexpr{result_RH6_big} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH6 Results Summary}
	\begin{tabular}{ll}
	\textbf{All transformations \textless{} Except removeVar:}& \Sexpr{100 * result_RH6_less / result_RH6_objects}\% \\
	\textbf{All transformations \textgreater{} Except removeVar:}& \Sexpr{100 * result_RH6_greater / result_RH6_objects}\%\\
	\textbf{All transformations:} & \Sexpr{100 * result_RH6_cashew / result_RH6_objects}\%\\
	\textbf{Except removeVar:} & \Sexpr{100 * result_RH6_cashewExceptReduce / result_RH6_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH6_none / result_RH6_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH6_inconclusive / result_RH6_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	



\subsection{RH7: Number of Orbits for Cashew is equals than the Number of Orbits for Cashew Except Remove}

 <<RH7, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 
 result_RH7_objects=2
 result_RH7_less=0
 result_RH7_greater=0
 result_RH7_cashew=0
 result_RH7_cashewExceptRemove=0
 result_RH7_none=0
 result_RH7_inconclusive=0
 @
 
 <<overview_RH7, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 DF <- data_summary(subset(json_data, (object == 'small' |object == 'big' ) & (treatment == 'cashew' | treatment == 'cashewExceptRemove')), varname = "orbits", groupnames = c("treatmentDescription", "objectLabel", "objectOrder"))
 DF$objectLabel <- factor(DF$objectLabel, levels=c("SMC-Small","SMC-Big"))
 		
 		ggplot(DF, aes(x=objectLabel, y=orbits, group=treatmentDescription, color=treatmentDescription)) + 
 		    geom_errorbar(aes(ymin=orbits-sd, ymax=orbits+sd), width=.1, linetype=3) +
 		    geom_line() + geom_point()+
 		   scale_color_brewer(palette="Paired") +
 		   theme_bw() +
 		  scale_x_discrete(name = "Constraints")+
 		  
 		  scale_y_continuous(name = "Number of Orbits ")+
 		  ggtitle("Number of Orbits Overview") + 
 		  theme(legend.title = element_blank())	
 @
 	

\subsubsection{RH7.1: Object SMC-Small}

 \textbf{Number of Orbits for All transformations}
 <<RH7_cashew_small, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 orbits_cashew_small = subset(json_data, treatment == 'cashew' & object == 'small' & !is.na(orbits))$orbits
 print(paste("Sample size: ", length(orbits_cashew_small)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)
 
 if(length(orbits_cashew_small) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'small'), "orbits", min(subset(json_data, treatment == 'cashew'& object == 'small')$orbits), max(subset(json_data, treatment == 'cashew' & object == 'small')$orbits))
 
 	shap_cashew_small = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)
 	print(shap_cashew_small)
 	if(shap_cashew_small$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_small$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_small$p.value, sep = " "))
 	}
 }
 @
 \textbf{Number of Orbits for Except removeConj}
 <<RH7_cashewExceptRemove_small, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 orbits_cashewExceptRemove_small = subset(json_data, treatment == 'cashewExceptRemove' & object == 'small' & !is.na(orbits))$orbits
 print(paste("Sample size: ", length(orbits_cashewExceptRemove_small)))					
 summary(subset(json_data, treatment == 'cashewExceptRemove' & object == 'small')$orbits)
 
 if(length(orbits_cashewExceptRemove_small) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashewExceptRemove' & object == 'small'), "orbits", min(subset(json_data, treatment == 'cashewExceptRemove'& object == 'small')$orbits), max(subset(json_data, treatment == 'cashewExceptRemove' & object == 'small')$orbits))
 
 	shap_cashewExceptRemove_small = shapiro.test(subset(json_data, treatment == 'cashewExceptRemove' & object == 'small')$orbits)
 	print(shap_cashewExceptRemove_small)
 	if(shap_cashewExceptRemove_small$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashewExceptRemove_small$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashewExceptRemove_small$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH7_small, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'cashewExceptRemove') & object == 'small')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$orbits, DF$treatmentDescription, mean)))])
 boxplot_RH7_small = ggplot(DF, aes(x =treatmentDescription , y = orbits)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Number of Orbits by Transformations enabled for SMC-Small") + 
 	ylab("Number of Orbits ")			   
 boxplot_RH7_small
 if(length(orbits_cashew_small) == expectedRuns & length(orbits_cashewExceptRemove_small) == expectedRuns){
 	result_RH7_small_tTest = FALSE
 	result_RH7_small_wTest = FALSE
 	
 	if(shap_cashew_small$p.value > alpha&shap_cashewExceptRemove_small$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'small')$orbits, subset(json_data,treatment == 'cashewExceptRemove' & object == 'small')$orbits)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'small')$orbits, subset(json_data, treatment == 'cashewExceptRemove' & object == 'small')$orbits, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH7_small_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(orbits~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'cashewExceptRemove') & object == 'small')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH7_small_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH7_small_wTest = TRUE
 		}
 	}				
 }
if(length(orbits_cashew_small) == expectedRuns & length(orbits_cashewExceptRemove_small) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Number of Orbits for All transformations: ", mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)))
	 print(paste("Mean Number of Orbits for Except removeConj: ", mean(subset(json_data, treatment == 'cashewExceptRemove' & object == 'small')$orbits)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits) - mean(subset(json_data, treatment == 'cashewExceptRemove' & object == 'small')$orbits))))
	 if (result_RH7_small_tTest | result_RH7_small_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits) > mean(subset(json_data, treatment == 'cashewExceptRemove' & object == 'small')$orbits)){
	   	result_RH7_small = "All transformations \\textgreater{} Except removeConj"
	   	result_object_RH7_small = 1
	   	result_RH7_greater = result_RH7_greater + 1
	 	}else {
	   	result_RH7_small = "All transformations \\textless{} Except removeConj"
	   	result_object_RH7_small = 0
	   	result_RH7_less = result_RH7_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH7_small = 5
	 	result_RH7_small = "Inconclusive"
	 	result_RH7_inconclusive = result_RH7_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'small')$orbits) > mean(subset(json_data, treatment == 'cashewExceptRemove' & object == 'small')$orbits)){
	 	cat(paste("Number of Orbits for All transformations is ", 100 * (abs(mean(subset(json_data, treatment == 'cashewExceptRemove' & object == 'small')$orbits) - mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)) / mean(subset(json_data, treatment == 'cashewExceptRemove' & object == 'small')$orbits)), "% greater than \n Number of Orbits for Except removeConj"))				
	 }else{
	     cat(paste("Number of Orbits for Except removeConj is ", 100 * (abs(mean(subset(json_data, treatment == 'cashewExceptRemove' & object == 'small')$orbits) - mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)) / mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)), "% greater than \nNumber of Orbits for All transformations"))			    
	 }	
} 
if (length(orbits_cashew_small) != expectedRuns & length(orbits_cashewExceptRemove_small) != expectedRuns){
 	result_object_RH7_small = 4
	result_RH7_small = "None"
	result_RH7_none = result_RH7_none + 1
}
if (length(orbits_cashew_small) == expectedRuns & length(orbits_cashewExceptRemove_small) != expectedRuns){
	result_object_RH7_small = 2
	result_RH7_small = "All transformations"
	result_RH7_cashew = result_RH7_cashew + 1			
}
if (length(orbits_cashew_small) != expectedRuns & length(orbits_cashewExceptRemove_small) == expectedRuns){
	result_object_RH7_small = 3
	result_RH7_small = "Except removeConj"
	result_RH7_cashewExceptRemove = result_RH7_cashewExceptRemove + 1			
}
@  


\subsubsection{RH7.2: Object SMC-Big}

 \textbf{Number of Orbits for All transformations}
 <<RH7_cashew_big, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 orbits_cashew_big = subset(json_data, treatment == 'cashew' & object == 'big' & !is.na(orbits))$orbits
 print(paste("Sample size: ", length(orbits_cashew_big)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)
 
 if(length(orbits_cashew_big) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'big'), "orbits", min(subset(json_data, treatment == 'cashew'& object == 'big')$orbits), max(subset(json_data, treatment == 'cashew' & object == 'big')$orbits))
 
 	shap_cashew_big = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)
 	print(shap_cashew_big)
 	if(shap_cashew_big$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_big$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_big$p.value, sep = " "))
 	}
 }
 @
 \textbf{Number of Orbits for Except removeConj}
 <<RH7_cashewExceptRemove_big, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 orbits_cashewExceptRemove_big = subset(json_data, treatment == 'cashewExceptRemove' & object == 'big' & !is.na(orbits))$orbits
 print(paste("Sample size: ", length(orbits_cashewExceptRemove_big)))					
 summary(subset(json_data, treatment == 'cashewExceptRemove' & object == 'big')$orbits)
 
 if(length(orbits_cashewExceptRemove_big) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashewExceptRemove' & object == 'big'), "orbits", min(subset(json_data, treatment == 'cashewExceptRemove'& object == 'big')$orbits), max(subset(json_data, treatment == 'cashewExceptRemove' & object == 'big')$orbits))
 
 	shap_cashewExceptRemove_big = shapiro.test(subset(json_data, treatment == 'cashewExceptRemove' & object == 'big')$orbits)
 	print(shap_cashewExceptRemove_big)
 	if(shap_cashewExceptRemove_big$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashewExceptRemove_big$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashewExceptRemove_big$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH7_big, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'cashewExceptRemove') & object == 'big')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$orbits, DF$treatmentDescription, mean)))])
 boxplot_RH7_big = ggplot(DF, aes(x =treatmentDescription , y = orbits)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Number of Orbits by Transformations enabled for SMC-Big") + 
 	ylab("Number of Orbits ")			   
 boxplot_RH7_big
 if(length(orbits_cashew_big) == expectedRuns & length(orbits_cashewExceptRemove_big) == expectedRuns){
 	result_RH7_big_tTest = FALSE
 	result_RH7_big_wTest = FALSE
 	
 	if(shap_cashew_big$p.value > alpha&shap_cashewExceptRemove_big$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'big')$orbits, subset(json_data,treatment == 'cashewExceptRemove' & object == 'big')$orbits)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'big')$orbits, subset(json_data, treatment == 'cashewExceptRemove' & object == 'big')$orbits, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH7_big_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(orbits~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'cashewExceptRemove') & object == 'big')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH7_big_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH7_big_wTest = TRUE
 		}
 	}				
 }
if(length(orbits_cashew_big) == expectedRuns & length(orbits_cashewExceptRemove_big) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Number of Orbits for All transformations: ", mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)))
	 print(paste("Mean Number of Orbits for Except removeConj: ", mean(subset(json_data, treatment == 'cashewExceptRemove' & object == 'big')$orbits)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits) - mean(subset(json_data, treatment == 'cashewExceptRemove' & object == 'big')$orbits))))
	 if (result_RH7_big_tTest | result_RH7_big_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits) > mean(subset(json_data, treatment == 'cashewExceptRemove' & object == 'big')$orbits)){
	   	result_RH7_big = "All transformations \\textgreater{} Except removeConj"
	   	result_object_RH7_big = 1
	   	result_RH7_greater = result_RH7_greater + 1
	 	}else {
	   	result_RH7_big = "All transformations \\textless{} Except removeConj"
	   	result_object_RH7_big = 0
	   	result_RH7_less = result_RH7_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH7_big = 5
	 	result_RH7_big = "Inconclusive"
	 	result_RH7_inconclusive = result_RH7_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'big')$orbits) > mean(subset(json_data, treatment == 'cashewExceptRemove' & object == 'big')$orbits)){
	 	cat(paste("Number of Orbits for All transformations is ", 100 * (abs(mean(subset(json_data, treatment == 'cashewExceptRemove' & object == 'big')$orbits) - mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)) / mean(subset(json_data, treatment == 'cashewExceptRemove' & object == 'big')$orbits)), "% greater than \n Number of Orbits for Except removeConj"))				
	 }else{
	     cat(paste("Number of Orbits for Except removeConj is ", 100 * (abs(mean(subset(json_data, treatment == 'cashewExceptRemove' & object == 'big')$orbits) - mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)) / mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)), "% greater than \nNumber of Orbits for All transformations"))			    
	 }	
} 
if (length(orbits_cashew_big) != expectedRuns & length(orbits_cashewExceptRemove_big) != expectedRuns){
 	result_object_RH7_big = 4
	result_RH7_big = "None"
	result_RH7_none = result_RH7_none + 1
}
if (length(orbits_cashew_big) == expectedRuns & length(orbits_cashewExceptRemove_big) != expectedRuns){
	result_object_RH7_big = 2
	result_RH7_big = "All transformations"
	result_RH7_cashew = result_RH7_cashew + 1			
}
if (length(orbits_cashew_big) != expectedRuns & length(orbits_cashewExceptRemove_big) == expectedRuns){
	result_object_RH7_big = 3
	result_RH7_big = "Except removeConj"
	result_RH7_cashewExceptRemove = result_RH7_cashewExceptRemove + 1			
}
@  


 
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH7_result = list(hypothesis = "RH7", results = c(result_RH7_less / result_RH7_objects, result_RH7_greater / result_RH7_objects, result_RH7_cashew / result_RH7_objects, result_RH7_cashewExceptRemove / result_RH7_objects, result_RH7_none / result_RH7_objects, result_RH7_inconclusive / result_RH7_objects), objectResults = list( list(object = 'small', result = result_object_RH7_small),  list(object = 'big', result = result_object_RH7_big) ))	
	@
	
	\subsubsection{RH7 Results: Number of Orbits All transformations = Except removeConj}
	
	
	\begin{table}[H]
	\centering
	\caption{RH7 Results per Object}
	\begin{tabular}{ll}
	\textbf{SMC-Small} & \Sexpr{result_RH7_small} \\
	\textbf{SMC-Big} & \Sexpr{result_RH7_big} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH7 Results Summary}
	\begin{tabular}{ll}
	\textbf{All transformations \textless{} Except removeConj:}& \Sexpr{100 * result_RH7_less / result_RH7_objects}\% \\
	\textbf{All transformations \textgreater{} Except removeConj:}& \Sexpr{100 * result_RH7_greater / result_RH7_objects}\%\\
	\textbf{All transformations:} & \Sexpr{100 * result_RH7_cashew / result_RH7_objects}\%\\
	\textbf{Except removeConj:} & \Sexpr{100 * result_RH7_cashewExceptRemove / result_RH7_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH7_none / result_RH7_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH7_inconclusive / result_RH7_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	



\subsection{RH8: Number of Orbits for Cashew is equals than the Number of Orbits for Cashew Except Rename Alph}

 <<RH8, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 
 result_RH8_objects=2
 result_RH8_less=0
 result_RH8_greater=0
 result_RH8_cashew=0
 result_RH8_cashewExceptRenameAlph=0
 result_RH8_none=0
 result_RH8_inconclusive=0
 @
 
 <<overview_RH8, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 DF <- data_summary(subset(json_data, (object == 'small' |object == 'big' ) & (treatment == 'cashew' | treatment == 'cashewExceptRenameAlph')), varname = "orbits", groupnames = c("treatmentDescription", "objectLabel", "objectOrder"))
 DF$objectLabel <- factor(DF$objectLabel, levels=c("SMC-Small","SMC-Big"))
 		
 		ggplot(DF, aes(x=objectLabel, y=orbits, group=treatmentDescription, color=treatmentDescription)) + 
 		    geom_errorbar(aes(ymin=orbits-sd, ymax=orbits+sd), width=.1, linetype=3) +
 		    geom_line() + geom_point()+
 		   scale_color_brewer(palette="Paired") +
 		   theme_bw() +
 		  scale_x_discrete(name = "Constraints")+
 		  
 		  scale_y_continuous(name = "Number of Orbits ")+
 		  ggtitle("Number of Orbits Overview") + 
 		  theme(legend.title = element_blank())	
 @
 	

\subsubsection{RH8.1: Object SMC-Small}

 \textbf{Number of Orbits for All transformations}
 <<RH8_cashew_small, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 orbits_cashew_small = subset(json_data, treatment == 'cashew' & object == 'small' & !is.na(orbits))$orbits
 print(paste("Sample size: ", length(orbits_cashew_small)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)
 
 if(length(orbits_cashew_small) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'small'), "orbits", min(subset(json_data, treatment == 'cashew'& object == 'small')$orbits), max(subset(json_data, treatment == 'cashew' & object == 'small')$orbits))
 
 	shap_cashew_small = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)
 	print(shap_cashew_small)
 	if(shap_cashew_small$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_small$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_small$p.value, sep = " "))
 	}
 }
 @
 \textbf{Number of Orbits for Except rename alph}
 <<RH8_cashewExceptRenameAlph_small, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 orbits_cashewExceptRenameAlph_small = subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'small' & !is.na(orbits))$orbits
 print(paste("Sample size: ", length(orbits_cashewExceptRenameAlph_small)))					
 summary(subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'small')$orbits)
 
 if(length(orbits_cashewExceptRenameAlph_small) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'small'), "orbits", min(subset(json_data, treatment == 'cashewExceptRenameAlph'& object == 'small')$orbits), max(subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'small')$orbits))
 
 	shap_cashewExceptRenameAlph_small = shapiro.test(subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'small')$orbits)
 	print(shap_cashewExceptRenameAlph_small)
 	if(shap_cashewExceptRenameAlph_small$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashewExceptRenameAlph_small$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashewExceptRenameAlph_small$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH8_small, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'cashewExceptRenameAlph') & object == 'small')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$orbits, DF$treatmentDescription, mean)))])
 boxplot_RH8_small = ggplot(DF, aes(x =treatmentDescription , y = orbits)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Number of Orbits by Transformations enabled for SMC-Small") + 
 	ylab("Number of Orbits ")			   
 boxplot_RH8_small
 if(length(orbits_cashew_small) == expectedRuns & length(orbits_cashewExceptRenameAlph_small) == expectedRuns){
 	result_RH8_small_tTest = FALSE
 	result_RH8_small_wTest = FALSE
 	
 	if(shap_cashew_small$p.value > alpha&shap_cashewExceptRenameAlph_small$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'small')$orbits, subset(json_data,treatment == 'cashewExceptRenameAlph' & object == 'small')$orbits)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'small')$orbits, subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'small')$orbits, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH8_small_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(orbits~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'cashewExceptRenameAlph') & object == 'small')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH8_small_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH8_small_wTest = TRUE
 		}
 	}				
 }
if(length(orbits_cashew_small) == expectedRuns & length(orbits_cashewExceptRenameAlph_small) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Number of Orbits for All transformations: ", mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)))
	 print(paste("Mean Number of Orbits for Except rename alph: ", mean(subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'small')$orbits)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits) - mean(subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'small')$orbits))))
	 if (result_RH8_small_tTest | result_RH8_small_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits) > mean(subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'small')$orbits)){
	   	result_RH8_small = "All transformations \\textgreater{} Except rename alph"
	   	result_object_RH8_small = 1
	   	result_RH8_greater = result_RH8_greater + 1
	 	}else {
	   	result_RH8_small = "All transformations \\textless{} Except rename alph"
	   	result_object_RH8_small = 0
	   	result_RH8_less = result_RH8_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH8_small = 5
	 	result_RH8_small = "Inconclusive"
	 	result_RH8_inconclusive = result_RH8_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'small')$orbits) > mean(subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'small')$orbits)){
	 	cat(paste("Number of Orbits for All transformations is ", 100 * (abs(mean(subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'small')$orbits) - mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)) / mean(subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'small')$orbits)), "% greater than \n Number of Orbits for Except rename alph"))				
	 }else{
	     cat(paste("Number of Orbits for Except rename alph is ", 100 * (abs(mean(subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'small')$orbits) - mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)) / mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)), "% greater than \nNumber of Orbits for All transformations"))			    
	 }	
} 
if (length(orbits_cashew_small) != expectedRuns & length(orbits_cashewExceptRenameAlph_small) != expectedRuns){
 	result_object_RH8_small = 4
	result_RH8_small = "None"
	result_RH8_none = result_RH8_none + 1
}
if (length(orbits_cashew_small) == expectedRuns & length(orbits_cashewExceptRenameAlph_small) != expectedRuns){
	result_object_RH8_small = 2
	result_RH8_small = "All transformations"
	result_RH8_cashew = result_RH8_cashew + 1			
}
if (length(orbits_cashew_small) != expectedRuns & length(orbits_cashewExceptRenameAlph_small) == expectedRuns){
	result_object_RH8_small = 3
	result_RH8_small = "Except rename alph"
	result_RH8_cashewExceptRenameAlph = result_RH8_cashewExceptRenameAlph + 1			
}
@  


\subsubsection{RH8.2: Object SMC-Big}

 \textbf{Number of Orbits for All transformations}
 <<RH8_cashew_big, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 orbits_cashew_big = subset(json_data, treatment == 'cashew' & object == 'big' & !is.na(orbits))$orbits
 print(paste("Sample size: ", length(orbits_cashew_big)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)
 
 if(length(orbits_cashew_big) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'big'), "orbits", min(subset(json_data, treatment == 'cashew'& object == 'big')$orbits), max(subset(json_data, treatment == 'cashew' & object == 'big')$orbits))
 
 	shap_cashew_big = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)
 	print(shap_cashew_big)
 	if(shap_cashew_big$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_big$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_big$p.value, sep = " "))
 	}
 }
 @
 \textbf{Number of Orbits for Except rename alph}
 <<RH8_cashewExceptRenameAlph_big, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 orbits_cashewExceptRenameAlph_big = subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'big' & !is.na(orbits))$orbits
 print(paste("Sample size: ", length(orbits_cashewExceptRenameAlph_big)))					
 summary(subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'big')$orbits)
 
 if(length(orbits_cashewExceptRenameAlph_big) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'big'), "orbits", min(subset(json_data, treatment == 'cashewExceptRenameAlph'& object == 'big')$orbits), max(subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'big')$orbits))
 
 	shap_cashewExceptRenameAlph_big = shapiro.test(subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'big')$orbits)
 	print(shap_cashewExceptRenameAlph_big)
 	if(shap_cashewExceptRenameAlph_big$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashewExceptRenameAlph_big$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashewExceptRenameAlph_big$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH8_big, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'cashewExceptRenameAlph') & object == 'big')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$orbits, DF$treatmentDescription, mean)))])
 boxplot_RH8_big = ggplot(DF, aes(x =treatmentDescription , y = orbits)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Number of Orbits by Transformations enabled for SMC-Big") + 
 	ylab("Number of Orbits ")			   
 boxplot_RH8_big
 if(length(orbits_cashew_big) == expectedRuns & length(orbits_cashewExceptRenameAlph_big) == expectedRuns){
 	result_RH8_big_tTest = FALSE
 	result_RH8_big_wTest = FALSE
 	
 	if(shap_cashew_big$p.value > alpha&shap_cashewExceptRenameAlph_big$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'big')$orbits, subset(json_data,treatment == 'cashewExceptRenameAlph' & object == 'big')$orbits)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'big')$orbits, subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'big')$orbits, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH8_big_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(orbits~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'cashewExceptRenameAlph') & object == 'big')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH8_big_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH8_big_wTest = TRUE
 		}
 	}				
 }
if(length(orbits_cashew_big) == expectedRuns & length(orbits_cashewExceptRenameAlph_big) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Number of Orbits for All transformations: ", mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)))
	 print(paste("Mean Number of Orbits for Except rename alph: ", mean(subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'big')$orbits)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits) - mean(subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'big')$orbits))))
	 if (result_RH8_big_tTest | result_RH8_big_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits) > mean(subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'big')$orbits)){
	   	result_RH8_big = "All transformations \\textgreater{} Except rename alph"
	   	result_object_RH8_big = 1
	   	result_RH8_greater = result_RH8_greater + 1
	 	}else {
	   	result_RH8_big = "All transformations \\textless{} Except rename alph"
	   	result_object_RH8_big = 0
	   	result_RH8_less = result_RH8_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH8_big = 5
	 	result_RH8_big = "Inconclusive"
	 	result_RH8_inconclusive = result_RH8_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'big')$orbits) > mean(subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'big')$orbits)){
	 	cat(paste("Number of Orbits for All transformations is ", 100 * (abs(mean(subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'big')$orbits) - mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)) / mean(subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'big')$orbits)), "% greater than \n Number of Orbits for Except rename alph"))				
	 }else{
	     cat(paste("Number of Orbits for Except rename alph is ", 100 * (abs(mean(subset(json_data, treatment == 'cashewExceptRenameAlph' & object == 'big')$orbits) - mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)) / mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)), "% greater than \nNumber of Orbits for All transformations"))			    
	 }	
} 
if (length(orbits_cashew_big) != expectedRuns & length(orbits_cashewExceptRenameAlph_big) != expectedRuns){
 	result_object_RH8_big = 4
	result_RH8_big = "None"
	result_RH8_none = result_RH8_none + 1
}
if (length(orbits_cashew_big) == expectedRuns & length(orbits_cashewExceptRenameAlph_big) != expectedRuns){
	result_object_RH8_big = 2
	result_RH8_big = "All transformations"
	result_RH8_cashew = result_RH8_cashew + 1			
}
if (length(orbits_cashew_big) != expectedRuns & length(orbits_cashewExceptRenameAlph_big) == expectedRuns){
	result_object_RH8_big = 3
	result_RH8_big = "Except rename alph"
	result_RH8_cashewExceptRenameAlph = result_RH8_cashewExceptRenameAlph + 1			
}
@  


 
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH8_result = list(hypothesis = "RH8", results = c(result_RH8_less / result_RH8_objects, result_RH8_greater / result_RH8_objects, result_RH8_cashew / result_RH8_objects, result_RH8_cashewExceptRenameAlph / result_RH8_objects, result_RH8_none / result_RH8_objects, result_RH8_inconclusive / result_RH8_objects), objectResults = list( list(object = 'small', result = result_object_RH8_small),  list(object = 'big', result = result_object_RH8_big) ))	
	@
	
	\subsubsection{RH8 Results: Number of Orbits All transformations = Except rename alph}
	
	
	\begin{table}[H]
	\centering
	\caption{RH8 Results per Object}
	\begin{tabular}{ll}
	\textbf{SMC-Small} & \Sexpr{result_RH8_small} \\
	\textbf{SMC-Big} & \Sexpr{result_RH8_big} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH8 Results Summary}
	\begin{tabular}{ll}
	\textbf{All transformations \textless{} Except rename alph:}& \Sexpr{100 * result_RH8_less / result_RH8_objects}\% \\
	\textbf{All transformations \textgreater{} Except rename alph:}& \Sexpr{100 * result_RH8_greater / result_RH8_objects}\%\\
	\textbf{All transformations:} & \Sexpr{100 * result_RH8_cashew / result_RH8_objects}\%\\
	\textbf{Except rename alph:} & \Sexpr{100 * result_RH8_cashewExceptRenameAlph / result_RH8_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH8_none / result_RH8_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH8_inconclusive / result_RH8_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	



\subsection{RH9: Number of Orbits for Cashew is equals than the Number of Orbits for Cashew Except Rename Var}

 <<RH9, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 
 result_RH9_objects=2
 result_RH9_less=0
 result_RH9_greater=0
 result_RH9_cashew=0
 result_RH9_cashewExceptRenameVar=0
 result_RH9_none=0
 result_RH9_inconclusive=0
 @
 
 <<overview_RH9, include=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
 DF <- data_summary(subset(json_data, (object == 'small' |object == 'big' ) & (treatment == 'cashew' | treatment == 'cashewExceptRenameVar')), varname = "orbits", groupnames = c("treatmentDescription", "objectLabel", "objectOrder"))
 DF$objectLabel <- factor(DF$objectLabel, levels=c("SMC-Small","SMC-Big"))
 		
 		ggplot(DF, aes(x=objectLabel, y=orbits, group=treatmentDescription, color=treatmentDescription)) + 
 		    geom_errorbar(aes(ymin=orbits-sd, ymax=orbits+sd), width=.1, linetype=3) +
 		    geom_line() + geom_point()+
 		   scale_color_brewer(palette="Paired") +
 		   theme_bw() +
 		  scale_x_discrete(name = "Constraints")+
 		  
 		  scale_y_continuous(name = "Number of Orbits ")+
 		  ggtitle("Number of Orbits Overview") + 
 		  theme(legend.title = element_blank())	
 @
 	

\subsubsection{RH9.1: Object SMC-Small}

 \textbf{Number of Orbits for All transformations}
 <<RH9_cashew_small, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 orbits_cashew_small = subset(json_data, treatment == 'cashew' & object == 'small' & !is.na(orbits))$orbits
 print(paste("Sample size: ", length(orbits_cashew_small)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)
 
 if(length(orbits_cashew_small) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'small'), "orbits", min(subset(json_data, treatment == 'cashew'& object == 'small')$orbits), max(subset(json_data, treatment == 'cashew' & object == 'small')$orbits))
 
 	shap_cashew_small = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)
 	print(shap_cashew_small)
 	if(shap_cashew_small$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_small$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_small$p.value, sep = " "))
 	}
 }
 @
 \textbf{Number of Orbits for Except rename var}
 <<RH9_cashewExceptRenameVar_small, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 orbits_cashewExceptRenameVar_small = subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'small' & !is.na(orbits))$orbits
 print(paste("Sample size: ", length(orbits_cashewExceptRenameVar_small)))					
 summary(subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'small')$orbits)
 
 if(length(orbits_cashewExceptRenameVar_small) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'small'), "orbits", min(subset(json_data, treatment == 'cashewExceptRenameVar'& object == 'small')$orbits), max(subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'small')$orbits))
 
 	shap_cashewExceptRenameVar_small = shapiro.test(subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'small')$orbits)
 	print(shap_cashewExceptRenameVar_small)
 	if(shap_cashewExceptRenameVar_small$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashewExceptRenameVar_small$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashewExceptRenameVar_small$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH9_small, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'cashewExceptRenameVar') & object == 'small')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$orbits, DF$treatmentDescription, mean)))])
 boxplot_RH9_small = ggplot(DF, aes(x =treatmentDescription , y = orbits)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Number of Orbits by Transformations enabled for SMC-Small") + 
 	ylab("Number of Orbits ")			   
 boxplot_RH9_small
 if(length(orbits_cashew_small) == expectedRuns & length(orbits_cashewExceptRenameVar_small) == expectedRuns){
 	result_RH9_small_tTest = FALSE
 	result_RH9_small_wTest = FALSE
 	
 	if(shap_cashew_small$p.value > alpha&shap_cashewExceptRenameVar_small$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'small')$orbits, subset(json_data,treatment == 'cashewExceptRenameVar' & object == 'small')$orbits)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'small')$orbits, subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'small')$orbits, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH9_small_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(orbits~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'cashewExceptRenameVar') & object == 'small')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH9_small_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH9_small_wTest = TRUE
 		}
 	}				
 }
if(length(orbits_cashew_small) == expectedRuns & length(orbits_cashewExceptRenameVar_small) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Number of Orbits for All transformations: ", mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)))
	 print(paste("Mean Number of Orbits for Except rename var: ", mean(subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'small')$orbits)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits) - mean(subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'small')$orbits))))
	 if (result_RH9_small_tTest | result_RH9_small_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits) > mean(subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'small')$orbits)){
	   	result_RH9_small = "All transformations \\textgreater{} Except rename var"
	   	result_object_RH9_small = 1
	   	result_RH9_greater = result_RH9_greater + 1
	 	}else {
	   	result_RH9_small = "All transformations \\textless{} Except rename var"
	   	result_object_RH9_small = 0
	   	result_RH9_less = result_RH9_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH9_small = 5
	 	result_RH9_small = "Inconclusive"
	 	result_RH9_inconclusive = result_RH9_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'small')$orbits) > mean(subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'small')$orbits)){
	 	cat(paste("Number of Orbits for All transformations is ", 100 * (abs(mean(subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'small')$orbits) - mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)) / mean(subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'small')$orbits)), "% greater than \n Number of Orbits for Except rename var"))				
	 }else{
	     cat(paste("Number of Orbits for Except rename var is ", 100 * (abs(mean(subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'small')$orbits) - mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)) / mean(subset(json_data, treatment == 'cashew' & object == 'small')$orbits)), "% greater than \nNumber of Orbits for All transformations"))			    
	 }	
} 
if (length(orbits_cashew_small) != expectedRuns & length(orbits_cashewExceptRenameVar_small) != expectedRuns){
 	result_object_RH9_small = 4
	result_RH9_small = "None"
	result_RH9_none = result_RH9_none + 1
}
if (length(orbits_cashew_small) == expectedRuns & length(orbits_cashewExceptRenameVar_small) != expectedRuns){
	result_object_RH9_small = 2
	result_RH9_small = "All transformations"
	result_RH9_cashew = result_RH9_cashew + 1			
}
if (length(orbits_cashew_small) != expectedRuns & length(orbits_cashewExceptRenameVar_small) == expectedRuns){
	result_object_RH9_small = 3
	result_RH9_small = "Except rename var"
	result_RH9_cashewExceptRenameVar = result_RH9_cashewExceptRenameVar + 1			
}
@  


\subsubsection{RH9.2: Object SMC-Big}

 \textbf{Number of Orbits for All transformations}
 <<RH9_cashew_big, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 orbits_cashew_big = subset(json_data, treatment == 'cashew' & object == 'big' & !is.na(orbits))$orbits
 print(paste("Sample size: ", length(orbits_cashew_big)))					
 summary(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)
 
 if(length(orbits_cashew_big) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashew' & object == 'big'), "orbits", min(subset(json_data, treatment == 'cashew'& object == 'big')$orbits), max(subset(json_data, treatment == 'cashew' & object == 'big')$orbits))
 
 	shap_cashew_big = shapiro.test(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)
 	print(shap_cashew_big)
 	if(shap_cashew_big$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashew_big$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashew_big$p.value, sep = " "))
 	}
 }
 @
 \textbf{Number of Orbits for Except rename var}
 <<RH9_cashewExceptRenameVar_big, include = TRUE, echo = FALSE, warning = FALSE , message = FALSE >>=
 orbits_cashewExceptRenameVar_big = subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'big' & !is.na(orbits))$orbits
 print(paste("Sample size: ", length(orbits_cashewExceptRenameVar_big)))					
 summary(subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'big')$orbits)
 
 if(length(orbits_cashewExceptRenameVar_big) == expectedRuns){		
 	reproducer::boxplotAndDensityCurveOnHistogram(subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'big'), "orbits", min(subset(json_data, treatment == 'cashewExceptRenameVar'& object == 'big')$orbits), max(subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'big')$orbits))
 
 	shap_cashewExceptRenameVar_big = shapiro.test(subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'big')$orbits)
 	print(shap_cashewExceptRenameVar_big)
 	if(shap_cashewExceptRenameVar_big$p.value > alpha){
 		print(paste("Shapiro test: Null Hypothesis (normality) not rejected. P-value:",shap_cashewExceptRenameVar_big$p.value, sep = " "))
 	}else{
 		print(paste("Shapiro test: Null Hypothesis (normality) rejected. P-value:",shap_cashewExceptRenameVar_big$p.value, sep = " "))
 	}
 }
 @
  
 \textbf{Comparison}
  
 <<RH9_big, include=TRUE, echo=FALSE, warning=FALSE, message=FALSE >>=
 DF=subset(json_data,(treatment == 'cashew' | treatment == 'cashewExceptRenameVar') & object == 'big')
 DF$treatmentDescription = ordered(DF$treatmentDescription, levels = levels(DF$treatmentDescription)[order(as.numeric(by(DF$orbits, DF$treatmentDescription, mean)))])
 boxplot_RH9_big = ggplot(DF, aes(x =treatmentDescription , y = orbits)) +
 	geom_boxplot(fill = "#4271AE", colour = "#1F3552",alpha = 0.7,outlier.colour = "#1F3552", outlier.shape = 20)+
 	theme_bw() +    
 	scale_x_discrete(name = "Transformations enabled")+
 	ggtitle("Number of Orbits by Transformations enabled for SMC-Big") + 
 	ylab("Number of Orbits ")			   
 boxplot_RH9_big
 if(length(orbits_cashew_big) == expectedRuns & length(orbits_cashewExceptRenameVar_big) == expectedRuns){
 	result_RH9_big_tTest = FALSE
 	result_RH9_big_wTest = FALSE
 	
 	if(shap_cashew_big$p.value > alpha&shap_cashewExceptRenameVar_big$p.value > alpha){
 		print("Fisher's F-test to verify the homoskedasticity (homogeneity of variances)")
 	
 		fTest = var.test(subset(json_data, treatment == 'cashew' & object == 'big')$orbits, subset(json_data,treatment == 'cashewExceptRenameVar' & object == 'big')$orbits)
 		print(fTest)
 		  
 		print(paste("Homogeneity of variances: ", fTest$p.value > alpha, ". P-value: ", fTest$p.value, sep = ""))
 		  
 		print("Assuming that the two samples are taken from populations that follow a Gaussian distribution (if we cannot assume that, we must solve this problem using the non-parametric test called Wilcoxon-Mann-Whitney test)") 
 		tTest = t.test(subset(json_data, treatment == 'cashew' & object == 'big')$orbits, subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'big')$orbits, var.equal = fTest$p.value > alpha, paired = FALSE)
 		print(tTest)
 		if(tTest$p.value > alpha){
 			print(paste("T-test: Null Hypothesis not rejected. P-value:", tTest$p.value, sep = " "))
 		
 		}else{
 	    	print(paste("T-test: Null Hypothesis rejected. P-value:", tTest$p.value, sep = " "))
 	    	result_RH9_big_tTest = TRUE
 		}
 	}else{
 		wTest = wilcox.test(orbits~treatment, data=subset(json_data, (treatment == 'cashew' | treatment == 'cashewExceptRenameVar') & object == 'big')) 
 		print(wTest)
 		if(wTest$p.value > alpha){
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis not rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH9_big_wTest = FALSE
 		}else{
 			print(paste("Wilcoxon-Mann-Whitney test: Null Hypothesis rejected. P-value:", wTest$p.value, sep = " "))
 			result_RH9_big_wTest = TRUE
 		}
 	}				
 }
if(length(orbits_cashew_big) == expectedRuns & length(orbits_cashewExceptRenameVar_big) == expectedRuns){
	 print("")
	 print("Means comparison")
	 print(paste("Mean Number of Orbits for All transformations: ", mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)))
	 print(paste("Mean Number of Orbits for Except rename var: ", mean(subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'big')$orbits)))
	 print(paste("Absolute difference: ", abs(mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits) - mean(subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'big')$orbits))))
	 if (result_RH9_big_tTest | result_RH9_big_wTest){
	 	if(mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits) > mean(subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'big')$orbits)){
	   	result_RH9_big = "All transformations \\textgreater{} Except rename var"
	   	result_object_RH9_big = 1
	   	result_RH9_greater = result_RH9_greater + 1
	 	}else {
	   	result_RH9_big = "All transformations \\textless{} Except rename var"
	   	result_object_RH9_big = 0
	   	result_RH9_less = result_RH9_less + 1
	 	}	
	 
	 }else{
	 	result_object_RH9_big = 5
	 	result_RH9_big = "Inconclusive"
	 	result_RH9_inconclusive = result_RH9_inconclusive + 1
	 }
	 
	 if(mean(subset(json_data,treatment == 'cashew' & object == 'big')$orbits) > mean(subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'big')$orbits)){
	 	cat(paste("Number of Orbits for All transformations is ", 100 * (abs(mean(subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'big')$orbits) - mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)) / mean(subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'big')$orbits)), "% greater than \n Number of Orbits for Except rename var"))				
	 }else{
	     cat(paste("Number of Orbits for Except rename var is ", 100 * (abs(mean(subset(json_data, treatment == 'cashewExceptRenameVar' & object == 'big')$orbits) - mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)) / mean(subset(json_data, treatment == 'cashew' & object == 'big')$orbits)), "% greater than \nNumber of Orbits for All transformations"))			    
	 }	
} 
if (length(orbits_cashew_big) != expectedRuns & length(orbits_cashewExceptRenameVar_big) != expectedRuns){
 	result_object_RH9_big = 4
	result_RH9_big = "None"
	result_RH9_none = result_RH9_none + 1
}
if (length(orbits_cashew_big) == expectedRuns & length(orbits_cashewExceptRenameVar_big) != expectedRuns){
	result_object_RH9_big = 2
	result_RH9_big = "All transformations"
	result_RH9_cashew = result_RH9_cashew + 1			
}
if (length(orbits_cashew_big) != expectedRuns & length(orbits_cashewExceptRenameVar_big) == expectedRuns){
	result_object_RH9_big = 3
	result_RH9_big = "Except rename var"
	result_RH9_cashewExceptRenameVar = result_RH9_cashewExceptRenameVar + 1			
}
@  


 
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH9_result = list(hypothesis = "RH9", results = c(result_RH9_less / result_RH9_objects, result_RH9_greater / result_RH9_objects, result_RH9_cashew / result_RH9_objects, result_RH9_cashewExceptRenameVar / result_RH9_objects, result_RH9_none / result_RH9_objects, result_RH9_inconclusive / result_RH9_objects), objectResults = list( list(object = 'small', result = result_object_RH9_small),  list(object = 'big', result = result_object_RH9_big) ))	
	@
	
	\subsubsection{RH9 Results: Number of Orbits All transformations = Except rename var}
	
	
	\begin{table}[H]
	\centering
	\caption{RH9 Results per Object}
	\begin{tabular}{ll}
	\textbf{SMC-Small} & \Sexpr{result_RH9_small} \\
	\textbf{SMC-Big} & \Sexpr{result_RH9_big} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH9 Results Summary}
	\begin{tabular}{ll}
	\textbf{All transformations \textless{} Except rename var:}& \Sexpr{100 * result_RH9_less / result_RH9_objects}\% \\
	\textbf{All transformations \textgreater{} Except rename var:}& \Sexpr{100 * result_RH9_greater / result_RH9_objects}\%\\
	\textbf{All transformations:} & \Sexpr{100 * result_RH9_cashew / result_RH9_objects}\%\\
	\textbf{Except rename var:} & \Sexpr{100 * result_RH9_cashewExceptRenameVar / result_RH9_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH9_none / result_RH9_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH9_inconclusive / result_RH9_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	



\section{Result Summary}
\subsection{Research Hypotheses}

	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH1_result = list(hypothesis = "RH1", results = c(result_RH1_less / result_RH1_objects, result_RH1_greater / result_RH1_objects, result_RH1_cashew / result_RH1_objects, result_RH1_noCache / result_RH1_objects, result_RH1_none / result_RH1_objects, result_RH1_inconclusive / result_RH1_objects), objectResults = list( list(object = 'small', result = result_object_RH1_small),  list(object = 'big', result = result_object_RH1_big) ))	
	@
	
	\subsubsection{RH1 Results: Average time All transformations = No cache}
	
	
	\begin{table}[H]
	\centering
	\caption{RH1 Results per Object}
	\begin{tabular}{ll}
	\textbf{SMC-Small} & \Sexpr{result_RH1_small} \\
	\textbf{SMC-Big} & \Sexpr{result_RH1_big} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH1 Results Summary}
	\begin{tabular}{ll}
	\textbf{All transformations \textless{} No cache:}& \Sexpr{100 * result_RH1_less / result_RH1_objects}\% \\
	\textbf{All transformations \textgreater{} No cache:}& \Sexpr{100 * result_RH1_greater / result_RH1_objects}\%\\
	\textbf{All transformations:} & \Sexpr{100 * result_RH1_cashew / result_RH1_objects}\%\\
	\textbf{No cache:} & \Sexpr{100 * result_RH1_noCache / result_RH1_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH1_none / result_RH1_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH1_inconclusive / result_RH1_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH2_result = list(hypothesis = "RH2", results = c(result_RH2_less / result_RH2_objects, result_RH2_greater / result_RH2_objects, result_RH2_cashew / result_RH2_objects, result_RH2_noCache / result_RH2_objects, result_RH2_none / result_RH2_objects, result_RH2_inconclusive / result_RH2_objects), objectResults = list( list(object = 'small', result = result_object_RH2_small),  list(object = 'big', result = result_object_RH2_big) ))	
	@
	
	\subsubsection{RH2 Results: Maximum time All transformations = No cache}
	
	
	\begin{table}[H]
	\centering
	\caption{RH2 Results per Object}
	\begin{tabular}{ll}
	\textbf{SMC-Small} & \Sexpr{result_RH2_small} \\
	\textbf{SMC-Big} & \Sexpr{result_RH2_big} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH2 Results Summary}
	\begin{tabular}{ll}
	\textbf{All transformations \textless{} No cache:}& \Sexpr{100 * result_RH2_less / result_RH2_objects}\% \\
	\textbf{All transformations \textgreater{} No cache:}& \Sexpr{100 * result_RH2_greater / result_RH2_objects}\%\\
	\textbf{All transformations:} & \Sexpr{100 * result_RH2_cashew / result_RH2_objects}\%\\
	\textbf{No cache:} & \Sexpr{100 * result_RH2_noCache / result_RH2_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH2_none / result_RH2_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH2_inconclusive / result_RH2_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH3_result = list(hypothesis = "RH3", results = c(result_RH3_less / result_RH3_objects, result_RH3_greater / result_RH3_objects, result_RH3_cashew / result_RH3_objects, result_RH3_noCache / result_RH3_objects, result_RH3_none / result_RH3_objects, result_RH3_inconclusive / result_RH3_objects), objectResults = list( list(object = 'small', result = result_object_RH3_small),  list(object = 'big', result = result_object_RH3_big) ))	
	@
	
	\subsubsection{RH3 Results: Total time All transformations = No cache}
	
	
	\begin{table}[H]
	\centering
	\caption{RH3 Results per Object}
	\begin{tabular}{ll}
	\textbf{SMC-Small} & \Sexpr{result_RH3_small} \\
	\textbf{SMC-Big} & \Sexpr{result_RH3_big} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH3 Results Summary}
	\begin{tabular}{ll}
	\textbf{All transformations \textless{} No cache:}& \Sexpr{100 * result_RH3_less / result_RH3_objects}\% \\
	\textbf{All transformations \textgreater{} No cache:}& \Sexpr{100 * result_RH3_greater / result_RH3_objects}\%\\
	\textbf{All transformations:} & \Sexpr{100 * result_RH3_cashew / result_RH3_objects}\%\\
	\textbf{No cache:} & \Sexpr{100 * result_RH3_noCache / result_RH3_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH3_none / result_RH3_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH3_inconclusive / result_RH3_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH4_result = list(hypothesis = "RH4", results = c(result_RH4_less / result_RH4_objects, result_RH4_greater / result_RH4_objects, result_RH4_cashew / result_RH4_objects, result_RH4_noCache / result_RH4_objects, result_RH4_none / result_RH4_objects, result_RH4_inconclusive / result_RH4_objects), objectResults = list( list(object = 'small', result = result_object_RH4_small),  list(object = 'big', result = result_object_RH4_big) ))	
	@
	
	\subsubsection{RH4 Results: Number of Orbits All transformations = No cache}
	
	
	\begin{table}[H]
	\centering
	\caption{RH4 Results per Object}
	\begin{tabular}{ll}
	\textbf{SMC-Small} & \Sexpr{result_RH4_small} \\
	\textbf{SMC-Big} & \Sexpr{result_RH4_big} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH4 Results Summary}
	\begin{tabular}{ll}
	\textbf{All transformations \textless{} No cache:}& \Sexpr{100 * result_RH4_less / result_RH4_objects}\% \\
	\textbf{All transformations \textgreater{} No cache:}& \Sexpr{100 * result_RH4_greater / result_RH4_objects}\%\\
	\textbf{All transformations:} & \Sexpr{100 * result_RH4_cashew / result_RH4_objects}\%\\
	\textbf{No cache:} & \Sexpr{100 * result_RH4_noCache / result_RH4_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH4_none / result_RH4_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH4_inconclusive / result_RH4_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH5_result = list(hypothesis = "RH5", results = c(result_RH5_less / result_RH5_objects, result_RH5_greater / result_RH5_objects, result_RH5_cashew / result_RH5_objects, result_RH5_cashewExceptOrder / result_RH5_objects, result_RH5_none / result_RH5_objects, result_RH5_inconclusive / result_RH5_objects), objectResults = list( list(object = 'small', result = result_object_RH5_small),  list(object = 'big', result = result_object_RH5_big) ))	
	@
	
	\subsubsection{RH5 Results: Number of Orbits All transformations = Except order}
	
	
	\begin{table}[H]
	\centering
	\caption{RH5 Results per Object}
	\begin{tabular}{ll}
	\textbf{SMC-Small} & \Sexpr{result_RH5_small} \\
	\textbf{SMC-Big} & \Sexpr{result_RH5_big} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH5 Results Summary}
	\begin{tabular}{ll}
	\textbf{All transformations \textless{} Except order:}& \Sexpr{100 * result_RH5_less / result_RH5_objects}\% \\
	\textbf{All transformations \textgreater{} Except order:}& \Sexpr{100 * result_RH5_greater / result_RH5_objects}\%\\
	\textbf{All transformations:} & \Sexpr{100 * result_RH5_cashew / result_RH5_objects}\%\\
	\textbf{Except order:} & \Sexpr{100 * result_RH5_cashewExceptOrder / result_RH5_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH5_none / result_RH5_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH5_inconclusive / result_RH5_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH6_result = list(hypothesis = "RH6", results = c(result_RH6_less / result_RH6_objects, result_RH6_greater / result_RH6_objects, result_RH6_cashew / result_RH6_objects, result_RH6_cashewExceptReduce / result_RH6_objects, result_RH6_none / result_RH6_objects, result_RH6_inconclusive / result_RH6_objects), objectResults = list( list(object = 'small', result = result_object_RH6_small),  list(object = 'big', result = result_object_RH6_big) ))	
	@
	
	\subsubsection{RH6 Results: Number of Orbits All transformations = Except removeVar}
	
	
	\begin{table}[H]
	\centering
	\caption{RH6 Results per Object}
	\begin{tabular}{ll}
	\textbf{SMC-Small} & \Sexpr{result_RH6_small} \\
	\textbf{SMC-Big} & \Sexpr{result_RH6_big} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH6 Results Summary}
	\begin{tabular}{ll}
	\textbf{All transformations \textless{} Except removeVar:}& \Sexpr{100 * result_RH6_less / result_RH6_objects}\% \\
	\textbf{All transformations \textgreater{} Except removeVar:}& \Sexpr{100 * result_RH6_greater / result_RH6_objects}\%\\
	\textbf{All transformations:} & \Sexpr{100 * result_RH6_cashew / result_RH6_objects}\%\\
	\textbf{Except removeVar:} & \Sexpr{100 * result_RH6_cashewExceptReduce / result_RH6_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH6_none / result_RH6_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH6_inconclusive / result_RH6_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH7_result = list(hypothesis = "RH7", results = c(result_RH7_less / result_RH7_objects, result_RH7_greater / result_RH7_objects, result_RH7_cashew / result_RH7_objects, result_RH7_cashewExceptRemove / result_RH7_objects, result_RH7_none / result_RH7_objects, result_RH7_inconclusive / result_RH7_objects), objectResults = list( list(object = 'small', result = result_object_RH7_small),  list(object = 'big', result = result_object_RH7_big) ))	
	@
	
	\subsubsection{RH7 Results: Number of Orbits All transformations = Except removeConj}
	
	
	\begin{table}[H]
	\centering
	\caption{RH7 Results per Object}
	\begin{tabular}{ll}
	\textbf{SMC-Small} & \Sexpr{result_RH7_small} \\
	\textbf{SMC-Big} & \Sexpr{result_RH7_big} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH7 Results Summary}
	\begin{tabular}{ll}
	\textbf{All transformations \textless{} Except removeConj:}& \Sexpr{100 * result_RH7_less / result_RH7_objects}\% \\
	\textbf{All transformations \textgreater{} Except removeConj:}& \Sexpr{100 * result_RH7_greater / result_RH7_objects}\%\\
	\textbf{All transformations:} & \Sexpr{100 * result_RH7_cashew / result_RH7_objects}\%\\
	\textbf{Except removeConj:} & \Sexpr{100 * result_RH7_cashewExceptRemove / result_RH7_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH7_none / result_RH7_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH7_inconclusive / result_RH7_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH8_result = list(hypothesis = "RH8", results = c(result_RH8_less / result_RH8_objects, result_RH8_greater / result_RH8_objects, result_RH8_cashew / result_RH8_objects, result_RH8_cashewExceptRenameAlph / result_RH8_objects, result_RH8_none / result_RH8_objects, result_RH8_inconclusive / result_RH8_objects), objectResults = list( list(object = 'small', result = result_object_RH8_small),  list(object = 'big', result = result_object_RH8_big) ))	
	@
	
	\subsubsection{RH8 Results: Number of Orbits All transformations = Except rename alph}
	
	
	\begin{table}[H]
	\centering
	\caption{RH8 Results per Object}
	\begin{tabular}{ll}
	\textbf{SMC-Small} & \Sexpr{result_RH8_small} \\
	\textbf{SMC-Big} & \Sexpr{result_RH8_big} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH8 Results Summary}
	\begin{tabular}{ll}
	\textbf{All transformations \textless{} Except rename alph:}& \Sexpr{100 * result_RH8_less / result_RH8_objects}\% \\
	\textbf{All transformations \textgreater{} Except rename alph:}& \Sexpr{100 * result_RH8_greater / result_RH8_objects}\%\\
	\textbf{All transformations:} & \Sexpr{100 * result_RH8_cashew / result_RH8_objects}\%\\
	\textbf{Except rename alph:} & \Sexpr{100 * result_RH8_cashewExceptRenameAlph / result_RH8_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH8_none / result_RH8_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH8_inconclusive / result_RH8_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	
	<<echo=FALSE, echo=FALSE, warning=FALSE , message=FALSE >>=
	RH9_result = list(hypothesis = "RH9", results = c(result_RH9_less / result_RH9_objects, result_RH9_greater / result_RH9_objects, result_RH9_cashew / result_RH9_objects, result_RH9_cashewExceptRenameVar / result_RH9_objects, result_RH9_none / result_RH9_objects, result_RH9_inconclusive / result_RH9_objects), objectResults = list( list(object = 'small', result = result_object_RH9_small),  list(object = 'big', result = result_object_RH9_big) ))	
	@
	
	\subsubsection{RH9 Results: Number of Orbits All transformations = Except rename var}
	
	
	\begin{table}[H]
	\centering
	\caption{RH9 Results per Object}
	\begin{tabular}{ll}
	\textbf{SMC-Small} & \Sexpr{result_RH9_small} \\
	\textbf{SMC-Big} & \Sexpr{result_RH9_big} \\
	\end{tabular}
	\end{table}

	\begin{table}[H]
	\centering
	\caption{RH9 Results Summary}
	\begin{tabular}{ll}
	\textbf{All transformations \textless{} Except rename var:}& \Sexpr{100 * result_RH9_less / result_RH9_objects}\% \\
	\textbf{All transformations \textgreater{} Except rename var:}& \Sexpr{100 * result_RH9_greater / result_RH9_objects}\%\\
	\textbf{All transformations:} & \Sexpr{100 * result_RH9_cashew / result_RH9_objects}\%\\
	\textbf{Except rename var:} & \Sexpr{100 * result_RH9_cashewExceptRenameVar / result_RH9_objects}\%\\
	\textbf{None:}& \Sexpr{100 * result_RH9_none / result_RH9_objects}\%\\
	\textbf{Inconclusive:}& \Sexpr{100 * result_RH9_inconclusive / result_RH9_objects}\%
			
	
	\end{tabular}
	\end{table}
	
	
	
		

<<echo=TRUE, echo=FALSE, warning=FALSE , message=FALSE >>=
experimentResults = list( RH1_result, RH2_result, RH3_result, RH4_result, RH5_result, RH6_result, RH7_result, RH8_result, RH9_result)
write(toJSON(experimentResults, pretty = TRUE, auto_unbox = TRUE), "experimentResults.json")

@
	
\clearpage
\appendix
\section{Session Information}
<<echo=FALSE, warning=FALSE , message=FALSE >>=
sessionInfo()
@

\end{document}
